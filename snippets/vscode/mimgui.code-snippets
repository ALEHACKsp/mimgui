{
  "imgui.ImGuiStyleVar_WindowTitleAlign":{
    "scope":"lua",
    "body":"imgui.StyleVar.WindowTitleAlign",
    "prefix":"imgui.StyleVar.WindowTitleAlign",
    "description":"[C++] ImGuiStyleVar_WindowTitleAlign = 5\n\n"
  },
  "imgui.ImVector_ImWchar_ImVector_ImWchar":{
    "scope":"lua",
    "body":"imgui.ImVector_ImWchar()",
    "prefix":"imgui.ImVector_ImWchar",
    "description":"[C++] ImVector_ImWchar()\n\n"
  },
  "imgui.ImVector_ImDrawIdx_push_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:push_back(${1:v})",
    "prefix":"ImVector_ImDrawIdx:push_back",
    "description":"[C++] void ImVector_ImDrawIdx::push_back(ImVector_ImDrawIdx* self, const ImDrawIdx v)\n\n"
  },
  "imgui.ImGuiColorEditFlags_Float":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.Float",
    "prefix":"imgui.ColorEditFlags.Float",
    "description":"[C++] ImGuiColorEditFlags_Float = 1 << 24\n\n"
  },
  "imgui.ImGuiStyle.ItemInnerSpacing":{
    "scope":"lua",
    "body":"ImGuiStyle.ItemInnerSpacing",
    "prefix":"ImGuiStyle.ItemInnerSpacing",
    "description":"[C++] ImVec2 ImGuiStyle::ItemInnerSpacing\n\n"
  },
  "imgui.igSelectable":{
    "scope":"lua",
    "body":"imgui.Selectable(${1:label}${2:[, selected=false]}${3:[, flags=0]}${4:[, size=ImVec2(0,0)]})",
    "prefix":"imgui.Selectable",
    "description":"[C++] bool ImGui::Selectable(const char* label, bool selected=false, ImGuiSelectableFlags flags=0, const ImVec2& size=ImVec2(0, 0))\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_erase":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:erase(${1:it})",
    "prefix":"ImVector_ImGuiTextRange:erase",
    "description":"[C++] ImGuiTextRange* ImVector_ImGuiTextRange::erase(ImVector_ImGuiTextRange* self, ImGuiTextRange const * it)\n\n"
  },
  "imgui.igBeginChild":{
    "scope":"lua",
    "body":"imgui.BeginChild(${1:str_id}${2:[, size=ImVec2(0,0)]}${3:[, border=false]}${4:[, flags=0]})",
    "prefix":"imgui.BeginChild",
    "description":"[C++] bool ImGui::BeginChild(const char* str_id, const ImVec2& size=ImVec2(0, 0), bool border=false, ImGuiWindowFlags flags=0)\n\n"
  },
  "imgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.AcceptNoDrawDefaultRect",
    "prefix":"imgui.DragDropFlags.AcceptNoDrawDefaultRect",
    "description":"[C++] ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11\n\n"
  },
  "imgui.igNewLine":{
    "scope":"lua",
    "body":"imgui.NewLine()",
    "prefix":"imgui.NewLine",
    "description":"[C++] void ImGui::NewLine()\n\n"
  },
  "imgui.ImVector_ImFontConfig_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImFontConfig:erase_unsorted",
    "description":"[C++] ImFontConfig* ImVector_ImFontConfig::erase_unsorted(ImVector_ImFontConfig* self, ImFontConfig const * it)\n\n"
  },
  "imgui.igRadioButtonBool":{
    "scope":"lua",
    "body":"imgui.RadioButtonBool(${1:label}, ${2:active})",
    "prefix":"imgui.RadioButton",
    "description":"[C++] bool ImGui::RadioButton(const char* label, bool active)\n\n"
  },
  "imgui.ImVector_char_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_char:size_in_bytes()",
    "prefix":"ImVector_char:size_in_bytes",
    "description":"[C++] int ImVector_char::size_in_bytes(const ImVector_char* self)\n\n"
  },
  "imgui.ImVector_ImFontConfig_capacity":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:capacity()",
    "prefix":"ImVector_ImFontConfig:capacity",
    "description":"[C++] int ImVector_ImFontConfig::capacity(const ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImFont_RenderText":{
    "scope":"lua",
    "body":"ImFont:RenderText(${1:draw_list}, ${2:size}, ${3:pos}, ${4:col}, ${5:clip_rect}, ${6:text_begin}, ${7:text_end}${8:[, wrap_width=0.0f]}${9:[, cpu_fine_clip=false]})",
    "prefix":"ImFont:RenderText",
    "description":"[C++] void ImFont::RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width=0.0f, bool cpu_fine_clip=false)\n\n"
  },
  "imgui.ImVector_ImU32_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImU32:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImU32:erase_unsorted",
    "description":"[C++] ImU32* ImVector_ImU32::erase_unsorted(ImVector_ImU32* self, ImU32 const * it)\n\n"
  },
  "imgui.ImVector_ImFontConfig_erase":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:erase(${1:it})",
    "prefix":"ImVector_ImFontConfig:erase",
    "description":"[C++] ImFontConfig* ImVector_ImFontConfig::erase(ImVector_ImFontConfig* self, ImFontConfig const * it)\n\n"
  },
  "imgui.ImGuiSelectableFlags_AllowDoubleClick":{
    "scope":"lua",
    "body":"imgui.SelectableFlags.AllowDoubleClick",
    "prefix":"imgui.SelectableFlags.AllowDoubleClick",
    "description":"[C++] ImGuiSelectableFlags_AllowDoubleClick = 1 << 2\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoTooltip":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoTooltip",
    "prefix":"imgui.ColorEditFlags.NoTooltip",
    "description":"[C++] ImGuiColorEditFlags_NoTooltip = 1 << 6\n\n"
  },
  "imgui.ImDrawList_PrimWriteVtx":{
    "scope":"lua",
    "body":"ImDrawList:PrimWriteVtx(${1:pos}, ${2:uv}, ${3:col})",
    "prefix":"ImDrawList:PrimWriteVtx",
    "description":"[C++] void ImDrawList::PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)\n\n"
  },
  "imgui.ImGuiTextBuffer_c_str":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:c_str()",
    "prefix":"ImGuiTextBuffer:c_str",
    "description":"[C++] const char* ImGuiTextBuffer::c_str()\n\n"
  },
  "imgui.ImFont_GetCharAdvance":{
    "scope":"lua",
    "body":"ImFont:GetCharAdvance(${1:c})",
    "prefix":"ImFont:GetCharAdvance",
    "description":"[C++] float ImFont::GetCharAdvance(ImWchar c)\n\n"
  },
  "imgui.ImGuiMouseCursor_COUNT":{
    "scope":"lua",
    "body":"imgui.MouseCursor.COUNT",
    "prefix":"imgui.MouseCursor.COUNT",
    "description":"[C++] ImGuiMouseCursor_COUNT = 8\n\n"
  },
  "imgui.ImGuiIO.KeysDownDurationPrev[512]":{
    "scope":"lua",
    "body":"ImGuiIO.KeysDownDurationPrev[512]",
    "prefix":"ImGuiIO.KeysDownDurationPrev[512]",
    "description":"[C++] float ImGuiIO::KeysDownDurationPrev[512]\n\n"
  },
  "imgui.ImVector_ImTextureID_insert":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImTextureID:insert",
    "description":"[C++] ImTextureID* ImVector_ImTextureID::insert(ImVector_ImTextureID* self, ImTextureID const * it, const ImTextureID v)\n\n"
  },
  "imgui.igTextWrapped":{
    "scope":"lua",
    "body":"imgui.TextWrapped(${1:fmt},...)",
    "prefix":"imgui.TextWrapped",
    "description":"[C++] void ImGui::TextWrapped(const char* fmt, ...)\n\n"
  },
  "imgui.ImGuiKey_Escape":{
    "scope":"lua",
    "body":"imgui.Key.Escape",
    "prefix":"imgui.Key.Escape",
    "description":"[C++] ImGuiKey_Escape = 14\n\n"
  },
  "imgui.ImVector_ImFontGlyph_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImFontGlyph:index_from_ptr",
    "description":"[C++] int ImVector_ImFontGlyph::index_from_ptr(const ImVector_ImFontGlyph* self, ImFontGlyph const * it)\n\n"
  },
  "imgui.ImVector_ImFontConfig_reserve":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImFontConfig:reserve",
    "description":"[C++] void ImVector_ImFontConfig::reserve(ImVector_ImFontConfig* self, int new_capacity)\n\n"
  },
  "imgui.ImDrawList._VtxCurrentIdx":{
    "scope":"lua",
    "body":"ImDrawList._VtxCurrentIdx",
    "prefix":"ImDrawList._VtxCurrentIdx",
    "description":"[C++] unsigned int ImDrawList::_VtxCurrentIdx\n\n"
  },
  "imgui.ImVector_ImWchar_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImWchar:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImWchar:erase_unsorted",
    "description":"[C++] ImWchar* ImVector_ImWchar::erase_unsorted(ImVector_ImWchar* self, ImWchar const * it)\n\n"
  },
  "imgui.igStyleColorsDark":{
    "scope":"lua",
    "body":"imgui.StyleColorsDark(${1:[dst=((void*)0)]})",
    "prefix":"imgui.StyleColorsDark",
    "description":"[C++] void ImGui::StyleColorsDark(ImGuiStyle* dst=((void*)0))\n\n"
  },
  "imgui.ImVector_ImFontPtr_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImFontPtr:erase",
    "description":"[C++] ImFont** ImVector_ImFontPtr::erase(ImVector_ImFontPtr* self, ImFont* const * it, ImFont* const * it_last)\n\n"
  },
  "imgui.ImColor_ImColorFloat":{
    "scope":"lua",
    "body":"imgui.ImColor.ImColorFloat(${1:r}, ${2:g}, ${3:b}${4:[, a=1.0f]})",
    "prefix":"imgui.ImColor.ImColor",
    "description":"[C++] ImColor(float r, float g, float b, float a=1.0f)\n\n"
  },
  "imgui.ImVector_erase":{
    "scope":"lua",
    "body":"ImVector:erase(${1:it})",
    "prefix":"ImVector:erase",
    "description":"[C++] T* ImVector::erase(const T* it)\n\n"
  },
  "imgui.igIsMouseClicked":{
    "scope":"lua",
    "body":"imgui.IsMouseClicked(${1:button}${2:[, repeat=false]})",
    "prefix":"imgui.IsMouseClicked",
    "description":"[C++] bool ImGui::IsMouseClicked(int button, bool repeat=false)\n\n"
  },
  "imgui.igGetContentRegionMax":{
    "scope":"lua",
    "body":"imgui.GetContentRegionMax()",
    "prefix":"imgui.GetContentRegionMax",
    "description":"[C++] ImVec2 ImGui::GetContentRegionMax()\n\n"
  },
  "imgui.ImGuiWindowFlags_AlwaysAutoResize":{
    "scope":"lua",
    "body":"imgui.WindowFlags.AlwaysAutoResize",
    "prefix":"imgui.WindowFlags.AlwaysAutoResize",
    "description":"[C++] ImGuiWindowFlags_AlwaysAutoResize = 1 << 6\n\n"
  },
  "imgui.ImDrawListFlags_AntiAliasedLines":{
    "scope":"lua",
    "body":"imgui.DrawListFlags.AntiAliasedLines",
    "prefix":"imgui.DrawListFlags.AntiAliasedLines",
    "description":"[C++] ImDrawListFlags_AntiAliasedLines = 1 << 0\n\n"
  },
  "imgui.ImFont_CalcWordWrapPositionA":{
    "scope":"lua",
    "body":"ImFont:CalcWordWrapPositionA(${1:scale}, ${2:text}, ${3:text_end}, ${4:wrap_width})",
    "prefix":"ImFont:CalcWordWrapPositionA",
    "description":"[C++] const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width)\n\n"
  },
  "imgui.ImGuiStoragePair_ImGuiStoragePairInt":{
    "scope":"lua",
    "body":"imgui.ImGuiStoragePair.ImGuiStoragePairInt(${1:_key}, ${2:_val_i})",
    "prefix":"imgui.ImGuiStoragePair.ImGuiStoragePair",
    "description":"[C++] ImGuiStoragePair(ImGuiID _key, int _val_i)\n\n"
  },
  "imgui.ImFontAtlas_Clear":{
    "scope":"lua",
    "body":"ImFontAtlas:Clear()",
    "prefix":"ImFontAtlas:Clear",
    "description":"[C++] void ImFontAtlas::Clear()\n\n"
  },
  "imgui.ImVector_char__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_char:_grow_capacity(${1:sz})",
    "prefix":"ImVector_char:_grow_capacity",
    "description":"[C++] int ImVector_char::_grow_capacity(const ImVector_char* self, int sz)\n\n"
  },
  "imgui.igSliderScalar":{
    "scope":"lua",
    "body":"imgui.SliderScalar(${1:label}, ${2:data_type}, ${3:v}, ${4:v_min}, ${5:v_max}${6:[, format=((void*)0)]}${7:[, power=1.0f]})",
    "prefix":"imgui.SliderScalar",
    "description":"[C++] bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format=((void*)0), float power=1.0f)\n\n"
  },
  "imgui.ImDrawData":{
    "scope":"lua",
    "body":"new.ImDrawData($1)",
    "prefix":"new.ImDrawData",
    "description":"typedef struct ImDrawData ImDrawData\n\n"
  },
  "imgui.ImVector_ImFontConfig_swap":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:swap(${1:rhs})",
    "prefix":"ImVector_ImFontConfig:swap",
    "description":"[C++] void ImVector_ImFontConfig::swap(ImVector_ImFontConfig* self, ImVector_ImFontConfig rhs)\n\n"
  },
  "imgui.ImGuiInputTextFlags_Multiline":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.Multiline",
    "prefix":"imgui.InputTextFlags.Multiline",
    "description":"[C++] ImGuiInputTextFlags_Multiline = 1 << 20\n\n"
  },
  "imgui.ImGuiColorEditFlags__OptionsDefault":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags._OptionsDefault",
    "prefix":"imgui.ColorEditFlags._OptionsDefault",
    "description":"[C++] ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_DisplayRGB|ImGuiColorEditFlags_InputRGB|ImGuiColorEditFlags_PickerHueBar\n\n"
  },
  "imgui.ImGuiIO.MouseDownWasDoubleClick[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDownWasDoubleClick[5]",
    "prefix":"ImGuiIO.MouseDownWasDoubleClick[5]",
    "description":"[C++] bool ImGuiIO::MouseDownWasDoubleClick[5]\n\n"
  },
  "imgui.ImVector_char_ImVector_char":{
    "scope":"lua",
    "body":"imgui.ImVector_char()",
    "prefix":"imgui.ImVector_char",
    "description":"[C++] ImVector_char()\n\n"
  },
  "imgui.ImDrawListFlags":{
    "scope":"lua",
    "body":"new.ImDrawListFlags($1)",
    "prefix":"new.ImDrawListFlags",
    "description":"typedef int ImDrawListFlags\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:size_in_bytes()",
    "prefix":"ImVector_ImFontAtlasCustomRect:size_in_bytes",
    "description":"[C++] int ImVector_ImFontAtlasCustomRect::size_in_bytes(const ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImGuiCol_ScrollbarGrab":{
    "scope":"lua",
    "body":"imgui.Col.ScrollbarGrab",
    "prefix":"imgui.Col.ScrollbarGrab",
    "description":"[C++] ImGuiCol_ScrollbarGrab = 15\n\n"
  },
  "imgui.ImGuiTextRange_ImGuiTextRangeStr":{
    "scope":"lua",
    "body":"imgui.ImGuiTextRange.ImGuiTextRangeStr(${1:_b}, ${2:_e})",
    "prefix":"imgui.ImGuiTextRange.ImGuiTextRange",
    "description":"[C++] ImGuiTextRange(const char* _b, const char* _e)\n\n"
  },
  "imgui.ImGuiStyle.ButtonTextAlign":{
    "scope":"lua",
    "body":"ImGuiStyle.ButtonTextAlign",
    "prefix":"ImGuiStyle.ButtonTextAlign",
    "description":"[C++] ImVec2 ImGuiStyle::ButtonTextAlign\n\n"
  },
  "imgui.ImGuiColorEditFlags_InputRGB":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.InputRGB",
    "prefix":"imgui.ColorEditFlags.InputRGB",
    "description":"[C++] ImGuiColorEditFlags_InputRGB = 1 << 27\n\n"
  },
  "imgui.ImGuiMouseCursor_None":{
    "scope":"lua",
    "body":"imgui.MouseCursor.None",
    "prefix":"imgui.MouseCursor.None",
    "description":"[C++] ImGuiMouseCursor_None = -1\n\n"
  },
  "imgui.ImVector_ImFontPtr_front_const":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:front_const()",
    "prefix":"ImVector_ImFontPtr:front",
    "description":"[C++] ImFont* const * ImVector_ImFontPtr::front(const ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImVector_ImVec2_capacity":{
    "scope":"lua",
    "body":"ImVector_ImVec2:capacity()",
    "prefix":"ImVector_ImVec2:capacity",
    "description":"[C++] int ImVector_ImVec2::capacity(const ImVector_ImVec2* self)\n\n"
  },
  "imgui.ImGuiConfigFlags_NavEnableGamepad":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.NavEnableGamepad",
    "prefix":"imgui.ConfigFlags.NavEnableGamepad",
    "description":"[C++] ImGuiConfigFlags_NavEnableGamepad = 1 << 1\n\n"
  },
  "imgui.ImVector_ImWchar_push_back":{
    "scope":"lua",
    "body":"ImVector_ImWchar:push_back(${1:v})",
    "prefix":"ImVector_ImWchar:push_back",
    "description":"[C++] void ImVector_ImWchar::push_back(ImVector_ImWchar* self, const ImWchar v)\n\n"
  },
  "imgui.ImGuiNavInput_Menu":{
    "scope":"lua",
    "body":"imgui.NavInput.Menu",
    "prefix":"imgui.NavInput.Menu",
    "description":"[C++] ImGuiNavInput_Menu = 3\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_ImVector_ImFontAtlasCustomRectVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImFontAtlasCustomRect.ImVector_ImFontAtlasCustomRectVector(${1:src})",
    "prefix":"imgui.ImVector_ImFontAtlasCustomRect.ImVector_ImFontAtlasCustomRect",
    "description":"[C++] ImVector_ImFontAtlasCustomRect(const ImVector_ImFontAtlasCustomRect src)\n\n"
  },
  "imgui.igTreeNodeExStr":{
    "scope":"lua",
    "body":"imgui.TreeNodeExStr(${1:label}${2:[, flags=0]})",
    "prefix":"imgui.TreeNodeEx",
    "description":"[C++] bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImDrawVert_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImDrawVert:erase",
    "description":"[C++] ImDrawVert* ImVector_ImDrawVert::erase(ImVector_ImDrawVert* self, ImDrawVert const * it, ImDrawVert const * it_last)\n\n"
  },
  "imgui.ImVector_char_front_const":{
    "scope":"lua",
    "body":"ImVector_char:front_const()",
    "prefix":"ImVector_char:front",
    "description":"[C++] char const * ImVector_char::front(const ImVector_char* self)\n\n"
  },
  "imgui.ImFontConfig.GlyphExtraSpacing":{
    "scope":"lua",
    "body":"ImFontConfig.GlyphExtraSpacing",
    "prefix":"ImFontConfig.GlyphExtraSpacing",
    "description":"[C++] ImVec2 ImFontConfig::GlyphExtraSpacing\n\n"
  },
  "imgui.ImGuiWindowFlags_NoBringToFrontOnFocus":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoBringToFrontOnFocus",
    "prefix":"imgui.WindowFlags.NoBringToFrontOnFocus",
    "description":"[C++] ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13\n\n"
  },
  "imgui.ImGuiNavInput_FocusPrev":{
    "scope":"lua",
    "body":"imgui.NavInput.FocusPrev",
    "prefix":"imgui.NavInput.FocusPrev",
    "description":"[C++] ImGuiNavInput_FocusPrev = 12\n\n"
  },
  "imgui.ImGuiIO.NavInputsDownDuration[ImGuiNavInput_COUNT]":{
    "scope":"lua",
    "body":"ImGuiIO.NavInputsDownDuration[ImGuiNavInput_COUNT]",
    "prefix":"ImGuiIO.NavInputsDownDuration[ImGuiNavInput_COUNT]",
    "description":"[C++] float ImGuiIO::NavInputsDownDuration[ImGuiNavInput_COUNT]\n\n"
  },
  "imgui.ImDrawList_AddTextFontPtr":{
    "scope":"lua",
    "body":"ImDrawList:AddTextFontPtr(${1:font}, ${2:font_size}, ${3:pos}, ${4:col}, ${5:text_begin}${6:[, text_end=((void*)0)]}${7:[, wrap_width=0.0f]}${8:[, cpu_fine_clip_rect=((void*)0)]})",
    "prefix":"ImDrawList:AddText",
    "description":"[C++] void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end=((void*)0), float wrap_width=0.0f, const ImVec4* cpu_fine_clip_rect=((void*)0))\n\n"
  },
  "imgui.ImVector_ImVec2_empty":{
    "scope":"lua",
    "body":"ImVector_ImVec2:empty()",
    "prefix":"ImVector_ImVec2:empty",
    "description":"[C++] bool ImVector_ImVec2::empty(const ImVector_ImVec2* self)\n\n"
  },
  "imgui.ImGuiFocusedFlags_None":{
    "scope":"lua",
    "body":"imgui.FocusedFlags.None",
    "prefix":"imgui.FocusedFlags.None",
    "description":"[C++] ImGuiFocusedFlags_None = 0\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder_AddChar":{
    "scope":"lua",
    "body":"ImFontGlyphRangesBuilder:AddChar(${1:c})",
    "prefix":"ImFontGlyphRangesBuilder:AddChar",
    "description":"[C++] void ImFontGlyphRangesBuilder::AddChar(ImWchar c)\n\n"
  },
  "imgui.igShowStyleSelector":{
    "scope":"lua",
    "body":"imgui.ShowStyleSelector(${1:label})",
    "prefix":"imgui.ShowStyleSelector",
    "description":"[C++] bool ImGui::ShowStyleSelector(const char* label)\n\n"
  },
  "imgui.igIsWindowAppearing":{
    "scope":"lua",
    "body":"imgui.IsWindowAppearing()",
    "prefix":"imgui.IsWindowAppearing",
    "description":"[C++] bool ImGui::IsWindowAppearing()\n\n"
  },
  "imgui.ImVector_ImVec2_erase":{
    "scope":"lua",
    "body":"ImVector_ImVec2:erase(${1:it})",
    "prefix":"ImVector_ImVec2:erase",
    "description":"[C++] ImVec2* ImVector_ImVec2::erase(ImVector_ImVec2* self, ImVec2 const * it)\n\n"
  },
  "imgui.igSetWindowCollapsedBool":{
    "scope":"lua",
    "body":"imgui.SetWindowCollapsedBool(${1:collapsed}${2:[, cond=0]})",
    "prefix":"imgui.SetWindowCollapsed",
    "description":"[C++] void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond=0)\n\n"
  },
  "imgui.igListBoxHeaderInt":{
    "scope":"lua",
    "body":"imgui.ListBoxHeaderInt(${1:label}, ${2:items_count}${3:[, height_in_items=-1]})",
    "prefix":"imgui.ListBoxHeader",
    "description":"[C++] bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items=-1)\n\n"
  },
  "imgui.ImGuiPayload.DataFrameCount":{
    "scope":"lua",
    "body":"ImGuiPayload.DataFrameCount",
    "prefix":"ImGuiPayload.DataFrameCount",
    "description":"[C++] int ImGuiPayload::DataFrameCount\n\n"
  },
  "imgui.ImGuiCol_PlotHistogramHovered":{
    "scope":"lua",
    "body":"imgui.Col.PlotHistogramHovered",
    "prefix":"imgui.Col.PlotHistogramHovered",
    "description":"[C++] ImGuiCol_PlotHistogramHovered = 41\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_OpenOnArrow":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.OpenOnArrow",
    "prefix":"imgui.TreeNodeFlags.OpenOnArrow",
    "description":"[C++] ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7\n\n"
  },
  "imgui.igUnindent":{
    "scope":"lua",
    "body":"imgui.Unindent(${1:[indent_w=0.0f]})",
    "prefix":"imgui.Unindent",
    "description":"[C++] void ImGui::Unindent(float indent_w=0.0f)\n\n"
  },
  "imgui.igColorPicker3":{
    "scope":"lua",
    "body":"imgui.ColorPicker3(${1:label}, ${2:col}${3:[, flags=0]})",
    "prefix":"imgui.ColorPicker3",
    "description":"[C++] bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags=0)\n\n"
  },
  "imgui.ImGuiListClipper_Step":{
    "scope":"lua",
    "body":"ImGuiListClipper:Step()",
    "prefix":"ImGuiListClipper:Step",
    "description":"[C++] bool ImGuiListClipper::Step()\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_push_back":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:push_back(${1:v})",
    "prefix":"ImVector_ImGuiStoragePair:push_back",
    "description":"[C++] void ImVector_ImGuiStoragePair::push_back(ImVector_ImGuiStoragePair* self, const ImGuiStoragePair v)\n\n"
  },
  "imgui.ImVector_ImWchar_clear":{
    "scope":"lua",
    "body":"ImVector_ImWchar:clear()",
    "prefix":"ImVector_ImWchar:clear",
    "description":"[C++] void ImVector_ImWchar::clear(ImVector_ImWchar* self)\n\n"
  },
  "imgui.igBulletTextV":{
    "scope":"lua",
    "body":"imgui.BulletTextV(${1:fmt}, ${2:args})",
    "prefix":"imgui.BulletTextV",
    "description":"[C++] void ImGui::BulletTextV(const char* fmt, va_list args)\n\n"
  },
  "imgui.ImVector_ImVec2_front":{
    "scope":"lua",
    "body":"ImVector_ImVec2:front()",
    "prefix":"ImVector_ImVec2:front",
    "description":"[C++] ImVec2* ImVector_ImVec2::front(ImVector_ImVec2* self)\n\n"
  },
  "imgui.ImGuiKey_KeyPadEnter":{
    "scope":"lua",
    "body":"imgui.Key.KeyPadEnter",
    "prefix":"imgui.Key.KeyPadEnter",
    "description":"[C++] ImGuiKey_KeyPadEnter = 15\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_erase":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:erase(${1:it})",
    "prefix":"ImVector_ImFontAtlasCustomRect:erase",
    "description":"[C++] ImFontAtlasCustomRect* ImVector_ImFontAtlasCustomRect::erase(ImVector_ImFontAtlasCustomRect* self, ImFontAtlasCustomRect const * it)\n\n"
  },
  "imgui.ImGuiColorEditFlags_InputHSV":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.InputHSV",
    "prefix":"imgui.ColorEditFlags.InputHSV",
    "description":"[C++] ImGuiColorEditFlags_InputHSV = 1 << 28\n\n"
  },
  "imgui.ImGuiBackendFlags_RendererHasVtxOffset":{
    "scope":"lua",
    "body":"imgui.BackendFlags.RendererHasVtxOffset",
    "prefix":"imgui.BackendFlags.RendererHasVtxOffset",
    "description":"[C++] ImGuiBackendFlags_RendererHasVtxOffset = 1 << 3\n\n"
  },
  "imgui.igInputScalar":{
    "scope":"lua",
    "body":"imgui.InputScalar(${1:label}, ${2:data_type}, ${3:v}${4:[, step=((void*)0)]}${5:[, step_fast=((void*)0)]}${6:[, format=((void*)0)]}${7:[, flags=0]})",
    "prefix":"imgui.InputScalar",
    "description":"[C++] bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* v, const void* step=((void*)0), const void* step_fast=((void*)0), const char* format=((void*)0), ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.ImFontAtlasCustomRect.Width":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect.Width",
    "prefix":"ImFontAtlasCustomRect.Width",
    "description":"[C++] unsigned short ImFontAtlasCustomRect::Width\n\n"
  },
  "imgui.ImGuiSelectableFlags_SpanAllColumns":{
    "scope":"lua",
    "body":"imgui.SelectableFlags.SpanAllColumns",
    "prefix":"imgui.SelectableFlags.SpanAllColumns",
    "description":"[C++] ImGuiSelectableFlags_SpanAllColumns = 1 << 1\n\n"
  },
  "imgui.ImVector_ImFontPtr_back_const":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:back_const()",
    "prefix":"ImVector_ImFontPtr:back",
    "description":"[C++] ImFont* const * ImVector_ImFontPtr::back(const ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImVec4.y":{
    "scope":"lua",
    "body":"ImVec4.y",
    "prefix":"ImVec4.y",
    "description":"[C++] float ImVec4::y\n\n"
  },
  "imgui.ImGuiIO.KeyMap[ImGuiKey_COUNT]":{
    "scope":"lua",
    "body":"ImGuiIO.KeyMap[ImGuiKey_COUNT]",
    "prefix":"ImGuiIO.KeyMap[ImGuiKey_COUNT]",
    "description":"[C++] int ImGuiIO::KeyMap[ImGuiKey_COUNT]\n\n"
  },
  "imgui.ImVector_ImVec4_reserve":{
    "scope":"lua",
    "body":"ImVector_ImVec4:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImVec4:reserve",
    "description":"[C++] void ImVector_ImVec4::reserve(ImVector_ImVec4* self, int new_capacity)\n\n"
  },
  "imgui.ImGuiCol_Border":{
    "scope":"lua",
    "body":"imgui.Col.Border",
    "prefix":"imgui.Col.Border",
    "description":"[C++] ImGuiCol_Border = 5\n\n"
  },
  "imgui.ImVector_ImFontPtr_reserve":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImFontPtr:reserve",
    "description":"[C++] void ImVector_ImFontPtr::reserve(ImVector_ImFontPtr* self, int new_capacity)\n\n"
  },
  "imgui.ImVector_ImU32_back_const":{
    "scope":"lua",
    "body":"ImVector_ImU32:back_const()",
    "prefix":"ImVector_ImU32:back",
    "description":"[C++] ImU32 const * ImVector_ImU32::back(const ImVector_ImU32* self)\n\n"
  },
  "imgui.ImGuiListClipper.StepNo":{
    "scope":"lua",
    "body":"ImGuiListClipper.StepNo",
    "prefix":"ImGuiListClipper.StepNo",
    "description":"[C++] int ImGuiListClipper::StepNo\n\n"
  },
  "imgui.ImGuiCol_PlotLinesHovered":{
    "scope":"lua",
    "body":"imgui.Col.PlotLinesHovered",
    "prefix":"imgui.Col.PlotLinesHovered",
    "description":"[C++] ImGuiCol_PlotLinesHovered = 39\n\n"
  },
  "imgui.igDragInt4":{
    "scope":"lua",
    "body":"imgui.DragInt4(${1:label}, ${2:v}${3:[, v_speed=1.0f]}${4:[, v_min=0]}${5:[, v_max=0]}${6:[, format=\"%d\"]})",
    "prefix":"imgui.DragInt4",
    "description":"[C++] bool ImGui::DragInt4(const char* label, int v[4], float v_speed=1.0f, int v_min=0, int v_max=0, const char* format=\"%d\")\n\n"
  },
  "imgui.ImGuiNavInput":{
    "scope":"lua",
    "body":"new.ImGuiNavInput($1)",
    "prefix":"new.ImGuiNavInput",
    "description":"typedef int ImGuiNavInput\n\n"
  },
  "imgui.ImGuiCol_NavHighlight":{
    "scope":"lua",
    "body":"imgui.Col.NavHighlight",
    "prefix":"imgui.Col.NavHighlight",
    "description":"[C++] ImGuiCol_NavHighlight = 44\n\n"
  },
  "imgui.ImGuiCol_NavWindowingDimBg":{
    "scope":"lua",
    "body":"imgui.Col.NavWindowingDimBg",
    "prefix":"imgui.Col.NavWindowingDimBg",
    "description":"[C++] ImGuiCol_NavWindowingDimBg = 46\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_clear":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:clear()",
    "prefix":"ImVector_ImGuiTextRange:clear",
    "description":"[C++] void ImVector_ImGuiTextRange::clear(ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.igShowDemoWindow":{
    "scope":"lua",
    "body":"imgui.ShowDemoWindow(${1:[p_open=((void*)0)]})",
    "prefix":"imgui.ShowDemoWindow",
    "description":"[C++] void ImGui::ShowDemoWindow(bool* p_open=((void*)0))\n\n"
  },
  "imgui.ImGuiBackendFlags_HasMouseCursors":{
    "scope":"lua",
    "body":"imgui.BackendFlags.HasMouseCursors",
    "prefix":"imgui.BackendFlags.HasMouseCursors",
    "description":"[C++] ImGuiBackendFlags_HasMouseCursors = 1 << 1\n\n"
  },
  "imgui.ImVector_ImDrawChannel_front_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:front_const()",
    "prefix":"ImVector_ImDrawChannel:front",
    "description":"[C++] ImDrawChannel const * ImVector_ImDrawChannel::front(const ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:size_in_bytes()",
    "prefix":"ImVector_ImGuiStoragePair:size_in_bytes",
    "description":"[C++] int ImVector_ImGuiStoragePair::size_in_bytes(const ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImVector_ImFontPtr_end":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:_end()",
    "prefix":"ImVector_ImFontPtr:end",
    "description":"[C++] ImFont** ImVector_ImFontPtr::end(ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImVector_ImWchar_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImWchar:size_in_bytes()",
    "prefix":"ImVector_ImWchar:size_in_bytes",
    "description":"[C++] int ImVector_ImWchar::size_in_bytes(const ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImFontAtlasFlags_NoMouseCursors":{
    "scope":"lua",
    "body":"imgui.FontAtlasFlags.NoMouseCursors",
    "prefix":"imgui.FontAtlasFlags.NoMouseCursors",
    "description":"[C++] ImFontAtlasFlags_NoMouseCursors = 1 << 1\n\n"
  },
  "imgui.IsInitialized":{
    "scope":"lua",
    "body":"imgui.IsInitialized()",
    "prefix":"imgui.IsInitialized",
    "description":"[mimgui function]\n\nReturns: bool status\n\n"
  },
  "imgui.ImGuiWindowFlags_NoSavedSettings":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoSavedSettings",
    "prefix":"imgui.WindowFlags.NoSavedSettings",
    "description":"[C++] ImGuiWindowFlags_NoSavedSettings = 1 << 8\n\n"
  },
  "imgui.ImVector_ImFontPtr_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImFontPtr:erase_unsorted",
    "description":"[C++] ImFont** ImVector_ImFontPtr::erase_unsorted(ImVector_ImFontPtr* self, ImFont* const * it)\n\n"
  },
  "imgui.ImVector_ImVec4_end":{
    "scope":"lua",
    "body":"ImVector_ImVec4:_end()",
    "prefix":"ImVector_ImVec4:end",
    "description":"[C++] ImVec4* ImVector_ImVec4::end(ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImGuiStorage_GetFloatRef":{
    "scope":"lua",
    "body":"ImGuiStorage:GetFloatRef(${1:key}${2:[, default_val=0.0f]})",
    "prefix":"ImGuiStorage:GetFloatRef",
    "description":"[C++] float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val=0.0f)\n\n"
  },
  "imgui.ImGuiStyle":{
    "scope":"lua",
    "body":"new.ImGuiStyle($1)",
    "prefix":"new.ImGuiStyle",
    "description":"typedef struct ImGuiStyle ImGuiStyle\n\n"
  },
  "imgui.ImDrawList_PrimVtx":{
    "scope":"lua",
    "body":"ImDrawList:PrimVtx(${1:pos}, ${2:uv}, ${3:col})",
    "prefix":"ImDrawList:PrimVtx",
    "description":"[C++] void ImDrawList::PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)\n\n"
  },
  "imgui.ImFontConfig.FontDataSize":{
    "scope":"lua",
    "body":"ImFontConfig.FontDataSize",
    "prefix":"ImFontConfig.FontDataSize",
    "description":"[C++] int ImFontConfig::FontDataSize\n\n"
  },
  "imgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton":{
    "scope":"lua",
    "body":"imgui.TabItemFlags.NoCloseWithMiddleMouseButton",
    "prefix":"imgui.TabItemFlags.NoCloseWithMiddleMouseButton",
    "description":"[C++] ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1 << 2\n\n"
  },
  "imgui.ImVector_char_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_char:erase_unsorted(${1:it})",
    "prefix":"ImVector_char:erase_unsorted",
    "description":"[C++] char* ImVector_char::erase_unsorted(ImVector_char* self, char const * it)\n\n"
  },
  "imgui.ImDrawList_ClearFreeMemory":{
    "scope":"lua",
    "body":"ImDrawList:ClearFreeMemory()",
    "prefix":"ImDrawList:ClearFreeMemory",
    "description":"[C++] void ImDrawList::ClearFreeMemory()\n\n"
  },
  "imgui.ImVector_ImTextureID__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImTextureID:_grow_capacity",
    "description":"[C++] int ImVector_ImTextureID::_grow_capacity(const ImVector_ImTextureID* self, int sz)\n\n"
  },
  "imgui.ImVector_ImFontConfig_size":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:size()",
    "prefix":"ImVector_ImFontConfig:size",
    "description":"[C++] int ImVector_ImFontConfig::size(const ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImVector_ImU32_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImU32:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImU32:resize",
    "description":"[C++] void ImVector_ImU32::resize(ImVector_ImU32* self, int new_size, const ImU32 v)\n\n"
  },
  "imgui.ImFont.FontSize":{
    "scope":"lua",
    "body":"ImFont.FontSize",
    "prefix":"ImFont.FontSize",
    "description":"[C++] float ImFont::FontSize\n\n"
  },
  "imgui.ImVector_ImWchar_push_front":{
    "scope":"lua",
    "body":"ImVector_ImWchar:push_front(${1:v})",
    "prefix":"ImVector_ImWchar:push_front",
    "description":"[C++] void ImVector_ImWchar::push_front(ImVector_ImWchar* self, const ImWchar v)\n\n"
  },
  "imgui.ImVector_ImU32_clear":{
    "scope":"lua",
    "body":"ImVector_ImU32:clear()",
    "prefix":"ImVector_ImU32:clear",
    "description":"[C++] void ImVector_ImU32::clear(ImVector_ImU32* self)\n\n"
  },
  "imgui.ImVector_ImTextureID_ImVector_ImTextureID":{
    "scope":"lua",
    "body":"imgui.ImVector_ImTextureID()",
    "prefix":"imgui.ImVector_ImTextureID",
    "description":"[C++] ImVector_ImTextureID()\n\n"
  },
  "imgui.igDragInt":{
    "scope":"lua",
    "body":"imgui.DragInt(${1:label}, ${2:v}${3:[, v_speed=1.0f]}${4:[, v_min=0]}${5:[, v_max=0]}${6:[, format=\"%d\"]})",
    "prefix":"imgui.DragInt",
    "description":"[C++] bool ImGui::DragInt(const char* label, int* v, float v_speed=1.0f, int v_min=0, int v_max=0, const char* format=\"%d\")\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_capacity":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:capacity()",
    "prefix":"ImVector_ImGuiStoragePair:capacity",
    "description":"[C++] int ImVector_ImGuiStoragePair::capacity(const ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.igTextColored":{
    "scope":"lua",
    "body":"imgui.TextColored(${1:col}, ${2:fmt},...)",
    "prefix":"imgui.TextColored",
    "description":"[C++] void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)\n\n"
  },
  "imgui.igSliderFloat2":{
    "scope":"lua",
    "body":"imgui.SliderFloat2(${1:label}, ${2:v}, ${3:v_min}, ${4:v_max}${5:[, format=\"%.3f\"]}${6:[, power=1.0f]})",
    "prefix":"imgui.SliderFloat2",
    "description":"[C++] bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.igValueBool":{
    "scope":"lua",
    "body":"imgui.ValueBool(${1:prefix}, ${2:b})",
    "prefix":"imgui.Value",
    "description":"[C++] void ImGui::Value(const char* prefix, bool b)\n\n"
  },
  "imgui.ImGuiInputTextFlags_NoUndoRedo":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.NoUndoRedo",
    "prefix":"imgui.InputTextFlags.NoUndoRedo",
    "description":"[C++] ImGuiInputTextFlags_NoUndoRedo = 1 << 16\n\n"
  },
  "imgui.igCalcListClipping":{
    "scope":"lua",
    "body":"imgui.CalcListClipping(${1:items_count}, ${2:items_height}, ${3:out_items_display_start}, ${4:out_items_display_end})",
    "prefix":"imgui.CalcListClipping",
    "description":"[C++] void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)\n\n"
  },
  "imgui.ImGuiWindowFlags_Modal":{
    "scope":"lua",
    "body":"imgui.WindowFlags.Modal",
    "prefix":"imgui.WindowFlags.Modal",
    "description":"[C++] ImGuiWindowFlags_Modal = 1 << 27\n\n"
  },
  "imgui.ImVector_char_insert":{
    "scope":"lua",
    "body":"ImVector_char:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_char:insert",
    "description":"[C++] char* ImVector_char::insert(ImVector_char* self, char const * it, const char v)\n\n"
  },
  "imgui.ImDrawCmd.ElemCount":{
    "scope":"lua",
    "body":"ImDrawCmd.ElemCount",
    "prefix":"ImDrawCmd.ElemCount",
    "description":"[C++] unsigned int ImDrawCmd::ElemCount\n\n"
  },
  "imgui.ImVector_ImDrawChannel_capacity":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:capacity()",
    "prefix":"ImVector_ImDrawChannel:capacity",
    "description":"[C++] int ImVector_ImDrawChannel::capacity(const ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.igGetWindowSize":{
    "scope":"lua",
    "body":"imgui.GetWindowSize()",
    "prefix":"imgui.GetWindowSize",
    "description":"[C++] ImVec2 ImGui::GetWindowSize()\n\n"
  },
  "imgui.ImFont_GetDebugName":{
    "scope":"lua",
    "body":"ImFont:GetDebugName()",
    "prefix":"ImFont:GetDebugName",
    "description":"[C++] const char* ImFont::GetDebugName()\n\n"
  },
  "imgui.igCollapsingHeaderBoolPtr":{
    "scope":"lua",
    "body":"imgui.CollapsingHeaderBoolPtr(${1:label}, ${2:p_open}${3:[, flags=0]})",
    "prefix":"imgui.CollapsingHeader",
    "description":"[C++] bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_empty":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:empty()",
    "prefix":"ImVector_ImFontGlyph:empty",
    "description":"[C++] bool ImVector_ImFontGlyph::empty(const ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImDrawList_PathFillConvex":{
    "scope":"lua",
    "body":"ImDrawList:PathFillConvex(${1:col})",
    "prefix":"ImDrawList:PathFillConvex",
    "description":"[C++] void ImDrawList::PathFillConvex(ImU32 col)\n\n"
  },
  "imgui.ImGuiCol_ChildBg":{
    "scope":"lua",
    "body":"imgui.Col.ChildBg",
    "prefix":"imgui.Col.ChildBg",
    "description":"[C++] ImGuiCol_ChildBg = 3\n\n"
  },
  "imgui.ImFont":{
    "scope":"lua",
    "body":"new.ImFont($1)",
    "prefix":"new.ImFont",
    "description":"typedef struct ImFont ImFont\n\n"
  },
  "imgui.igTreePushPtr":{
    "scope":"lua",
    "body":"imgui.TreePushPtr(${1:[ptr_id=((void*)0)]})",
    "prefix":"imgui.TreePush",
    "description":"[C++] void ImGui::TreePush(const void* ptr_id=((void*)0))\n\n"
  },
  "imgui.ImVector_ImFontGlyph_size":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:size()",
    "prefix":"ImVector_ImFontGlyph:size",
    "description":"[C++] int ImVector_ImFontGlyph::size(const ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.igMemAlloc":{
    "scope":"lua",
    "body":"imgui.MemAlloc(${1:size})",
    "prefix":"imgui.MemAlloc",
    "description":"[C++] void* ImGui::MemAlloc(size_t size)\n\n"
  },
  "imgui.ImGuiCol_ScrollbarBg":{
    "scope":"lua",
    "body":"imgui.Col.ScrollbarBg",
    "prefix":"imgui.Col.ScrollbarBg",
    "description":"[C++] ImGuiCol_ScrollbarBg = 14\n\n"
  },
  "imgui.ImVector_char_front":{
    "scope":"lua",
    "body":"ImVector_char:front()",
    "prefix":"ImVector_char:front",
    "description":"[C++] char* ImVector_char::front(ImVector_char* self)\n\n"
  },
  "imgui.igResetMouseDragDelta":{
    "scope":"lua",
    "body":"imgui.ResetMouseDragDelta(${1:[button=0]})",
    "prefix":"imgui.ResetMouseDragDelta",
    "description":"[C++] void ImGui::ResetMouseDragDelta(int button=0)\n\n"
  },
  "imgui.ImVector_ImDrawVert_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:size_in_bytes()",
    "prefix":"ImVector_ImDrawVert:size_in_bytes",
    "description":"[C++] int ImVector_ImDrawVert::size_in_bytes(const ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.igEndPopup":{
    "scope":"lua",
    "body":"imgui.EndPopup()",
    "prefix":"imgui.EndPopup",
    "description":"[C++] void ImGui::EndPopup()\n\n"
  },
  "imgui.ImVector_ImFontConfig_push_front":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:push_front(${1:v})",
    "prefix":"ImVector_ImFontConfig:push_front",
    "description":"[C++] void ImVector_ImFontConfig::push_front(ImVector_ImFontConfig* self, const ImFontConfig v)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_front_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:front_const()",
    "prefix":"ImVector_ImDrawCmd:front",
    "description":"[C++] ImDrawCmd const * ImVector_ImDrawCmd::front(const ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImGuiStyleVar_ChildBorderSize":{
    "scope":"lua",
    "body":"imgui.StyleVar.ChildBorderSize",
    "prefix":"imgui.StyleVar.ChildBorderSize",
    "description":"[C++] ImGuiStyleVar_ChildBorderSize = 7\n\n"
  },
  "imgui.igSpacing":{
    "scope":"lua",
    "body":"imgui.Spacing()",
    "prefix":"imgui.Spacing",
    "description":"[C++] void ImGui::Spacing()\n\n"
  },
  "imgui.ImVector_ImFontPtr__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImFontPtr:_grow_capacity",
    "description":"[C++] int ImVector_ImFontPtr::_grow_capacity(const ImVector_ImFontPtr* self, int sz)\n\n"
  },
  "imgui.ImVector_ImVec4_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImVec4:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImVec4:erase",
    "description":"[C++] ImVec4* ImVector_ImVec4::erase(ImVector_ImVec4* self, ImVec4 const * it, ImVec4 const * it_last)\n\n"
  },
  "imgui.igPushStyleColorU32":{
    "scope":"lua",
    "body":"imgui.PushStyleColorU32(${1:idx}, ${2:col})",
    "prefix":"imgui.PushStyleColor",
    "description":"[C++] void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:pop_back()",
    "prefix":"ImVector_ImFontAtlasCustomRect:pop_back",
    "description":"[C++] void ImVector_ImFontAtlasCustomRect::pop_back(ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImGuiCol_SeparatorHovered":{
    "scope":"lua",
    "body":"imgui.Col.SeparatorHovered",
    "prefix":"imgui.Col.SeparatorHovered",
    "description":"[C++] ImGuiCol_SeparatorHovered = 28\n\n"
  },
  "imgui.igSetCursorScreenPos":{
    "scope":"lua",
    "body":"imgui.SetCursorScreenPos(${1:pos})",
    "prefix":"imgui.SetCursorScreenPos",
    "description":"[C++] void ImGui::SetCursorScreenPos(const ImVec2& pos)\n\n"
  },
  "imgui.ImVector_ImVec2_ImVector_ImVec2":{
    "scope":"lua",
    "body":"imgui.ImVector_ImVec2()",
    "prefix":"imgui.ImVector_ImVec2",
    "description":"[C++] ImVector_ImVec2()\n\n"
  },
  "imgui.igGetScrollMaxX":{
    "scope":"lua",
    "body":"imgui.GetScrollMaxX()",
    "prefix":"imgui.GetScrollMaxX",
    "description":"[C++] float ImGui::GetScrollMaxX()\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_capacity":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:capacity()",
    "prefix":"ImVector_ImGuiTextRange:capacity",
    "description":"[C++] int ImVector_ImGuiTextRange::capacity(const ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImGuiSelectableFlags_None":{
    "scope":"lua",
    "body":"imgui.SelectableFlags.None",
    "prefix":"imgui.SelectableFlags.None",
    "description":"[C++] ImGuiSelectableFlags_None = 0\n\n"
  },
  "imgui.ImGuiTabBarFlags_FittingPolicyMask_":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.FittingPolicyMask_",
    "prefix":"imgui.TabBarFlags.FittingPolicyMask_",
    "description":"[C++] ImGuiTabBarFlags_FittingPolicyMask_ = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll\n\n"
  },
  "imgui.ImGuiComboFlags_None":{
    "scope":"lua",
    "body":"imgui.ComboFlags.None",
    "prefix":"imgui.ComboFlags.None",
    "description":"[C++] ImGuiComboFlags_None = 0\n\n"
  },
  "imgui.igGetStyleColorVec4":{
    "scope":"lua",
    "body":"imgui.GetStyleColorVec4(${1:idx})",
    "prefix":"imgui.GetStyleColorVec4",
    "description":"[C++] const ImVec4* ImGui::GetStyleColorVec4(ImGuiCol idx)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImDrawChannel:erase",
    "description":"[C++] ImDrawChannel* ImVector_ImDrawChannel::erase(ImVector_ImDrawChannel* self, ImDrawChannel const * it, ImDrawChannel const * it_last)\n\n"
  },
  "imgui.ImGuiKey_PageDown":{
    "scope":"lua",
    "body":"imgui.Key.PageDown",
    "prefix":"imgui.Key.PageDown",
    "description":"[C++] ImGuiKey_PageDown = 6\n\n"
  },
  "imgui.igGetCurrentContext":{
    "scope":"lua",
    "body":"imgui.GetCurrentContext()",
    "prefix":"imgui.GetCurrentContext",
    "description":"[C++] ImGuiContext* ImGui::GetCurrentContext()\n\n"
  },
  "imgui.igGetMousePosOnOpeningCurrentPopup":{
    "scope":"lua",
    "body":"imgui.GetMousePosOnOpeningCurrentPopup()",
    "prefix":"imgui.GetMousePosOnOpeningCurrentPopup",
    "description":"[C++] ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()\n\n"
  },
  "imgui.ImGuiStyle.WindowMenuButtonPosition":{
    "scope":"lua",
    "body":"ImGuiStyle.WindowMenuButtonPosition",
    "prefix":"ImGuiStyle.WindowMenuButtonPosition",
    "description":"[C++] ImGuiDir ImGuiStyle::WindowMenuButtonPosition\n\n"
  },
  "imgui.igIsWindowFocused":{
    "scope":"lua",
    "body":"imgui.IsWindowFocused(${1:[flags=0]})",
    "prefix":"imgui.IsWindowFocused",
    "description":"[C++] bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_push_front":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:push_front(${1:v})",
    "prefix":"ImVector_ImFontAtlasCustomRect:push_front",
    "description":"[C++] void ImVector_ImFontAtlasCustomRect::push_front(ImVector_ImFontAtlasCustomRect* self, const ImFontAtlasCustomRect v)\n\n"
  },
  "imgui.igGetDrawData":{
    "scope":"lua",
    "body":"imgui.GetDrawData()",
    "prefix":"imgui.GetDrawData",
    "description":"[C++] ImDrawData* ImGui::GetDrawData()\n\n"
  },
  "imgui.igGetColumnIndex":{
    "scope":"lua",
    "body":"imgui.GetColumnIndex()",
    "prefix":"imgui.GetColumnIndex",
    "description":"[C++] int ImGui::GetColumnIndex()\n\n"
  },
  "imgui.ImVector_ImDrawVert_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImDrawVert:resize",
    "description":"[C++] void ImVector_ImDrawVert::resize(ImVector_ImDrawVert* self, int new_size, const ImDrawVert v)\n\n"
  },
  "imgui.ImVector_ImDrawVert_swap":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:swap(${1:rhs})",
    "prefix":"ImVector_ImDrawVert:swap",
    "description":"[C++] void ImVector_ImDrawVert::swap(ImVector_ImDrawVert* self, ImVector_ImDrawVert rhs)\n\n"
  },
  "imgui.ImFont_FindGlyph":{
    "scope":"lua",
    "body":"ImFont:FindGlyph(${1:c})",
    "prefix":"ImFont:FindGlyph",
    "description":"[C++] const ImFontGlyph* ImFont::FindGlyph(ImWchar c)\n\n"
  },
  "imgui.igDragFloatRange2":{
    "scope":"lua",
    "body":"imgui.DragFloatRange2(${1:label}, ${2:v_current_min}, ${3:v_current_max}${4:[, v_speed=1.0f]}${5:[, v_min=0.0f]}${6:[, v_max=0.0f]}${7:[, format=\"%.3f\"]}${8:[, format_max=((void*)0)]}${9:[, power=1.0f]})",
    "prefix":"imgui.DragFloatRange2",
    "description":"[C++] bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed=1.0f, float v_min=0.0f, float v_max=0.0f, const char* format=\"%.3f\", const char* format_max=((void*)0), float power=1.0f)\n\n"
  },
  "imgui.igCloseCurrentPopup":{
    "scope":"lua",
    "body":"imgui.CloseCurrentPopup()",
    "prefix":"imgui.CloseCurrentPopup",
    "description":"[C++] void ImGui::CloseCurrentPopup()\n\n"
  },
  "imgui.ImFont_AddGlyph":{
    "scope":"lua",
    "body":"ImFont:AddGlyph(${1:c}, ${2:x0}, ${3:y0}, ${4:x1}, ${5:y1}, ${6:u0}, ${7:v0}, ${8:u1}, ${9:v1}, ${10:advance_x})",
    "prefix":"ImFont:AddGlyph",
    "description":"[C++] void ImFont::AddGlyph(ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)\n\n"
  },
  "imgui.ImFontConfig.GlyphOffset":{
    "scope":"lua",
    "body":"ImFontConfig.GlyphOffset",
    "prefix":"ImFontConfig.GlyphOffset",
    "description":"[C++] ImVec2 ImFontConfig::GlyphOffset\n\n"
  },
  "imgui.ImVector_ImU32_ImVector_ImU32Vector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImU32.ImVector_ImU32Vector(${1:src})",
    "prefix":"imgui.ImVector_ImU32.ImVector_ImU32",
    "description":"[C++] ImVector_ImU32(const ImVector_ImU32 src)\n\n"
  },
  "imgui.igGetWindowContentRegionWidth":{
    "scope":"lua",
    "body":"imgui.GetWindowContentRegionWidth()",
    "prefix":"imgui.GetWindowContentRegionWidth",
    "description":"[C++] float ImGui::GetWindowContentRegionWidth()\n\n"
  },
  "imgui.ImGuiIO.MouseClicked[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseClicked[5]",
    "prefix":"ImGuiIO.MouseClicked[5]",
    "description":"[C++] bool ImGuiIO::MouseClicked[5]\n\n"
  },
  "imgui.ImGuiCol_ButtonActive":{
    "scope":"lua",
    "body":"imgui.Col.ButtonActive",
    "prefix":"imgui.Col.ButtonActive",
    "description":"[C++] ImGuiCol_ButtonActive = 23\n\n"
  },
  "imgui.ImGuiComboFlags_HeightRegular":{
    "scope":"lua",
    "body":"imgui.ComboFlags.HeightRegular",
    "prefix":"imgui.ComboFlags.HeightRegular",
    "description":"[C++] ImGuiComboFlags_HeightRegular = 1 << 2\n\n"
  },
  "imgui.ImGuiTabBarFlags_NoTabListScrollingButtons":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.NoTabListScrollingButtons",
    "prefix":"imgui.TabBarFlags.NoTabListScrollingButtons",
    "description":"[C++] ImGuiTabBarFlags_NoTabListScrollingButtons = 1 << 4\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.EventKey":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.EventKey",
    "prefix":"ImGuiInputTextCallbackData.EventKey",
    "description":"[C++] ImGuiKey ImGuiInputTextCallbackData::EventKey\n\n"
  },
  "imgui.igPushAllowKeyboardFocus":{
    "scope":"lua",
    "body":"imgui.PushAllowKeyboardFocus(${1:allow_keyboard_focus})",
    "prefix":"imgui.PushAllowKeyboardFocus",
    "description":"[C++] void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder":{
    "scope":"lua",
    "body":"imgui.ImFontGlyphRangesBuilder()",
    "prefix":"imgui.ImFontGlyphRangesBuilder",
    "description":"[C++] ImFontGlyphRangesBuilder()\n\n"
  },
  "imgui.ImGuiPayload_IsDelivery":{
    "scope":"lua",
    "body":"ImGuiPayload:IsDelivery()",
    "prefix":"ImGuiPayload:IsDelivery",
    "description":"[C++] bool ImGuiPayload::IsDelivery()\n\n"
  },
  "imgui.igListBoxFooter":{
    "scope":"lua",
    "body":"imgui.ListBoxFooter()",
    "prefix":"imgui.ListBoxFooter",
    "description":"[C++] void ImGui::ListBoxFooter()\n\n"
  },
  "imgui.ImGuiStyleVar_WindowMinSize":{
    "scope":"lua",
    "body":"imgui.StyleVar.WindowMinSize",
    "prefix":"imgui.StyleVar.WindowMinSize",
    "description":"[C++] ImGuiStyleVar_WindowMinSize = 4\n\n"
  },
  "imgui.igSaveIniSettingsToMemory":{
    "scope":"lua",
    "body":"imgui.SaveIniSettingsToMemory(${1:[out_ini_size=((void*)0)]})",
    "prefix":"imgui.SaveIniSettingsToMemory",
    "description":"[C++] const char* ImGui::SaveIniSettingsToMemory(size_t* out_ini_size=((void*)0))\n\n"
  },
  "imgui.ImGuiStorage_GetBoolRef":{
    "scope":"lua",
    "body":"ImGuiStorage:GetBoolRef(${1:key}${2:[, default_val=false]})",
    "prefix":"ImGuiStorage:GetBoolRef",
    "description":"[C++] bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val=false)\n\n"
  },
  "imgui.igBeginTabBar":{
    "scope":"lua",
    "body":"imgui.BeginTabBar(${1:str_id}${2:[, flags=0]})",
    "prefix":"imgui.BeginTabBar",
    "description":"[C++] bool ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImFontPtr_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImFontPtr:index_from_ptr",
    "description":"[C++] int ImVector_ImFontPtr::index_from_ptr(const ImVector_ImFontPtr* self, ImFont* const * it)\n\n"
  },
  "imgui.ImGuiHoveredFlags_ChildWindows":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.ChildWindows",
    "prefix":"imgui.HoveredFlags.ChildWindows",
    "description":"[C++] ImGuiHoveredFlags_ChildWindows = 1 << 0\n\n"
  },
  "imgui.ImGuiIO_ClearInputCharacters":{
    "scope":"lua",
    "body":"ImGuiIO:ClearInputCharacters()",
    "prefix":"ImGuiIO:ClearInputCharacters",
    "description":"[C++] void ImGuiIO::ClearInputCharacters()\n\n"
  },
  "imgui.ImVector_ImVec2_back_const":{
    "scope":"lua",
    "body":"ImVector_ImVec2:back_const()",
    "prefix":"ImVector_ImVec2:back",
    "description":"[C++] ImVec2 const * ImVector_ImVec2::back(const ImVector_ImVec2* self)\n\n"
  },
  "imgui.igPopAllowKeyboardFocus":{
    "scope":"lua",
    "body":"imgui.PopAllowKeyboardFocus()",
    "prefix":"imgui.PopAllowKeyboardFocus",
    "description":"[C++] void ImGui::PopAllowKeyboardFocus()\n\n"
  },
  "imgui.ImFont_ImFont":{
    "scope":"lua",
    "body":"imgui.ImFont()",
    "prefix":"imgui.ImFont",
    "description":"[C++] ImFont()\n\n"
  },
  "imgui.igSetNextItemOpen":{
    "scope":"lua",
    "body":"imgui.SetNextItemOpen(${1:is_open}${2:[, cond=0]})",
    "prefix":"imgui.SetNextItemOpen",
    "description":"[C++] void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond=0)\n\n"
  },
  "imgui.igEndDragDropTarget":{
    "scope":"lua",
    "body":"imgui.EndDragDropTarget()",
    "prefix":"imgui.EndDragDropTarget",
    "description":"[C++] void ImGui::EndDragDropTarget()\n\n"
  },
  "imgui.ImDrawList._Data":{
    "scope":"lua",
    "body":"ImDrawList._Data",
    "prefix":"ImDrawList._Data",
    "description":"[C++] const ImDrawListSharedData* ImDrawList::_Data\n\n"
  },
  "imgui.igLogToClipboard":{
    "scope":"lua",
    "body":"imgui.LogToClipboard(${1:[auto_open_depth=-1]})",
    "prefix":"imgui.LogToClipboard",
    "description":"[C++] void ImGui::LogToClipboard(int auto_open_depth=-1)\n\n"
  },
  "imgui.igCollapsingHeader":{
    "scope":"lua",
    "body":"imgui.CollapsingHeader(${1:label}${2:[, flags=0]})",
    "prefix":"imgui.CollapsingHeader",
    "description":"[C++] bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags=0)\n\n"
  },
  "imgui.ImGuiKey_Space":{
    "scope":"lua",
    "body":"imgui.Key.Space",
    "prefix":"imgui.Key.Space",
    "description":"[C++] ImGuiKey_Space = 12\n\n"
  },
  "imgui.ImVector_float_swap":{
    "scope":"lua",
    "body":"ImVector_float:swap(${1:rhs})",
    "prefix":"ImVector_float:swap",
    "description":"[C++] void ImVector_float::swap(ImVector_float* self, ImVector_float rhs)\n\n"
  },
  "imgui.ImFontConfig.GlyphRanges":{
    "scope":"lua",
    "body":"ImFontConfig.GlyphRanges",
    "prefix":"ImFontConfig.GlyphRanges",
    "description":"[C++] const ImWchar* ImFontConfig::GlyphRanges\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.BufDirty":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.BufDirty",
    "prefix":"ImGuiInputTextCallbackData.BufDirty",
    "description":"[C++] bool ImGuiInputTextCallbackData::BufDirty\n\n"
  },
  "imgui.ImVector_ImFontGlyph_insert":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImFontGlyph:insert",
    "description":"[C++] ImFontGlyph* ImVector_ImFontGlyph::insert(ImVector_ImFontGlyph* self, ImFontGlyph const * it, const ImFontGlyph v)\n\n"
  },
  "imgui.igSetWindowSizeStr":{
    "scope":"lua",
    "body":"imgui.SetWindowSizeStr(${1:name}, ${2:size}${3:[, cond=0]})",
    "prefix":"imgui.SetWindowSize",
    "description":"[C++] void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond=0)\n\n"
  },
  "imgui.ImGuiTextBuffer_size":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:size()",
    "prefix":"ImGuiTextBuffer:size",
    "description":"[C++] int ImGuiTextBuffer::size()\n\n"
  },
  "imgui.ImDrawList_AddRect":{
    "scope":"lua",
    "body":"ImDrawList:AddRect(${1:a}, ${2:b}, ${3:col}${4:[, rounding=0.0f]}${5:[, rounding_corners=ImDrawCornerFlags_All]}${6:[, thickness=1.0f]})",
    "prefix":"ImDrawList:AddRect",
    "description":"[C++] void ImDrawList::AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding=0.0f, ImDrawCornerFlags rounding_corners=ImDrawCornerFlags_All, float thickness=1.0f)\n\n"
  },
  "imgui.ImVector_ImDrawVert_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImDrawVert:index_from_ptr",
    "description":"[C++] int ImVector_ImDrawVert::index_from_ptr(const ImVector_ImDrawVert* self, ImDrawVert const * it)\n\n"
  },
  "imgui.igDragScalar":{
    "scope":"lua",
    "body":"imgui.DragScalar(${1:label}, ${2:data_type}, ${3:v}, ${4:v_speed}${5:[, v_min=((void*)0)]}${6:[, v_max=((void*)0)]}${7:[, format=((void*)0)]}${8:[, power=1.0f]})",
    "prefix":"imgui.DragScalar",
    "description":"[C++] bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* v, float v_speed, const void* v_min=((void*)0), const void* v_max=((void*)0), const char* format=((void*)0), float power=1.0f)\n\n"
  },
  "imgui.ImDrawList_PathArcToFast":{
    "scope":"lua",
    "body":"ImDrawList:PathArcToFast(${1:centre}, ${2:radius}, ${3:a_min_of_12}, ${4:a_max_of_12})",
    "prefix":"ImDrawList:PathArcToFast",
    "description":"[C++] void ImDrawList::PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12)\n\n"
  },
  "imgui.ImDrawList_PopTextureID":{
    "scope":"lua",
    "body":"ImDrawList:PopTextureID()",
    "prefix":"ImDrawList:PopTextureID",
    "description":"[C++] void ImDrawList::PopTextureID()\n\n"
  },
  "imgui.ImVector_ImDrawChannel_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImDrawChannel:erase_unsorted",
    "description":"[C++] ImDrawChannel* ImVector_ImDrawChannel::erase_unsorted(ImVector_ImDrawChannel* self, ImDrawChannel const * it)\n\n"
  },
  "imgui.ImGuiIO.IniSavingRate":{
    "scope":"lua",
    "body":"ImGuiIO.IniSavingRate",
    "prefix":"ImGuiIO.IniSavingRate",
    "description":"[C++] float ImGuiIO::IniSavingRate\n\n"
  },
  "imgui.ImFontGlyph.U1":{
    "scope":"lua",
    "body":"ImFontGlyph.U1",
    "prefix":"ImFontGlyph.U1",
    "description":"[C++] float ImFontGlyph::U1\n\n"
  },
  "imgui.ImGuiCol_Button":{
    "scope":"lua",
    "body":"imgui.Col.Button",
    "prefix":"imgui.Col.Button",
    "description":"[C++] ImGuiCol_Button = 21\n\n"
  },
  "imgui.ImGuiColorEditFlags_PickerHueWheel":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.PickerHueWheel",
    "prefix":"imgui.ColorEditFlags.PickerHueWheel",
    "description":"[C++] ImGuiColorEditFlags_PickerHueWheel = 1 << 26\n\n"
  },
  "imgui.ImVector_char_reserve":{
    "scope":"lua",
    "body":"ImVector_char:reserve(${1:new_capacity})",
    "prefix":"ImVector_char:reserve",
    "description":"[C++] void ImVector_char::reserve(ImVector_char* self, int new_capacity)\n\n"
  },
  "imgui.igSetWindowSizeVec2":{
    "scope":"lua",
    "body":"imgui.SetWindowSizeVec2(${1:size}${2:[, cond=0]})",
    "prefix":"imgui.SetWindowSize",
    "description":"[C++] void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond=0)\n\n"
  },
  "imgui.igPopClipRect":{
    "scope":"lua",
    "body":"imgui.PopClipRect()",
    "prefix":"imgui.PopClipRect",
    "description":"[C++] void ImGui::PopClipRect()\n\n"
  },
  "imgui.ImGuiStyleVar_IndentSpacing":{
    "scope":"lua",
    "body":"imgui.StyleVar.IndentSpacing",
    "prefix":"imgui.StyleVar.IndentSpacing",
    "description":"[C++] ImGuiStyleVar_IndentSpacing = 15\n\n"
  },
  "imgui.ImFontAtlasFlags":{
    "scope":"lua",
    "body":"new.ImFontAtlasFlags($1)",
    "prefix":"new.ImFontAtlasFlags",
    "description":"typedef int ImFontAtlasFlags\n\n"
  },
  "imgui.ImDrawCornerFlags_TopLeft":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.TopLeft",
    "prefix":"imgui.DrawCornerFlags.TopLeft",
    "description":"[C++] ImDrawCornerFlags_TopLeft = 1 << 0\n\n"
  },
  "imgui.ImVector_ImFontConfig_ImVector_ImFontConfig":{
    "scope":"lua",
    "body":"imgui.ImVector_ImFontConfig()",
    "prefix":"imgui.ImVector_ImFontConfig",
    "description":"[C++] ImVector_ImFontConfig()\n\n"
  },
  "imgui.ImVector_ImDrawChannel_swap":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:swap(${1:rhs})",
    "prefix":"ImVector_ImDrawChannel:swap",
    "description":"[C++] void ImVector_ImDrawChannel::swap(ImVector_ImDrawChannel* self, ImVector_ImDrawChannel rhs)\n\n"
  },
  "imgui.igColorEdit4":{
    "scope":"lua",
    "body":"imgui.ColorEdit4(${1:label}, ${2:col}${3:[, flags=0]})",
    "prefix":"imgui.ColorEdit4",
    "description":"[C++] bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_back_const":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:back_const()",
    "prefix":"ImVector_ImGuiStoragePair:back",
    "description":"[C++] ImGuiStoragePair const * ImVector_ImGuiStoragePair::back(const ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImVector_clear":{
    "scope":"lua",
    "body":"ImVector:clear()",
    "prefix":"ImVector:clear",
    "description":"[C++] void ImVector::clear()\n\n"
  },
  "imgui.igDebugCheckVersionAndDataLayout":{
    "scope":"lua",
    "body":"imgui.DebugCheckVersionAndDataLayout(${1:version_str}, ${2:sz_io}, ${3:sz_style}, ${4:sz_vec2}, ${5:sz_vec4}, ${6:sz_drawvert}, ${7:sz_drawidx})",
    "prefix":"imgui.DebugCheckVersionAndDataLayout",
    "description":"[C++] bool ImGui::DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)\n\n"
  },
  "imgui.OnFrame":{
    "scope":"lua",
    "body":"imgui.OnFrame(${1:condCallback}${2:[, beforeFrameCallback]}, ${3:drawFrameCallback})",
    "prefix":"imgui.OnFrame",
    "description":"[mimgui function]\n\nReturns: function unsubscribe\n\n"
  },
  "imgui.igGetCursorPosX":{
    "scope":"lua",
    "body":"imgui.GetCursorPosX()",
    "prefix":"imgui.GetCursorPosX",
    "description":"[C++] float ImGui::GetCursorPosX()\n\n"
  },
  "imgui.ImDrawCmd.ClipRect":{
    "scope":"lua",
    "body":"ImDrawCmd.ClipRect",
    "prefix":"ImDrawCmd.ClipRect",
    "description":"[C++] ImVec4 ImDrawCmd::ClipRect\n\n"
  },
  "imgui.igStyleColorsClassic":{
    "scope":"lua",
    "body":"imgui.StyleColorsClassic(${1:[dst=((void*)0)]})",
    "prefix":"imgui.StyleColorsClassic",
    "description":"[C++] void ImGui::StyleColorsClassic(ImGuiStyle* dst=((void*)0))\n\n"
  },
  "imgui.igDragInt3":{
    "scope":"lua",
    "body":"imgui.DragInt3(${1:label}, ${2:v}${3:[, v_speed=1.0f]}${4:[, v_min=0]}${5:[, v_max=0]}${6:[, format=\"%d\"]})",
    "prefix":"imgui.DragInt3",
    "description":"[C++] bool ImGui::DragInt3(const char* label, int v[3], float v_speed=1.0f, int v_min=0, int v_max=0, const char* format=\"%d\")\n\n"
  },
  "imgui.ImVector_ImDrawIdx_reserve":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImDrawIdx:reserve",
    "description":"[C++] void ImVector_ImDrawIdx::reserve(ImVector_ImDrawIdx* self, int new_capacity)\n\n"
  },
  "imgui.ImVector_ImTextureID_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImTextureID:resize",
    "description":"[C++] void ImVector_ImTextureID::resize(ImVector_ImTextureID* self, int new_size, const ImTextureID v)\n\n"
  },
  "imgui.igTextColoredV":{
    "scope":"lua",
    "body":"imgui.TextColoredV(${1:col}, ${2:fmt}, ${3:args})",
    "prefix":"imgui.TextColoredV",
    "description":"[C++] void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)\n\n"
  },
  "imgui.igText":{
    "scope":"lua",
    "body":"imgui.Text(${1:fmt},...)",
    "prefix":"imgui.Text",
    "description":"[C++] void ImGui::Text(const char* fmt, ...)\n\n"
  },
  "imgui.ImGuiIO.Fonts":{
    "scope":"lua",
    "body":"ImGuiIO.Fonts",
    "prefix":"ImGuiIO.Fonts",
    "description":"[C++] ImFontAtlas* ImGuiIO::Fonts\n\n"
  },
  "imgui.ImFontAtlas_GetGlyphRangesThai":{
    "scope":"lua",
    "body":"ImFontAtlas:GetGlyphRangesThai()",
    "prefix":"ImFontAtlas:GetGlyphRangesThai",
    "description":"[C++] const ImWchar* ImFontAtlas::GetGlyphRangesThai()\n\n"
  },
  "imgui.igIndent":{
    "scope":"lua",
    "body":"imgui.Indent(${1:[indent_w=0.0f]})",
    "prefix":"imgui.Indent",
    "description":"[C++] void ImGui::Indent(float indent_w=0.0f)\n\n"
  },
  "imgui.igLoadIniSettingsFromMemory":{
    "scope":"lua",
    "body":"imgui.LoadIniSettingsFromMemory(${1:ini_data}${2:[, ini_size=0]})",
    "prefix":"imgui.LoadIniSettingsFromMemory",
    "description":"[C++] void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0)\n\n"
  },
  "imgui.ImGuiColorEditFlags":{
    "scope":"lua",
    "body":"new.ImGuiColorEditFlags($1)",
    "prefix":"new.ImGuiColorEditFlags",
    "description":"typedef int ImGuiColorEditFlags\n\n"
  },
  "imgui.ImGuiPayload_ImGuiPayload":{
    "scope":"lua",
    "body":"imgui.ImGuiPayload()",
    "prefix":"imgui.ImGuiPayload",
    "description":"[C++] ImGuiPayload()\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_resize":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:resize(${1:new_size})",
    "prefix":"ImVector_ImFontAtlasCustomRect:resize",
    "description":"[C++] void ImVector_ImFontAtlasCustomRect::resize(ImVector_ImFontAtlasCustomRect* self, int new_size)\n\n"
  },
  "imgui.ImVector_ImFontConfig_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImFontConfig:index_from_ptr",
    "description":"[C++] int ImVector_ImFontConfig::index_from_ptr(const ImVector_ImFontConfig* self, ImFontConfig const * it)\n\n"
  },
  "imgui.ImGuiDataType_Double":{
    "scope":"lua",
    "body":"imgui.DataType.Double",
    "prefix":"imgui.DataType.Double",
    "description":"[C++] ImGuiDataType_Double = 9\n\n"
  },
  "imgui.ImVector_ImDrawIdx_ImVector_ImDrawIdx":{
    "scope":"lua",
    "body":"imgui.ImVector_ImDrawIdx()",
    "prefix":"imgui.ImVector_ImDrawIdx",
    "description":"[C++] ImVector_ImDrawIdx()\n\n"
  },
  "imgui.ImFontGlyph.Y1":{
    "scope":"lua",
    "body":"ImFontGlyph.Y1",
    "prefix":"ImFontGlyph.Y1",
    "description":"[C++] float ImFontGlyph::Y1\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_clear":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:clear()",
    "prefix":"ImVector_ImGuiStoragePair:clear",
    "description":"[C++] void ImVector_ImGuiStoragePair::clear(ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoAlpha":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoAlpha",
    "prefix":"imgui.ColorEditFlags.NoAlpha",
    "description":"[C++] ImGuiColorEditFlags_NoAlpha = 1 << 1\n\n"
  },
  "imgui.ImGuiIO_AddInputCharactersUTF8":{
    "scope":"lua",
    "body":"ImGuiIO:AddInputCharactersUTF8(${1:str})",
    "prefix":"ImGuiIO:AddInputCharactersUTF8",
    "description":"[C++] void ImGuiIO::AddInputCharactersUTF8(const char* str)\n\n"
  },
  "imgui.ImGuiNavInput_Input":{
    "scope":"lua",
    "body":"imgui.NavInput.Input",
    "prefix":"imgui.NavInput.Input",
    "description":"[C++] ImGuiNavInput_Input = 2\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_CollapsingHeader":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.CollapsingHeader",
    "prefix":"imgui.TreeNodeFlags.CollapsingHeader",
    "description":"[C++] ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog\n\n"
  },
  "imgui.ImGuiTextBuffer_end":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:_end()",
    "prefix":"ImGuiTextBuffer:end",
    "description":"[C++] const char* ImGuiTextBuffer::end()\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_empty":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:empty()",
    "prefix":"ImVector_ImGuiStoragePair:empty",
    "description":"[C++] bool ImVector_ImGuiStoragePair::empty(const ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImVector_ImVec2_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImVec2:pop_back()",
    "prefix":"ImVector_ImVec2:pop_back",
    "description":"[C++] void ImVector_ImVec2::pop_back(ImVector_ImVec2* self)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImGuiTextRange:resize",
    "description":"[C++] void ImVector_ImGuiTextRange::resize(ImVector_ImGuiTextRange* self, int new_size, const ImGuiTextRange v)\n\n"
  },
  "imgui.igValueInt":{
    "scope":"lua",
    "body":"imgui.ValueInt(${1:prefix}, ${2:v})",
    "prefix":"imgui.Value",
    "description":"[C++] void ImGui::Value(const char* prefix, int v)\n\n"
  },
  "imgui.ImDrawList_PrimWriteIdx":{
    "scope":"lua",
    "body":"ImDrawList:PrimWriteIdx(${1:idx})",
    "prefix":"ImDrawList:PrimWriteIdx",
    "description":"[C++] void ImDrawList::PrimWriteIdx(ImDrawIdx idx)\n\n"
  },
  "imgui.ImGuiStorage_GetVoidPtrRef":{
    "scope":"lua",
    "body":"ImGuiStorage:GetVoidPtrRef(${1:key}${2:[, default_val=((void*)0)]})",
    "prefix":"ImGuiStorage:GetVoidPtrRef",
    "description":"[C++] void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val=((void*)0))\n\n"
  },
  "imgui.igSetScrollX":{
    "scope":"lua",
    "body":"imgui.SetScrollX(${1:scroll_x})",
    "prefix":"imgui.SetScrollX",
    "description":"[C++] void ImGui::SetScrollX(float scroll_x)\n\n"
  },
  "imgui.igEndFrame":{
    "scope":"lua",
    "body":"imgui.EndFrame()",
    "prefix":"imgui.EndFrame",
    "description":"[C++] void ImGui::EndFrame()\n\n"
  },
  "imgui.igSliderInt":{
    "scope":"lua",
    "body":"imgui.SliderInt(${1:label}, ${2:v}, ${3:v_min}, ${4:v_max}${5:[, format=\"%d\"]})",
    "prefix":"imgui.SliderInt",
    "description":"[C++] bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format=\"%d\")\n\n"
  },
  "imgui.ImGuiComboFlags_NoArrowButton":{
    "scope":"lua",
    "body":"imgui.ComboFlags.NoArrowButton",
    "prefix":"imgui.ComboFlags.NoArrowButton",
    "description":"[C++] ImGuiComboFlags_NoArrowButton = 1 << 5\n\n"
  },
  "imgui.igSetNextWindowSize":{
    "scope":"lua",
    "body":"imgui.SetNextWindowSize(${1:size}${2:[, cond=0]})",
    "prefix":"imgui.SetNextWindowSize",
    "description":"[C++] void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond=0)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_resize":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:resize(${1:new_size})",
    "prefix":"ImVector_ImGuiStoragePair:resize",
    "description":"[C++] void ImVector_ImGuiStoragePair::resize(ImVector_ImGuiStoragePair* self, int new_size)\n\n"
  },
  "imgui.ImDrawList_PathBezierCurveTo":{
    "scope":"lua",
    "body":"ImDrawList:PathBezierCurveTo(${1:p1}, ${2:p2}, ${3:p3}${4:[, num_segments=0]})",
    "prefix":"ImDrawList:PathBezierCurveTo",
    "description":"[C++] void ImDrawList::PathBezierCurveTo(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, int num_segments=0)\n\n"
  },
  "imgui.ImFont.Scale":{
    "scope":"lua",
    "body":"ImFont.Scale",
    "prefix":"ImFont.Scale",
    "description":"[C++] float ImFont::Scale\n\n"
  },
  "imgui.ImVector_ImDrawVert_push_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:push_back(${1:v})",
    "prefix":"ImVector_ImDrawVert:push_back",
    "description":"[C++] void ImVector_ImDrawVert::push_back(ImVector_ImDrawVert* self, const ImDrawVert v)\n\n"
  },
  "imgui.ImGuiTextFilter_IsActive":{
    "scope":"lua",
    "body":"ImGuiTextFilter:IsActive()",
    "prefix":"ImGuiTextFilter:IsActive",
    "description":"[C++] bool ImGuiTextFilter::IsActive()\n\n"
  },
  "imgui.ImVector_ImDrawCmd_ImVector_ImDrawCmdVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImDrawCmd.ImVector_ImDrawCmdVector(${1:src})",
    "prefix":"imgui.ImVector_ImDrawCmd.ImVector_ImDrawCmd",
    "description":"[C++] ImVector_ImDrawCmd(const ImVector_ImDrawCmd src)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_reserve":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImFontGlyph:reserve",
    "description":"[C++] void ImVector_ImFontGlyph::reserve(ImVector_ImFontGlyph* self, int new_capacity)\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.Buf":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.Buf",
    "prefix":"ImGuiInputTextCallbackData.Buf",
    "description":"[C++] char* ImGuiInputTextCallbackData::Buf\n\n"
  },
  "imgui.ImGuiIO.InputQueueCharacters":{
    "scope":"lua",
    "body":"ImGuiIO.InputQueueCharacters",
    "prefix":"ImGuiIO.InputQueueCharacters",
    "description":"[C++] ImVector_ImWchar ImGuiIO::InputQueueCharacters\n\n"
  },
  "imgui.ImVector_ImFontConfig_insert":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImFontConfig:insert",
    "description":"[C++] ImFontConfig* ImVector_ImFontConfig::insert(ImVector_ImFontConfig* self, ImFontConfig const * it, const ImFontConfig v)\n\n"
  },
  "imgui.ImGuiStorage_Clear":{
    "scope":"lua",
    "body":"ImGuiStorage:Clear()",
    "prefix":"ImGuiStorage:Clear",
    "description":"[C++] void ImGuiStorage::Clear()\n\n"
  },
  "imgui.ImVector_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector:erase_unsorted(${1:it})",
    "prefix":"ImVector:erase_unsorted",
    "description":"[C++] T* ImVector::erase_unsorted(const T* it)\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.BufSize":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.BufSize",
    "prefix":"ImGuiInputTextCallbackData.BufSize",
    "description":"[C++] int ImGuiInputTextCallbackData::BufSize\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_FramePadding":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.FramePadding",
    "prefix":"imgui.TreeNodeFlags.FramePadding",
    "description":"[C++] ImGuiTreeNodeFlags_FramePadding = 1 << 10\n\n"
  },
  "imgui.ImVector_ImFontGlyph_capacity":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:capacity()",
    "prefix":"ImVector_ImFontGlyph:capacity",
    "description":"[C++] int ImVector_ImFontGlyph::capacity(const ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_reserve":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImFontAtlasCustomRect:reserve",
    "description":"[C++] void ImVector_ImFontAtlasCustomRect::reserve(ImVector_ImFontAtlasCustomRect* self, int new_capacity)\n\n"
  },
  "imgui.igDummy":{
    "scope":"lua",
    "body":"imgui.Dummy(${1:size})",
    "prefix":"imgui.Dummy",
    "description":"[C++] void ImGui::Dummy(const ImVec2& size)\n\n"
  },
  "imgui.ImGuiIO.MouseDragThreshold":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDragThreshold",
    "prefix":"ImGuiIO.MouseDragThreshold",
    "description":"[C++] float ImGuiIO::MouseDragThreshold\n\n"
  },
  "imgui.ImVector_ImTextureID_front_const":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:front_const()",
    "prefix":"ImVector_ImTextureID:front",
    "description":"[C++] ImTextureID const * ImVector_ImTextureID::front(const ImVector_ImTextureID* self)\n\n"
  },
  "imgui.igGetScrollY":{
    "scope":"lua",
    "body":"imgui.GetScrollY()",
    "prefix":"imgui.GetScrollY",
    "description":"[C++] float ImGui::GetScrollY()\n\n"
  },
  "imgui.ImGuiCol_TitleBgActive":{
    "scope":"lua",
    "body":"imgui.Col.TitleBgActive",
    "prefix":"imgui.Col.TitleBgActive",
    "description":"[C++] ImGuiCol_TitleBgActive = 11\n\n"
  },
  "imgui.ImGuiKey_A":{
    "scope":"lua",
    "body":"imgui.Key.A",
    "prefix":"imgui.Key.A",
    "description":"[C++] ImGuiKey_A = 16\n\n"
  },
  "imgui.igSetNextWindowPos":{
    "scope":"lua",
    "body":"imgui.SetNextWindowPos(${1:pos}${2:[, cond=0]}${3:[, pivot=ImVec2(0,0)]})",
    "prefix":"imgui.SetNextWindowPos",
    "description":"[C++] void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond=0, const ImVec2& pivot=ImVec2(0, 0))\n\n"
  },
  "imgui.ImVector_ImWchar_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImWchar:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImWchar:erase",
    "description":"[C++] ImWchar* ImVector_ImWchar::erase(ImVector_ImWchar* self, ImWchar const * it, ImWchar const * it_last)\n\n"
  },
  "imgui.ImGuiIO.KeysDown[512]":{
    "scope":"lua",
    "body":"ImGuiIO.KeysDown[512]",
    "prefix":"ImGuiIO.KeysDown[512]",
    "description":"[C++] bool ImGuiIO::KeysDown[512]\n\n"
  },
  "imgui.ImDrawListSplitter_SetCurrentChannel":{
    "scope":"lua",
    "body":"ImDrawListSplitter:SetCurrentChannel(${1:draw_list}, ${2:channel_idx})",
    "prefix":"ImDrawListSplitter:SetCurrentChannel",
    "description":"[C++] void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int channel_idx)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_end":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:_end()",
    "prefix":"ImVector_ImFontAtlasCustomRect:end",
    "description":"[C++] ImFontAtlasCustomRect* ImVector_ImFontAtlasCustomRect::end(ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImGuiNavInput_DpadDown":{
    "scope":"lua",
    "body":"imgui.NavInput.DpadDown",
    "prefix":"imgui.NavInput.DpadDown",
    "description":"[C++] ImGuiNavInput_DpadDown = 7\n\n"
  },
  "imgui.ImGuiIO.MouseDrawCursor":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDrawCursor",
    "prefix":"ImGuiIO.MouseDrawCursor",
    "description":"[C++] bool ImGuiIO::MouseDrawCursor\n\n"
  },
  "imgui.ImGuiKey_C":{
    "scope":"lua",
    "body":"imgui.Key.C",
    "prefix":"imgui.Key.C",
    "description":"[C++] ImGuiKey_C = 17\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImGuiStoragePair:erase",
    "description":"[C++] ImGuiStoragePair* ImVector_ImGuiStoragePair::erase(ImVector_ImGuiStoragePair* self, ImGuiStoragePair const * it, ImGuiStoragePair const * it_last)\n\n"
  },
  "imgui.ImGuiStyleVar_WindowRounding":{
    "scope":"lua",
    "body":"imgui.StyleVar.WindowRounding",
    "prefix":"imgui.StyleVar.WindowRounding",
    "description":"[C++] ImGuiStyleVar_WindowRounding = 2\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_swap":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:swap(${1:rhs})",
    "prefix":"ImVector_ImGuiStoragePair:swap",
    "description":"[C++] void ImVector_ImGuiStoragePair::swap(ImVector_ImGuiStoragePair* self, ImVector_ImGuiStoragePair rhs)\n\n"
  },
  "imgui.ImGuiStyle.FramePadding":{
    "scope":"lua",
    "body":"ImGuiStyle.FramePadding",
    "prefix":"ImGuiStyle.FramePadding",
    "description":"[C++] ImVec2 ImGuiStyle::FramePadding\n\n"
  },
  "imgui.ImDrawList_AddRectFilledMultiColor":{
    "scope":"lua",
    "body":"ImDrawList:AddRectFilledMultiColor(${1:a}, ${2:b}, ${3:col_upr_left}, ${4:col_upr_right}, ${5:col_bot_right}, ${6:col_bot_left})",
    "prefix":"ImDrawList:AddRectFilledMultiColor",
    "description":"[C++] void ImDrawList::AddRectFilledMultiColor(const ImVec2& a, const ImVec2& b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)\n\n"
  },
  "imgui.ImGuiStyleVar_ItemSpacing":{
    "scope":"lua",
    "body":"imgui.StyleVar.ItemSpacing",
    "prefix":"imgui.StyleVar.ItemSpacing",
    "description":"[C++] ImGuiStyleVar_ItemSpacing = 13\n\n"
  },
  "imgui.igTreeNodeExPtr":{
    "scope":"lua",
    "body":"imgui.TreeNodeExPtr(${1:ptr_id}, ${2:flags}, ${3:fmt},...)",
    "prefix":"imgui.TreeNodeEx",
    "description":"[C++] bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)\n\n"
  },
  "imgui.ImGuiNavInput_KeyRight_":{
    "scope":"lua",
    "body":"imgui.NavInput.KeyRight_",
    "prefix":"imgui.NavInput.KeyRight_",
    "description":"[C++] ImGuiNavInput_KeyRight_ = 19\n\n"
  },
  "imgui.igValueUint":{
    "scope":"lua",
    "body":"imgui.ValueUint(${1:prefix}, ${2:v})",
    "prefix":"imgui.Value",
    "description":"[C++] void ImGui::Value(const char* prefix, unsigned int v)\n\n"
  },
  "imgui.ImDrawList_PushClipRectFullScreen":{
    "scope":"lua",
    "body":"ImDrawList:PushClipRectFullScreen()",
    "prefix":"ImDrawList:PushClipRectFullScreen",
    "description":"[C++] void ImDrawList::PushClipRectFullScreen()\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_empty":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:empty()",
    "prefix":"ImVector_ImGuiTextRange:empty",
    "description":"[C++] bool ImVector_ImGuiTextRange::empty(const ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImS64":{
    "scope":"lua",
    "body":"new.ImS64($1)",
    "prefix":"new.ImS64",
    "description":"typedef int64_t ImS64\n\n"
  },
  "imgui.ImVector_ImWchar_capacity":{
    "scope":"lua",
    "body":"ImVector_ImWchar:capacity()",
    "prefix":"ImVector_ImWchar:capacity",
    "description":"[C++] int ImVector_ImWchar::capacity(const ImVector_ImWchar* self)\n\n"
  },
  "imgui.igTreePushStr":{
    "scope":"lua",
    "body":"imgui.TreePushStr(${1:str_id})",
    "prefix":"imgui.TreePush",
    "description":"[C++] void ImGui::TreePush(const char* str_id)\n\n"
  },
  "imgui.ImVector_float_erase":{
    "scope":"lua",
    "body":"ImVector_float:erase(${1:it})",
    "prefix":"ImVector_float:erase",
    "description":"[C++] float* ImVector_float::erase(ImVector_float* self, float const * it)\n\n"
  },
  "imgui.ImVector_front_const":{
    "scope":"lua",
    "body":"ImVector:front_const()",
    "prefix":"ImVector:front",
    "description":"[C++] const T* ImVector::front()\n\n"
  },
  "imgui.ImGuiStorage_SetAllInt":{
    "scope":"lua",
    "body":"ImGuiStorage:SetAllInt(${1:val})",
    "prefix":"ImGuiStorage:SetAllInt",
    "description":"[C++] void ImGuiStorage::SetAllInt(int val)\n\n"
  },
  "imgui.ImVector_ImFontPtr_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:size_in_bytes()",
    "prefix":"ImVector_ImFontPtr:size_in_bytes",
    "description":"[C++] int ImVector_ImFontPtr::size_in_bytes(const ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImGuiIO.BackendFlags":{
    "scope":"lua",
    "body":"ImGuiIO.BackendFlags",
    "prefix":"ImGuiIO.BackendFlags",
    "description":"[C++] ImGuiBackendFlags ImGuiIO::BackendFlags\n\n"
  },
  "imgui.ImDrawListSplitter_Clear":{
    "scope":"lua",
    "body":"ImDrawListSplitter:Clear()",
    "prefix":"ImDrawListSplitter:Clear",
    "description":"[C++] void ImDrawListSplitter::Clear()\n\n"
  },
  "imgui.igSetWindowFocusStr":{
    "scope":"lua",
    "body":"imgui.SetWindowFocusStr(${1:name})",
    "prefix":"imgui.SetWindowFocus",
    "description":"[C++] void ImGui::SetWindowFocus(const char* name)\n\n"
  },
  "imgui.igCalcItemWidth":{
    "scope":"lua",
    "body":"imgui.CalcItemWidth()",
    "prefix":"imgui.CalcItemWidth",
    "description":"[C++] float ImGui::CalcItemWidth()\n\n"
  },
  "imgui.ImVector_front":{
    "scope":"lua",
    "body":"ImVector:front()",
    "prefix":"ImVector:front",
    "description":"[C++] T* ImVector::front()\n\n"
  },
  "imgui.ImDrawList_AddImageRounded":{
    "scope":"lua",
    "body":"ImDrawList:AddImageRounded(${1:user_texture_id}, ${2:a}, ${3:b}, ${4:uv_a}, ${5:uv_b}, ${6:col}, ${7:rounding}${8:[, rounding_corners=ImDrawCornerFlags_All]})",
    "prefix":"ImDrawList:AddImageRounded",
    "description":"[C++] void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col, float rounding, ImDrawCornerFlags rounding_corners=ImDrawCornerFlags_All)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImGuiTextRange:erase_unsorted",
    "description":"[C++] ImGuiTextRange* ImVector_ImGuiTextRange::erase_unsorted(ImVector_ImGuiTextRange* self, ImGuiTextRange const * it)\n\n"
  },
  "imgui.ImVector_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector:erase",
    "description":"[C++] T* ImVector::erase(const T* it, const T* it_last)\n\n"
  },
  "imgui.ImGuiIO.MouseDoubleClickTime":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDoubleClickTime",
    "prefix":"ImGuiIO.MouseDoubleClickTime",
    "description":"[C++] float ImGuiIO::MouseDoubleClickTime\n\n"
  },
  "imgui.ImVector_ImTextureID_front":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:front()",
    "prefix":"ImVector_ImTextureID:front",
    "description":"[C++] ImTextureID* ImVector_ImTextureID::front(ImVector_ImTextureID* self)\n\n"
  },
  "imgui.ImVector_float_front":{
    "scope":"lua",
    "body":"ImVector_float:front()",
    "prefix":"ImVector_float:front",
    "description":"[C++] float* ImVector_float::front(ImVector_float* self)\n\n"
  },
  "imgui.igIsMousePosValid":{
    "scope":"lua",
    "body":"imgui.IsMousePosValid(${1:[mouse_pos=((void*)0)]})",
    "prefix":"imgui.IsMousePosValid",
    "description":"[C++] bool ImGui::IsMousePosValid(const ImVec2* mouse_pos=((void*)0))\n\n"
  },
  "imgui.ImGuiInputTextFlags_CallbackAlways":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CallbackAlways",
    "prefix":"imgui.InputTextFlags.CallbackAlways",
    "description":"[C++] ImGuiInputTextFlags_CallbackAlways = 1 << 8\n\n"
  },
  "imgui.ImFontAtlas_IsBuilt":{
    "scope":"lua",
    "body":"ImFontAtlas:IsBuilt()",
    "prefix":"ImFontAtlas:IsBuilt",
    "description":"[C++] bool ImFontAtlas::IsBuilt()\n\n"
  },
  "imgui.ImColor_ImColorInt":{
    "scope":"lua",
    "body":"imgui.ImColor.ImColorInt(${1:r}, ${2:g}, ${3:b}${4:[, a=255]})",
    "prefix":"imgui.ImColor.ImColor",
    "description":"[C++] ImColor(int r, int g, int b, int a=255)\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder":{
    "scope":"lua",
    "body":"new.ImFontGlyphRangesBuilder($1)",
    "prefix":"new.ImFontGlyphRangesBuilder",
    "description":"typedef struct ImFontGlyphRangesBuilder ImFontGlyphRangesBuilder\n\n"
  },
  "imgui.ImVector_float_ImVector_float":{
    "scope":"lua",
    "body":"imgui.ImVector_float()",
    "prefix":"imgui.ImVector_float",
    "description":"[C++] ImVector_float()\n\n"
  },
  "imgui.ImVector_ImVec2_ImVector_ImVec2Vector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImVec2.ImVector_ImVec2Vector(${1:src})",
    "prefix":"imgui.ImVector_ImVec2.ImVector_ImVec2",
    "description":"[C++] ImVector_ImVec2(const ImVector_ImVec2 src)\n\n"
  },
  "imgui.igPushStyleColor":{
    "scope":"lua",
    "body":"imgui.PushStyleColor(${1:idx}, ${2:col})",
    "prefix":"imgui.PushStyleColor",
    "description":"[C++] void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)\n\n"
  },
  "imgui.HideCursor":{
    "scope":"lua",
    "body":"imgui.HideCursor",
    "prefix":"imgui.HideCursor",
    "description":"[mimgui variable]\n\nType: bool\n\n"
  },
  "imgui.igDragInt2":{
    "scope":"lua",
    "body":"imgui.DragInt2(${1:label}, ${2:v}${3:[, v_speed=1.0f]}${4:[, v_min=0]}${5:[, v_max=0]}${6:[, format=\"%d\"]})",
    "prefix":"imgui.DragInt2",
    "description":"[C++] bool ImGui::DragInt2(const char* label, int v[2], float v_speed=1.0f, int v_min=0, int v_max=0, const char* format=\"%d\")\n\n"
  },
  "imgui.igIsAnyMouseDown":{
    "scope":"lua",
    "body":"imgui.IsAnyMouseDown()",
    "prefix":"imgui.IsAnyMouseDown",
    "description":"[C++] bool ImGui::IsAnyMouseDown()\n\n"
  },
  "imgui.ImVector_ImFontPtr_end_const":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:end_const()",
    "prefix":"ImVector_ImFontPtr:end",
    "description":"[C++] ImFont* const * ImVector_ImFontPtr::end(const ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_push_front":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:push_front(${1:v})",
    "prefix":"ImVector_ImDrawChannel:push_front",
    "description":"[C++] void ImVector_ImDrawChannel::push_front(ImVector_ImDrawChannel* self, const ImDrawChannel v)\n\n"
  },
  "imgui.ImGuiDir_Left":{
    "scope":"lua",
    "body":"imgui.Dir.Left",
    "prefix":"imgui.Dir.Left",
    "description":"[C++] ImGuiDir_Left = 0\n\n"
  },
  "imgui.ImGuiCol_ScrollbarGrabHovered":{
    "scope":"lua",
    "body":"imgui.Col.ScrollbarGrabHovered",
    "prefix":"imgui.Col.ScrollbarGrabHovered",
    "description":"[C++] ImGuiCol_ScrollbarGrabHovered = 16\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_capacity":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:capacity()",
    "prefix":"ImVector_ImFontAtlasCustomRect:capacity",
    "description":"[C++] int ImVector_ImFontAtlasCustomRect::capacity(const ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.igSliderFloat4":{
    "scope":"lua",
    "body":"imgui.SliderFloat4(${1:label}, ${2:v}, ${3:v_min}, ${4:v_max}${5:[, format=\"%.3f\"]}${6:[, power=1.0f]})",
    "prefix":"imgui.SliderFloat4",
    "description":"[C++] bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.ImGuiWindowFlags":{
    "scope":"lua",
    "body":"new.ImGuiWindowFlags($1)",
    "prefix":"new.ImGuiWindowFlags",
    "description":"typedef int ImGuiWindowFlags\n\n"
  },
  "imgui.ImGuiDragDropFlags":{
    "scope":"lua",
    "body":"new.ImGuiDragDropFlags($1)",
    "prefix":"new.ImGuiDragDropFlags",
    "description":"typedef int ImGuiDragDropFlags\n\n"
  },
  "imgui.ImVector_ImDrawIdx_front_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:front_const()",
    "prefix":"ImVector_ImDrawIdx:front",
    "description":"[C++] ImDrawIdx const * ImVector_ImDrawIdx::front(const ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImDrawCmd":{
    "scope":"lua",
    "body":"new.ImDrawCmd($1)",
    "prefix":"new.ImDrawCmd",
    "description":"typedef struct ImDrawCmd ImDrawCmd\n\n"
  },
  "imgui.ImGuiTextBuffer_append":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:append(${1:str}${2:[, str_end=((void*)0)]})",
    "prefix":"ImGuiTextBuffer:append",
    "description":"[C++] void ImGuiTextBuffer::append(const char* str, const char* str_end=((void*)0))\n\n"
  },
  "imgui.igSetNextWindowBgAlpha":{
    "scope":"lua",
    "body":"imgui.SetNextWindowBgAlpha(${1:alpha})",
    "prefix":"imgui.SetNextWindowBgAlpha",
    "description":"[C++] void ImGui::SetNextWindowBgAlpha(float alpha)\n\n"
  },
  "imgui.ImFontAtlas_ClearFonts":{
    "scope":"lua",
    "body":"ImFontAtlas:ClearFonts()",
    "prefix":"ImFontAtlas:ClearFonts",
    "description":"[C++] void ImFontAtlas::ClearFonts()\n\n"
  },
  "imgui.ImGuiSelectableFlags":{
    "scope":"lua",
    "body":"new.ImGuiSelectableFlags($1)",
    "prefix":"new.ImGuiSelectableFlags",
    "description":"typedef int ImGuiSelectableFlags\n\n"
  },
  "imgui.igTextDisabledV":{
    "scope":"lua",
    "body":"imgui.TextDisabledV(${1:fmt}, ${2:args})",
    "prefix":"imgui.TextDisabledV",
    "description":"[C++] void ImGui::TextDisabledV(const char* fmt, va_list args)\n\n"
  },
  "imgui.ImGuiInputTextCallbackData_InsertChars":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData:InsertChars(${1:pos}, ${2:text}${3:[, text_end=((void*)0)]})",
    "prefix":"ImGuiInputTextCallbackData:InsertChars",
    "description":"[C++] void ImGuiInputTextCallbackData::InsertChars(int pos, const char* text, const char* text_end=((void*)0))\n\n"
  },
  "imgui.ImDrawChannel":{
    "scope":"lua",
    "body":"new.ImDrawChannel($1)",
    "prefix":"new.ImDrawChannel",
    "description":"typedef struct ImDrawChannel ImDrawChannel\n\n"
  },
  "imgui.ImGuiIO.WantTextInput":{
    "scope":"lua",
    "body":"ImGuiIO.WantTextInput",
    "prefix":"ImGuiIO.WantTextInput",
    "description":"[C++] bool ImGuiIO::WantTextInput\n\n"
  },
  "imgui.ImGuiCol_TabHovered":{
    "scope":"lua",
    "body":"imgui.Col.TabHovered",
    "prefix":"imgui.Col.TabHovered",
    "description":"[C++] ImGuiCol_TabHovered = 34\n\n"
  },
  "imgui.igInputInt3":{
    "scope":"lua",
    "body":"imgui.InputInt3(${1:label}, ${2:v}${3:[, flags=0]})",
    "prefix":"imgui.InputInt3",
    "description":"[C++] bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.igIsItemDeactivatedAfterEdit":{
    "scope":"lua",
    "body":"imgui.IsItemDeactivatedAfterEdit()",
    "prefix":"imgui.IsItemDeactivatedAfterEdit",
    "description":"[C++] bool ImGui::IsItemDeactivatedAfterEdit()\n\n"
  },
  "imgui.igSetNextWindowCollapsed":{
    "scope":"lua",
    "body":"imgui.SetNextWindowCollapsed(${1:collapsed}${2:[, cond=0]})",
    "prefix":"imgui.SetNextWindowCollapsed",
    "description":"[C++] void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond=0)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:size_in_bytes()",
    "prefix":"ImVector_ImDrawChannel:size_in_bytes",
    "description":"[C++] int ImVector_ImDrawChannel::size_in_bytes(const ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImVector_float_end":{
    "scope":"lua",
    "body":"ImVector_float:_end()",
    "prefix":"ImVector_float:end",
    "description":"[C++] float* ImVector_float::end(ImVector_float* self)\n\n"
  },
  "imgui.ImVector_ImU32_reserve":{
    "scope":"lua",
    "body":"ImVector_ImU32:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImU32:reserve",
    "description":"[C++] void ImVector_ImU32::reserve(ImVector_ImU32* self, int new_capacity)\n\n"
  },
  "imgui.ImGuiKey_Home":{
    "scope":"lua",
    "body":"imgui.Key.Home",
    "prefix":"imgui.Key.Home",
    "description":"[C++] ImGuiKey_Home = 7\n\n"
  },
  "imgui.ImVector_ImFontConfig_ImVector_ImFontConfigVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImFontConfig.ImVector_ImFontConfigVector(${1:src})",
    "prefix":"imgui.ImVector_ImFontConfig.ImVector_ImFontConfig",
    "description":"[C++] ImVector_ImFontConfig(const ImVector_ImFontConfig src)\n\n"
  },
  "imgui.ImGuiIO.ConfigInputTextCursorBlink":{
    "scope":"lua",
    "body":"ImGuiIO.ConfigInputTextCursorBlink",
    "prefix":"ImGuiIO.ConfigInputTextCursorBlink",
    "description":"[C++] bool ImGuiIO::ConfigInputTextCursorBlink\n\n"
  },
  "imgui.ImGuiIO":{
    "scope":"lua",
    "body":"new.ImGuiIO($1)",
    "prefix":"new.ImGuiIO",
    "description":"typedef struct ImGuiIO ImGuiIO\n\n"
  },
  "imgui.ImTextureID":{
    "scope":"lua",
    "body":"new.ImTextureID($1)",
    "prefix":"new.ImTextureID",
    "description":"typedef void* ImTextureID\n\n"
  },
  "imgui.igIsRectVisibleVec2":{
    "scope":"lua",
    "body":"imgui.IsRectVisibleVec2(${1:rect_min}, ${2:rect_max})",
    "prefix":"imgui.IsRectVisible",
    "description":"[C++] bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)\n\n"
  },
  "imgui.ImFontAtlas_GetGlyphRangesVietnamese":{
    "scope":"lua",
    "body":"ImFontAtlas:GetGlyphRangesVietnamese()",
    "prefix":"ImFontAtlas:GetGlyphRangesVietnamese",
    "description":"[C++] const ImWchar* ImFontAtlas::GetGlyphRangesVietnamese()\n\n"
  },
  "imgui.ImGuiConfigFlags_NavNoCaptureKeyboard":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.NavNoCaptureKeyboard",
    "prefix":"imgui.ConfigFlags.NavNoCaptureKeyboard",
    "description":"[C++] ImGuiConfigFlags_NavNoCaptureKeyboard = 1 << 3\n\n"
  },
  "imgui.ImDrawListSplitter_ClearFreeMemory":{
    "scope":"lua",
    "body":"ImDrawListSplitter:ClearFreeMemory()",
    "prefix":"ImDrawListSplitter:ClearFreeMemory",
    "description":"[C++] void ImDrawListSplitter::ClearFreeMemory()\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_end_const":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:end_const()",
    "prefix":"ImVector_ImGuiStoragePair:end",
    "description":"[C++] ImGuiStoragePair const * ImVector_ImGuiStoragePair::end(const ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImDrawCallback":{
    "scope":"lua",
    "body":"new.ImDrawCallback($1)",
    "prefix":"new.ImDrawCallback",
    "description":"typedef void(*)(const ImDrawList* parent_list,const ImDrawCmd* cmd); ImDrawCallback\n\n"
  },
  "imgui.ImGuiStoragePair_ImGuiStoragePairPtr":{
    "scope":"lua",
    "body":"imgui.ImGuiStoragePair.ImGuiStoragePairPtr(${1:_key}, ${2:_val_p})",
    "prefix":"imgui.ImGuiStoragePair.ImGuiStoragePair",
    "description":"[C++] ImGuiStoragePair(ImGuiID _key, void* _val_p)\n\n"
  },
  "imgui.igEndCombo":{
    "scope":"lua",
    "body":"imgui.EndCombo()",
    "prefix":"imgui.EndCombo",
    "description":"[C++] void ImGui::EndCombo()\n\n"
  },
  "imgui.ImColor_ImColorU32":{
    "scope":"lua",
    "body":"imgui.ImColor.ImColorU32(${1:rgba})",
    "prefix":"imgui.ImColor.ImColor",
    "description":"[C++] ImColor(ImU32 rgba)\n\n"
  },
  "imgui.ImGuiMouseCursor":{
    "scope":"lua",
    "body":"new.ImGuiMouseCursor($1)",
    "prefix":"new.ImGuiMouseCursor",
    "description":"typedef int ImGuiMouseCursor\n\n"
  },
  "imgui.ImFontAtlasCustomRect":{
    "scope":"lua",
    "body":"new.ImFontAtlasCustomRect($1)",
    "prefix":"new.ImFontAtlasCustomRect",
    "description":"typedef struct ImFontAtlasCustomRect ImFontAtlasCustomRect\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_back_const":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:back_const()",
    "prefix":"ImVector_ImGuiTextRange:back",
    "description":"[C++] ImGuiTextRange const * ImVector_ImGuiTextRange::back(const ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImGuiDataType":{
    "scope":"lua",
    "body":"new.ImGuiDataType($1)",
    "prefix":"new.ImGuiDataType",
    "description":"typedef int ImGuiDataType\n\n"
  },
  "imgui.igDragFloat4":{
    "scope":"lua",
    "body":"imgui.DragFloat4(${1:label}, ${2:v}${3:[, v_speed=1.0f]}${4:[, v_min=0.0f]}${5:[, v_max=0.0f]}${6:[, format=\"%.3f\"]}${7:[, power=1.0f]})",
    "prefix":"imgui.DragFloat4",
    "description":"[C++] bool ImGui::DragFloat4(const char* label, float v[4], float v_speed=1.0f, float v_min=0.0f, float v_max=0.0f, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder_AddText":{
    "scope":"lua",
    "body":"ImFontGlyphRangesBuilder:AddText(${1:text}${2:[, text_end=((void*)0)]})",
    "prefix":"ImFontGlyphRangesBuilder:AddText",
    "description":"[C++] void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end=((void*)0))\n\n"
  },
  "imgui.igIsMouseReleased":{
    "scope":"lua",
    "body":"imgui.IsMouseReleased(${1:button})",
    "prefix":"imgui.IsMouseReleased",
    "description":"[C++] bool ImGui::IsMouseReleased(int button)\n\n"
  },
  "imgui.ImVector_ImU32__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImU32:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImU32:_grow_capacity",
    "description":"[C++] int ImVector_ImU32::_grow_capacity(const ImVector_ImU32* self, int sz)\n\n"
  },
  "imgui.ImDrawCornerFlags":{
    "scope":"lua",
    "body":"new.ImDrawCornerFlags($1)",
    "prefix":"new.ImDrawCornerFlags",
    "description":"typedef int ImDrawCornerFlags\n\n"
  },
  "imgui.ImGuiWindowFlags_None":{
    "scope":"lua",
    "body":"imgui.WindowFlags.None",
    "prefix":"imgui.WindowFlags.None",
    "description":"[C++] ImGuiWindowFlags_None = 0\n\n"
  },
  "imgui.ImGuiCond":{
    "scope":"lua",
    "body":"new.ImGuiCond($1)",
    "prefix":"new.ImGuiCond",
    "description":"typedef int ImGuiCond\n\n"
  },
  "imgui.igPopTextWrapPos":{
    "scope":"lua",
    "body":"imgui.PopTextWrapPos()",
    "prefix":"imgui.PopTextWrapPos",
    "description":"[C++] void ImGui::PopTextWrapPos()\n\n"
  },
  "imgui.igEndMainMenuBar":{
    "scope":"lua",
    "body":"imgui.EndMainMenuBar()",
    "prefix":"imgui.EndMainMenuBar",
    "description":"[C++] void ImGui::EndMainMenuBar()\n\n"
  },
  "imgui.ImGuiInputTextCallbackData":{
    "scope":"lua",
    "body":"new.ImGuiInputTextCallbackData($1)",
    "prefix":"new.ImGuiInputTextCallbackData",
    "description":"typedef struct ImGuiInputTextCallbackData ImGuiInputTextCallbackData\n\n"
  },
  "imgui.ImDrawList_AddQuad":{
    "scope":"lua",
    "body":"ImDrawList:AddQuad(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:col}${6:[, thickness=1.0f]})",
    "prefix":"ImDrawList:AddQuad",
    "description":"[C++] void ImDrawList::AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness=1.0f)\n\n"
  },
  "imgui.ImFontGlyph.U0":{
    "scope":"lua",
    "body":"ImFontGlyph.U0",
    "prefix":"ImFontGlyph.U0",
    "description":"[C++] float ImFontGlyph::U0\n\n"
  },
  "imgui.ImVector_ImDrawIdx_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImDrawIdx:erase_unsorted",
    "description":"[C++] ImDrawIdx* ImVector_ImDrawIdx::erase_unsorted(ImVector_ImDrawIdx* self, ImDrawIdx const * it)\n\n"
  },
  "imgui.igNewFrame":{
    "scope":"lua",
    "body":"imgui.NewFrame()",
    "prefix":"imgui.NewFrame",
    "description":"[C++] void ImGui::NewFrame()\n\n"
  },
  "imgui.ImGuiBackendFlags_None":{
    "scope":"lua",
    "body":"imgui.BackendFlags.None",
    "prefix":"imgui.BackendFlags.None",
    "description":"[C++] ImGuiBackendFlags_None = 0\n\n"
  },
  "imgui.LockPlayer":{
    "scope":"lua",
    "body":"imgui.LockPlayer",
    "prefix":"imgui.LockPlayer",
    "description":"[mimgui variable]\n\nType: bool\n\n"
  },
  "imgui.ImVector_float_resizeT":{
    "scope":"lua",
    "body":"ImVector_float:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_float:resize",
    "description":"[C++] void ImVector_float::resize(ImVector_float* self, int new_size, const float v)\n\n"
  },
  "imgui.igPlotHistogramFnPtr":{
    "scope":"lua",
    "body":"imgui.PlotHistogramFnPtr(${1:label}, ${2:values_getter}, ${3:data}, ${4:values_count}${5:[, values_offset=0]}${6:[, overlay_text=((void*)0)]}${7:[, scale_min=FLT_MAX]}${8:[, scale_max=FLT_MAX]}${9:[, graph_size=ImVec2(0,0)]})",
    "prefix":"imgui.PlotHistogram",
    "description":"[C++] void ImGui::PlotHistogram(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset=0, const char* overlay_text=((void*)0), float scale_min=3.40282346638528859811704183484516925e+38F, float scale_max=3.40282346638528859811704183484516925e+38F, ImVec2 graph_size=ImVec2(0, 0))\n\n"
  },
  "imgui.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF":{
    "scope":"lua",
    "body":"ImFontAtlas:AddFontFromMemoryCompressedBase85TTF(${1:compressed_font_data_base85}, ${2:size_pixels}${3:[, font_cfg=((void*)0)]}${4:[, glyph_ranges=((void*)0)]})",
    "prefix":"ImFontAtlas:AddFontFromMemoryCompressedBase85TTF",
    "description":"[C++] ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg=((void*)0), const ImWchar* glyph_ranges=((void*)0))\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder_AddRanges":{
    "scope":"lua",
    "body":"ImFontGlyphRangesBuilder:AddRanges(${1:ranges})",
    "prefix":"ImFontGlyphRangesBuilder:AddRanges",
    "description":"[C++] void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)\n\n"
  },
  "imgui.ImGuiKey":{
    "scope":"lua",
    "body":"new.ImGuiKey($1)",
    "prefix":"new.ImGuiKey",
    "description":"typedef int ImGuiKey\n\n"
  },
  "imgui.ImDrawCmd.TextureId":{
    "scope":"lua",
    "body":"ImDrawCmd.TextureId",
    "prefix":"ImDrawCmd.TextureId",
    "description":"[C++] ImTextureID ImDrawCmd::TextureId\n\n"
  },
  "imgui.ImVector_empty":{
    "scope":"lua",
    "body":"ImVector:empty()",
    "prefix":"ImVector:empty",
    "description":"[C++] bool ImVector::empty()\n\n"
  },
  "imgui.ImGuiStyleVar_PopupBorderSize":{
    "scope":"lua",
    "body":"imgui.StyleVar.PopupBorderSize",
    "prefix":"imgui.StyleVar.PopupBorderSize",
    "description":"[C++] ImGuiStyleVar_PopupBorderSize = 9\n\n"
  },
  "imgui.igLogToFile":{
    "scope":"lua",
    "body":"imgui.LogToFile(${1:[auto_open_depth=-1]}${2:[, filename=((void*)0)]})",
    "prefix":"imgui.LogToFile",
    "description":"[C++] void ImGui::LogToFile(int auto_open_depth=-1, const char* filename=((void*)0))\n\n"
  },
  "imgui.ImDrawData.CmdLists":{
    "scope":"lua",
    "body":"ImDrawData.CmdLists",
    "prefix":"ImDrawData.CmdLists",
    "description":"[C++] ImDrawList** ImDrawData::CmdLists\n\n"
  },
  "imgui.ImGuiTextRange":{
    "scope":"lua",
    "body":"new.ImGuiTextRange($1)",
    "prefix":"new.ImGuiTextRange",
    "description":"typedef struct ImGuiTextRange ImGuiTextRange\n\n"
  },
  "imgui.ImFontGlyph":{
    "scope":"lua",
    "body":"new.ImFontGlyph($1)",
    "prefix":"new.ImFontGlyph",
    "description":"typedef struct ImFontGlyph ImFontGlyph\n\n"
  },
  "imgui.ImFontAtlas_GetGlyphRangesKorean":{
    "scope":"lua",
    "body":"ImFontAtlas:GetGlyphRangesKorean()",
    "prefix":"ImFontAtlas:GetGlyphRangesKorean",
    "description":"[C++] const ImWchar* ImFontAtlas::GetGlyphRangesKorean()\n\n"
  },
  "imgui.igIsAnyItemFocused":{
    "scope":"lua",
    "body":"imgui.IsAnyItemFocused()",
    "prefix":"imgui.IsAnyItemFocused",
    "description":"[C++] bool ImGui::IsAnyItemFocused()\n\n"
  },
  "imgui.ImFont.FallbackChar":{
    "scope":"lua",
    "body":"ImFont.FallbackChar",
    "prefix":"ImFont.FallbackChar",
    "description":"[C++] ImWchar ImFont::FallbackChar\n\n"
  },
  "imgui.ImDrawList_PrimQuadUV":{
    "scope":"lua",
    "body":"ImDrawList:PrimQuadUV(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:uv_a}, ${6:uv_b}, ${7:uv_c}, ${8:uv_d}, ${9:col})",
    "prefix":"ImDrawList:PrimQuadUV",
    "description":"[C++] void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col)\n\n"
  },
  "imgui.ImDrawListSplitter_Merge":{
    "scope":"lua",
    "body":"ImDrawListSplitter:Merge(${1:draw_list})",
    "prefix":"ImDrawListSplitter:Merge",
    "description":"[C++] void ImDrawListSplitter::Merge(ImDrawList* draw_list)\n\n"
  },
  "imgui.ImVector_ImU32_insert":{
    "scope":"lua",
    "body":"ImVector_ImU32:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImU32:insert",
    "description":"[C++] ImU32* ImVector_ImU32::insert(ImVector_ImU32* self, ImU32 const * it, const ImU32 v)\n\n"
  },
  "imgui.ImGuiNavInput_DpadRight":{
    "scope":"lua",
    "body":"imgui.NavInput.DpadRight",
    "prefix":"imgui.NavInput.DpadRight",
    "description":"[C++] ImGuiNavInput_DpadRight = 5\n\n"
  },
  "imgui.ImVector_ImWchar_begin":{
    "scope":"lua",
    "body":"ImVector_ImWchar:begin()",
    "prefix":"ImVector_ImWchar:begin",
    "description":"[C++] ImWchar* ImVector_ImWchar::begin(ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImVector_push_back":{
    "scope":"lua",
    "body":"ImVector:push_back(${1:v})",
    "prefix":"ImVector:push_back",
    "description":"[C++] void ImVector::push_back(const T& v)\n\n"
  },
  "imgui.ImGuiInputTextCallback":{
    "scope":"lua",
    "body":"new.ImGuiInputTextCallback($1)",
    "prefix":"new.ImGuiInputTextCallback",
    "description":"typedef int(*)(ImGuiInputTextCallbackData *data); ImGuiInputTextCallback\n\n"
  },
  "imgui.ImColor":{
    "scope":"lua",
    "body":"new.ImColor($1)",
    "prefix":"new.ImColor",
    "description":"typedef struct ImColor ImColor\n\n"
  },
  "imgui.ImGuiContext":{
    "scope":"lua",
    "body":"new.ImGuiContext($1)",
    "prefix":"new.ImGuiContext",
    "description":"typedef struct ImGuiContext ImGuiContext\n\n"
  },
  "imgui.ImVector_size":{
    "scope":"lua",
    "body":"ImVector:size()",
    "prefix":"ImVector:size",
    "description":"[C++] int ImVector::size()\n\n"
  },
  "imgui.igIsItemDeactivated":{
    "scope":"lua",
    "body":"imgui.IsItemDeactivated()",
    "prefix":"imgui.IsItemDeactivated",
    "description":"[C++] bool ImGui::IsItemDeactivated()\n\n"
  },
  "imgui.ImGuiTabBarFlags_TabListPopupButton":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.TabListPopupButton",
    "prefix":"imgui.TabBarFlags.TabListPopupButton",
    "description":"[C++] ImGuiTabBarFlags_TabListPopupButton = 1 << 2\n\n"
  },
  "imgui.ImVector_ImTextureID_erase":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:erase(${1:it})",
    "prefix":"ImVector_ImTextureID:erase",
    "description":"[C++] ImTextureID* ImVector_ImTextureID::erase(ImVector_ImTextureID* self, ImTextureID const * it)\n\n"
  },
  "imgui.ImS8":{
    "scope":"lua",
    "body":"new.ImS8($1)",
    "prefix":"new.ImS8",
    "description":"typedef signed char ImS8\n\n"
  },
  "imgui.ImDrawList_AddTriangleFilled":{
    "scope":"lua",
    "body":"ImDrawList:AddTriangleFilled(${1:a}, ${2:b}, ${3:c}, ${4:col})",
    "prefix":"ImDrawList:AddTriangleFilled",
    "description":"[C++] void ImDrawList::AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col)\n\n"
  },
  "imgui.ImFontConfig.FontData":{
    "scope":"lua",
    "body":"ImFontConfig.FontData",
    "prefix":"ImFontConfig.FontData",
    "description":"[C++] void* ImFontConfig::FontData\n\n"
  },
  "imgui.igPopID":{
    "scope":"lua",
    "body":"imgui.PopID()",
    "prefix":"imgui.PopID",
    "description":"[C++] void ImGui::PopID()\n\n"
  },
  "imgui.ImFontAtlas.TexGlyphPadding":{
    "scope":"lua",
    "body":"ImFontAtlas.TexGlyphPadding",
    "prefix":"ImFontAtlas.TexGlyphPadding",
    "description":"[C++] int ImFontAtlas::TexGlyphPadding\n\n"
  },
  "imgui.ImGuiCol_Tab":{
    "scope":"lua",
    "body":"imgui.Col.Tab",
    "prefix":"imgui.Col.Tab",
    "description":"[C++] ImGuiCol_Tab = 33\n\n"
  },
  "imgui.igSliderInt2":{
    "scope":"lua",
    "body":"imgui.SliderInt2(${1:label}, ${2:v}, ${3:v_min}, ${4:v_max}${5:[, format=\"%d\"]})",
    "prefix":"imgui.SliderInt2",
    "description":"[C++] bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format=\"%d\")\n\n"
  },
  "imgui.ImVec4":{
    "scope":"lua",
    "body":"new.ImVec4($1)",
    "prefix":"new.ImVec4",
    "description":"typedef struct ImVec4 ImVec4\n\n"
  },
  "imgui.ImVector_ImDrawCmd_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:pop_back()",
    "prefix":"ImVector_ImDrawCmd:pop_back",
    "description":"[C++] void ImVector_ImDrawCmd::pop_back(ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImVector_char_resize":{
    "scope":"lua",
    "body":"ImVector_char:resize(${1:new_size})",
    "prefix":"ImVector_char:resize",
    "description":"[C++] void ImVector_char::resize(ImVector_char* self, int new_size)\n\n"
  },
  "imgui.ImGuiCol_FrameBg":{
    "scope":"lua",
    "body":"imgui.Col.FrameBg",
    "prefix":"imgui.Col.FrameBg",
    "description":"[C++] ImGuiCol_FrameBg = 7\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:begin_const()",
    "prefix":"ImVector_ImGuiTextRange:begin",
    "description":"[C++] ImGuiTextRange const * ImVector_ImGuiTextRange::begin(const ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImVector_ImDrawVert_ImVector_ImDrawVertVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImDrawVert.ImVector_ImDrawVertVector(${1:src})",
    "prefix":"imgui.ImVector_ImDrawVert.ImVector_ImDrawVert",
    "description":"[C++] ImVector_ImDrawVert(const ImVector_ImDrawVert src)\n\n"
  },
  "imgui.ImDrawVert":{
    "scope":"lua",
    "body":"new.ImDrawVert($1)",
    "prefix":"new.ImDrawVert",
    "description":"typedef struct ImDrawVert ImDrawVert\n\n"
  },
  "imgui.ImGuiInputTextCallbackData_DeleteChars":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData:DeleteChars(${1:pos}, ${2:bytes_count})",
    "prefix":"ImGuiInputTextCallbackData:DeleteChars",
    "description":"[C++] void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)\n\n"
  },
  "imgui.ImVector_ImWchar_erase":{
    "scope":"lua",
    "body":"ImVector_ImWchar:erase(${1:it})",
    "prefix":"ImVector_ImWchar:erase",
    "description":"[C++] ImWchar* ImVector_ImWchar::erase(ImVector_ImWchar* self, ImWchar const * it)\n\n"
  },
  "imgui.ImVector_pop_back":{
    "scope":"lua",
    "body":"ImVector:pop_back()",
    "prefix":"ImVector:pop_back",
    "description":"[C++] void ImVector::pop_back()\n\n"
  },
  "imgui.ImFontAtlas.TexDesiredWidth":{
    "scope":"lua",
    "body":"ImFontAtlas.TexDesiredWidth",
    "prefix":"ImFontAtlas.TexDesiredWidth",
    "description":"[C++] int ImFontAtlas::TexDesiredWidth\n\n"
  },
  "imgui.ImFont_IsLoaded":{
    "scope":"lua",
    "body":"ImFont:IsLoaded()",
    "prefix":"ImFont:IsLoaded",
    "description":"[C++] bool ImFont::IsLoaded()\n\n"
  },
  "imgui.ImS16":{
    "scope":"lua",
    "body":"new.ImS16($1)",
    "prefix":"new.ImS16",
    "description":"typedef signed short ImS16\n\n"
  },
  "imgui.ImGuiComboFlags":{
    "scope":"lua",
    "body":"new.ImGuiComboFlags($1)",
    "prefix":"new.ImGuiComboFlags",
    "description":"typedef int ImGuiComboFlags\n\n"
  },
  "imgui.ImDrawIdx":{
    "scope":"lua",
    "body":"new.ImDrawIdx($1)",
    "prefix":"new.ImDrawIdx",
    "description":"typedef unsigned short ImDrawIdx\n\n"
  },
  "imgui.ImGuiTextFilter":{
    "scope":"lua",
    "body":"new.ImGuiTextFilter($1)",
    "prefix":"new.ImGuiTextFilter",
    "description":"typedef struct ImGuiTextFilter ImGuiTextFilter\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_back":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:back()",
    "prefix":"ImVector_ImGuiTextRange:back",
    "description":"[C++] ImGuiTextRange* ImVector_ImGuiTextRange::back(ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImGuiCol_FrameBgActive":{
    "scope":"lua",
    "body":"imgui.Col.FrameBgActive",
    "prefix":"imgui.Col.FrameBgActive",
    "description":"[C++] ImGuiCol_FrameBgActive = 9\n\n"
  },
  "imgui.igIsRectVisible":{
    "scope":"lua",
    "body":"imgui.IsRectVisible(${1:size})",
    "prefix":"imgui.IsRectVisible",
    "description":"[C++] bool ImGui::IsRectVisible(const ImVec2& size)\n\n"
  },
  "imgui.ImFontAtlas_GetGlyphRangesDefault":{
    "scope":"lua",
    "body":"ImFontAtlas:GetGlyphRangesDefault()",
    "prefix":"ImFontAtlas:GetGlyphRangesDefault",
    "description":"[C++] const ImWchar* ImFontAtlas::GetGlyphRangesDefault()\n\n"
  },
  "imgui.ImGuiTextBuffer_ImGuiTextBuffer":{
    "scope":"lua",
    "body":"imgui.ImGuiTextBuffer()",
    "prefix":"imgui.ImGuiTextBuffer",
    "description":"[C++] ImGuiTextBuffer()\n\n"
  },
  "imgui.ImVector_float_contains":{
    "scope":"lua",
    "body":"ImVector_float:contains(${1:v})",
    "prefix":"ImVector_float:contains",
    "description":"[C++] bool ImVector_float::contains(const ImVector_float* self, const float v)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_ImVector_ImGuiTextRange":{
    "scope":"lua",
    "body":"imgui.ImVector_ImGuiTextRange()",
    "prefix":"imgui.ImVector_ImGuiTextRange",
    "description":"[C++] ImVector_ImGuiTextRange()\n\n"
  },
  "imgui.ImGuiOnceUponAFrame":{
    "scope":"lua",
    "body":"new.ImGuiOnceUponAFrame($1)",
    "prefix":"new.ImGuiOnceUponAFrame",
    "description":"typedef struct ImGuiOnceUponAFrame ImGuiOnceUponAFrame\n\n"
  },
  "imgui.ImGuiIO.MouseClickedTime[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseClickedTime[5]",
    "prefix":"ImGuiIO.MouseClickedTime[5]",
    "description":"[C++] double ImGuiIO::MouseClickedTime[5]\n\n"
  },
  "imgui.ImGuiFocusedFlags_RootWindow":{
    "scope":"lua",
    "body":"imgui.FocusedFlags.RootWindow",
    "prefix":"imgui.FocusedFlags.RootWindow",
    "description":"[C++] ImGuiFocusedFlags_RootWindow = 1 << 1\n\n"
  },
  "imgui.ImGuiDir":{
    "scope":"lua",
    "body":"new.ImGuiDir($1)",
    "prefix":"new.ImGuiDir",
    "description":"typedef int ImGuiDir\n\n"
  },
  "imgui.ImGuiStyleVar":{
    "scope":"lua",
    "body":"new.ImGuiStyleVar($1)",
    "prefix":"new.ImGuiStyleVar",
    "description":"typedef int ImGuiStyleVar\n\n"
  },
  "imgui.ImFontGlyph.Y0":{
    "scope":"lua",
    "body":"ImFontGlyph.Y0",
    "prefix":"ImFontGlyph.Y0",
    "description":"[C++] float ImFontGlyph::Y0\n\n"
  },
  "imgui.ImDrawListSharedData":{
    "scope":"lua",
    "body":"new.ImDrawListSharedData($1)",
    "prefix":"new.ImDrawListSharedData",
    "description":"typedef struct ImDrawListSharedData ImDrawListSharedData\n\n"
  },
  "imgui.ImVector_float_begin_const":{
    "scope":"lua",
    "body":"ImVector_float:begin_const()",
    "prefix":"ImVector_float:begin",
    "description":"[C++] float const * ImVector_float::begin(const ImVector_float* self)\n\n"
  },
  "imgui.igPushIDInt":{
    "scope":"lua",
    "body":"imgui.PushIDInt(${1:int_id})",
    "prefix":"imgui.PushID",
    "description":"[C++] void ImGui::PushID(int int_id)\n\n"
  },
  "imgui.ImDrawList":{
    "scope":"lua",
    "body":"new.ImDrawList($1)",
    "prefix":"new.ImDrawList",
    "description":"typedef struct ImDrawList ImDrawList\n\n"
  },
  "imgui.ImVec4.w":{
    "scope":"lua",
    "body":"ImVec4.w",
    "prefix":"ImVec4.w",
    "description":"[C++] float ImVec4::w\n\n"
  },
  "imgui.ImU64":{
    "scope":"lua",
    "body":"new.ImU64($1)",
    "prefix":"new.ImU64",
    "description":"typedef uint64_t ImU64\n\n"
  },
  "imgui.ImGuiHoveredFlags":{
    "scope":"lua",
    "body":"new.ImGuiHoveredFlags($1)",
    "prefix":"new.ImGuiHoveredFlags",
    "description":"typedef int ImGuiHoveredFlags\n\n"
  },
  "imgui.igGetWindowPos":{
    "scope":"lua",
    "body":"imgui.GetWindowPos()",
    "prefix":"imgui.GetWindowPos",
    "description":"[C++] ImVec2 ImGui::GetWindowPos()\n\n"
  },
  "imgui.ImFontAtlas_AddFontDefault":{
    "scope":"lua",
    "body":"ImFontAtlas:AddFontDefault(${1:[font_cfg=((void*)0)]})",
    "prefix":"ImFontAtlas:AddFontDefault",
    "description":"[C++] ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg=((void*)0))\n\n"
  },
  "imgui.ImGuiFocusedFlags":{
    "scope":"lua",
    "body":"new.ImGuiFocusedFlags($1)",
    "prefix":"new.ImGuiFocusedFlags",
    "description":"typedef int ImGuiFocusedFlags\n\n"
  },
  "imgui.ImDrawListSplitter._Current":{
    "scope":"lua",
    "body":"ImDrawListSplitter._Current",
    "prefix":"ImDrawListSplitter._Current",
    "description":"[C++] int ImDrawListSplitter::_Current\n\n"
  },
  "imgui.ImGuiTextRange_empty":{
    "scope":"lua",
    "body":"ImGuiTextRange:empty()",
    "prefix":"ImGuiTextRange:empty",
    "description":"[C++] bool ImGuiTextRange::empty()\n\n"
  },
  "imgui.ImVector_ImFontConfig_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:size_in_bytes()",
    "prefix":"ImVector_ImFontConfig:size_in_bytes",
    "description":"[C++] int ImVector_ImFontConfig::size_in_bytes(const ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImVector_ImTextureID_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:pop_back()",
    "prefix":"ImVector_ImTextureID:pop_back",
    "description":"[C++] void ImVector_ImTextureID::pop_back(ImVector_ImTextureID* self)\n\n"
  },
  "imgui.igSaveIniSettingsToDisk":{
    "scope":"lua",
    "body":"imgui.SaveIniSettingsToDisk(${1:ini_filename})",
    "prefix":"imgui.SaveIniSettingsToDisk",
    "description":"[C++] void ImGui::SaveIniSettingsToDisk(const char* ini_filename)\n\n"
  },
  "imgui.ImGuiPayload.Preview":{
    "scope":"lua",
    "body":"ImGuiPayload.Preview",
    "prefix":"ImGuiPayload.Preview",
    "description":"[C++] bool ImGuiPayload::Preview\n\n"
  },
  "imgui.ImU16":{
    "scope":"lua",
    "body":"new.ImU16($1)",
    "prefix":"new.ImU16",
    "description":"typedef unsigned short ImU16\n\n"
  },
  "imgui.ImS32":{
    "scope":"lua",
    "body":"new.ImS32($1)",
    "prefix":"new.ImS32",
    "description":"typedef signed int ImS32\n\n"
  },
  "imgui.igPushFont":{
    "scope":"lua",
    "body":"imgui.PushFont(${1:font})",
    "prefix":"imgui.PushFont",
    "description":"[C++] void ImGui::PushFont(ImFont* font)\n\n"
  },
  "imgui.ImDrawList_CloneOutput":{
    "scope":"lua",
    "body":"ImDrawList:CloneOutput()",
    "prefix":"ImDrawList:CloneOutput",
    "description":"[C++] ImDrawList* ImDrawList::CloneOutput()\n\n"
  },
  "imgui.ImVector_char_clear":{
    "scope":"lua",
    "body":"ImVector_char:clear()",
    "prefix":"ImVector_char:clear",
    "description":"[C++] void ImVector_char::clear(ImVector_char* self)\n\n"
  },
  "imgui.ImVector_float_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_float:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_float:erase",
    "description":"[C++] float* ImVector_float::erase(ImVector_float* self, float const * it, float const * it_last)\n\n"
  },
  "imgui.ImGuiPayload_IsPreview":{
    "scope":"lua",
    "body":"ImGuiPayload:IsPreview()",
    "prefix":"ImGuiPayload:IsPreview",
    "description":"[C++] bool ImGuiPayload::IsPreview()\n\n"
  },
  "imgui.ImGuiStorage_GetBool":{
    "scope":"lua",
    "body":"ImGuiStorage:GetBool(${1:key}${2:[, default_val=false]})",
    "prefix":"ImGuiStorage:GetBool",
    "description":"[C++] bool ImGuiStorage::GetBool(ImGuiID key, bool default_val=false)\n\n"
  },
  "imgui.igBeginGroup":{
    "scope":"lua",
    "body":"imgui.BeginGroup()",
    "prefix":"imgui.BeginGroup",
    "description":"[C++] void ImGui::BeginGroup()\n\n"
  },
  "imgui.ImVector_ImFontGlyph_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImFontGlyph:erase",
    "description":"[C++] ImFontGlyph* ImVector_ImFontGlyph::erase(ImVector_ImFontGlyph* self, ImFontGlyph const * it, ImFontGlyph const * it_last)\n\n"
  },
  "imgui.ImGuiStyle.ColorButtonPosition":{
    "scope":"lua",
    "body":"ImGuiStyle.ColorButtonPosition",
    "prefix":"ImGuiStyle.ColorButtonPosition",
    "description":"[C++] ImGuiDir ImGuiStyle::ColorButtonPosition\n\n"
  },
  "imgui.ImFontAtlasFlags_NoPowerOfTwoHeight":{
    "scope":"lua",
    "body":"imgui.FontAtlasFlags.NoPowerOfTwoHeight",
    "prefix":"imgui.FontAtlasFlags.NoPowerOfTwoHeight",
    "description":"[C++] ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0\n\n"
  },
  "imgui.ImFontGlyph.V1":{
    "scope":"lua",
    "body":"ImFontGlyph.V1",
    "prefix":"ImFontGlyph.V1",
    "description":"[C++] float ImFontGlyph::V1\n\n"
  },
  "imgui.ImVector_ImDrawCmd_begin":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:begin()",
    "prefix":"ImVector_ImDrawCmd:begin",
    "description":"[C++] ImDrawCmd* ImVector_ImDrawCmd::begin(ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImFontGlyph.V0":{
    "scope":"lua",
    "body":"ImFontGlyph.V0",
    "prefix":"ImFontGlyph.V0",
    "description":"[C++] float ImFontGlyph::V0\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_clear":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:clear()",
    "prefix":"ImVector_ImFontAtlasCustomRect:clear",
    "description":"[C++] void ImVector_ImFontAtlasCustomRect::clear(ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImFontGlyph.X1":{
    "scope":"lua",
    "body":"ImFontGlyph.X1",
    "prefix":"ImFontGlyph.X1",
    "description":"[C++] float ImFontGlyph::X1\n\n"
  },
  "imgui.ImFontGlyph.X0":{
    "scope":"lua",
    "body":"ImFontGlyph.X0",
    "prefix":"ImFontGlyph.X0",
    "description":"[C++] float ImFontGlyph::X0\n\n"
  },
  "imgui.ImFontGlyph.AdvanceX":{
    "scope":"lua",
    "body":"ImFontGlyph.AdvanceX",
    "prefix":"ImFontGlyph.AdvanceX",
    "description":"[C++] float ImFontGlyph::AdvanceX\n\n"
  },
  "imgui.igCreateContext":{
    "scope":"lua",
    "body":"imgui.CreateContext(${1:[shared_font_atlas=((void*)0)]})",
    "prefix":"imgui.CreateContext",
    "description":"[C++] ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas=((void*)0))\n\n"
  },
  "imgui.ImGuiColorEditFlags__PickerMask":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags._PickerMask",
    "prefix":"imgui.ColorEditFlags._PickerMask",
    "description":"[C++] ImGuiColorEditFlags__PickerMask = ImGuiColorEditFlags_PickerHueWheel|ImGuiColorEditFlags_PickerHueBar\n\n"
  },
  "imgui.ImFontGlyph.Codepoint":{
    "scope":"lua",
    "body":"ImFontGlyph.Codepoint",
    "prefix":"ImFontGlyph.Codepoint",
    "description":"[C++] ImWchar ImFontGlyph::Codepoint\n\n"
  },
  "imgui.ImVec4.z":{
    "scope":"lua",
    "body":"ImVec4.z",
    "prefix":"ImVec4.z",
    "description":"[C++] float ImVec4::z\n\n"
  },
  "imgui.ImGuiTextRange_split":{
    "scope":"lua",
    "body":"ImGuiTextRange:split(${1:separator}, ${2:out})",
    "prefix":"ImGuiTextRange:split",
    "description":"[C++] void ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out)\n\n"
  },
  "imgui.ImGuiTextFilter.Filters":{
    "scope":"lua",
    "body":"ImGuiTextFilter.Filters",
    "prefix":"ImGuiTextFilter.Filters",
    "description":"[C++] ImVector_ImGuiTextRange ImGuiTextFilter::Filters\n\n"
  },
  "imgui.ImDrawData.DisplaySize":{
    "scope":"lua",
    "body":"ImDrawData.DisplaySize",
    "prefix":"ImDrawData.DisplaySize",
    "description":"[C++] ImVec2 ImDrawData::DisplaySize\n\n"
  },
  "imgui.ImGuiCol_NavWindowingHighlight":{
    "scope":"lua",
    "body":"imgui.Col.NavWindowingHighlight",
    "prefix":"imgui.Col.NavWindowingHighlight",
    "description":"[C++] ImGuiCol_NavWindowingHighlight = 45\n\n"
  },
  "imgui.ImGuiSizeCallbackData.DesiredSize":{
    "scope":"lua",
    "body":"ImGuiSizeCallbackData.DesiredSize",
    "prefix":"ImGuiSizeCallbackData.DesiredSize",
    "description":"[C++] ImVec2 ImGuiSizeCallbackData::DesiredSize\n\n"
  },
  "imgui.ImVector_ImU32_ImVector_ImU32":{
    "scope":"lua",
    "body":"imgui.ImVector_ImU32()",
    "prefix":"imgui.ImVector_ImU32",
    "description":"[C++] ImVector_ImU32()\n\n"
  },
  "imgui.ImDrawList_PathLineTo":{
    "scope":"lua",
    "body":"ImDrawList:PathLineTo(${1:pos})",
    "prefix":"ImDrawList:PathLineTo",
    "description":"[C++] void ImDrawList::PathLineTo(const ImVec2& pos)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_swap":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:swap(${1:rhs})",
    "prefix":"ImVector_ImFontGlyph:swap",
    "description":"[C++] void ImVector_ImFontGlyph::swap(ImVector_ImFontGlyph* self, ImVector_ImFontGlyph rhs)\n\n"
  },
  "imgui.ImVector_char_end":{
    "scope":"lua",
    "body":"ImVector_char:_end()",
    "prefix":"ImVector_char:end",
    "description":"[C++] char* ImVector_char::end(ImVector_char* self)\n\n"
  },
  "imgui.ImDrawList_ChannelsMerge":{
    "scope":"lua",
    "body":"ImDrawList:ChannelsMerge()",
    "prefix":"ImDrawList:ChannelsMerge",
    "description":"[C++] void ImDrawList::ChannelsMerge()\n\n"
  },
  "imgui.ImGuiSizeCallbackData.CurrentSize":{
    "scope":"lua",
    "body":"ImGuiSizeCallbackData.CurrentSize",
    "prefix":"ImGuiSizeCallbackData.CurrentSize",
    "description":"[C++] ImVec2 ImGuiSizeCallbackData::CurrentSize\n\n"
  },
  "imgui.ImVector_ImDrawCmd_back_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:back_const()",
    "prefix":"ImVector_ImDrawCmd:back",
    "description":"[C++] ImDrawCmd const * ImVector_ImDrawCmd::back(const ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImGuiSizeCallbackData.Pos":{
    "scope":"lua",
    "body":"ImGuiSizeCallbackData.Pos",
    "prefix":"ImGuiSizeCallbackData.Pos",
    "description":"[C++] ImVec2 ImGuiSizeCallbackData::Pos\n\n"
  },
  "imgui.ImVector_resize":{
    "scope":"lua",
    "body":"ImVector:resize(${1:new_size})",
    "prefix":"ImVector:resize",
    "description":"[C++] void ImVector::resize(int new_size)\n\n"
  },
  "imgui.ImFontAtlas_GetTexDataAsRGBA32":{
    "scope":"lua",
    "body":"ImFontAtlas:GetTexDataAsRGBA32(${1:out_pixels}, ${2:out_width}, ${3:out_height}${4:[, out_bytes_per_pixel=((void*)0)]})",
    "prefix":"ImFontAtlas:GetTexDataAsRGBA32",
    "description":"[C++] void ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel=((void*)0))\n\n"
  },
  "imgui.ImGuiSizeCallbackData.UserData":{
    "scope":"lua",
    "body":"ImGuiSizeCallbackData.UserData",
    "prefix":"ImGuiSizeCallbackData.UserData",
    "description":"[C++] void* ImGuiSizeCallbackData::UserData\n\n"
  },
  "imgui.ImDrawCmd.UserCallbackData":{
    "scope":"lua",
    "body":"ImDrawCmd.UserCallbackData",
    "prefix":"ImDrawCmd.UserCallbackData",
    "description":"[C++] void* ImDrawCmd::UserCallbackData\n\n"
  },
  "imgui.ImVector_ImWchar_back_const":{
    "scope":"lua",
    "body":"ImVector_ImWchar:back_const()",
    "prefix":"ImVector_ImWchar:back",
    "description":"[C++] ImWchar const * ImVector_ImWchar::back(const ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImVector_ImTextureID_push_front":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:push_front(${1:v})",
    "prefix":"ImVector_ImTextureID:push_front",
    "description":"[C++] void ImVector_ImTextureID::push_front(ImVector_ImTextureID* self, const ImTextureID v)\n\n"
  },
  "imgui.igGetFontSize":{
    "scope":"lua",
    "body":"imgui.GetFontSize()",
    "prefix":"imgui.GetFontSize",
    "description":"[C++] float ImGui::GetFontSize()\n\n"
  },
  "imgui.ImDrawCmd.UserCallback":{
    "scope":"lua",
    "body":"ImDrawCmd.UserCallback",
    "prefix":"ImDrawCmd.UserCallback",
    "description":"[C++] ImDrawCallback ImDrawCmd::UserCallback\n\n"
  },
  "imgui.ImGuiCol_TextDisabled":{
    "scope":"lua",
    "body":"imgui.Col.TextDisabled",
    "prefix":"imgui.Col.TextDisabled",
    "description":"[C++] ImGuiCol_TextDisabled = 1\n\n"
  },
  "imgui.ImDrawCmd.IdxOffset":{
    "scope":"lua",
    "body":"ImDrawCmd.IdxOffset",
    "prefix":"ImDrawCmd.IdxOffset",
    "description":"[C++] unsigned int ImDrawCmd::IdxOffset\n\n"
  },
  "imgui.ImGuiKey_UpArrow":{
    "scope":"lua",
    "body":"imgui.Key.UpArrow",
    "prefix":"imgui.Key.UpArrow",
    "description":"[C++] ImGuiKey_UpArrow = 3\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.SelectionEnd":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.SelectionEnd",
    "prefix":"ImGuiInputTextCallbackData.SelectionEnd",
    "description":"[C++] int ImGuiInputTextCallbackData::SelectionEnd\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.SelectionStart":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.SelectionStart",
    "prefix":"ImGuiInputTextCallbackData.SelectionStart",
    "description":"[C++] int ImGuiInputTextCallbackData::SelectionStart\n\n"
  },
  "imgui.ImGuiStyleVar_TabRounding":{
    "scope":"lua",
    "body":"imgui.StyleVar.TabRounding",
    "prefix":"imgui.StyleVar.TabRounding",
    "description":"[C++] ImGuiStyleVar_TabRounding = 20\n\n"
  },
  "imgui.ImVector_ImDrawVert_ImVector_ImDrawVert":{
    "scope":"lua",
    "body":"imgui.ImVector_ImDrawVert()",
    "prefix":"imgui.ImVector_ImDrawVert",
    "description":"[C++] ImVector_ImDrawVert()\n\n"
  },
  "imgui.ImGuiSelectableFlags_Disabled":{
    "scope":"lua",
    "body":"imgui.SelectableFlags.Disabled",
    "prefix":"imgui.SelectableFlags.Disabled",
    "description":"[C++] ImGuiSelectableFlags_Disabled = 1 << 3\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.UserData":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.UserData",
    "prefix":"ImGuiInputTextCallbackData.UserData",
    "description":"[C++] void* ImGuiInputTextCallbackData::UserData\n\n"
  },
  "imgui.ImVector_ImFontPtr_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:begin_const()",
    "prefix":"ImVector_ImFontPtr:begin",
    "description":"[C++] ImFont* const * ImVector_ImFontPtr::begin(const ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder_BuildRanges":{
    "scope":"lua",
    "body":"ImFontGlyphRangesBuilder:BuildRanges(${1:out_ranges})",
    "prefix":"ImFontGlyphRangesBuilder:BuildRanges",
    "description":"[C++] void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImDrawIdx:resize",
    "description":"[C++] void ImVector_ImDrawIdx::resize(ImVector_ImDrawIdx* self, int new_size, const ImDrawIdx v)\n\n"
  },
  "imgui.ImVector_ImU32_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImU32:size_in_bytes()",
    "prefix":"ImVector_ImU32:size_in_bytes",
    "description":"[C++] int ImVector_ImU32::size_in_bytes(const ImVector_ImU32* self)\n\n"
  },
  "imgui.ImGuiTextFilter_Draw":{
    "scope":"lua",
    "body":"ImGuiTextFilter:Draw(${1:[label=\"Filter(inc,-exc)\"]}${2:[, width=0.0f]})",
    "prefix":"ImGuiTextFilter:Draw",
    "description":"[C++] bool ImGuiTextFilter::Draw(const char* label=\"Filter(inc, -exc)\", float width=0.0f)\n\n"
  },
  "imgui.ImDrawList._VtxWritePtr":{
    "scope":"lua",
    "body":"ImDrawList._VtxWritePtr",
    "prefix":"ImDrawList._VtxWritePtr",
    "description":"[C++] ImDrawVert* ImDrawList::_VtxWritePtr\n\n"
  },
  "imgui.ImVector_ImDrawChannel_ImVector_ImDrawChannel":{
    "scope":"lua",
    "body":"imgui.ImVector_ImDrawChannel()",
    "prefix":"imgui.ImVector_ImDrawChannel",
    "description":"[C++] ImVector_ImDrawChannel()\n\n"
  },
  "imgui._VERSION":{
    "scope":"lua",
    "body":"imgui._VERSION",
    "prefix":"imgui._VERSION",
    "description":"[mimgui variable]\n\nType: string\n\n"
  },
  "imgui.ImGuiComboFlags_PopupAlignLeft":{
    "scope":"lua",
    "body":"imgui.ComboFlags.PopupAlignLeft",
    "prefix":"imgui.ComboFlags.PopupAlignLeft",
    "description":"[C++] ImGuiComboFlags_PopupAlignLeft = 1 << 0\n\n"
  },
  "imgui.igSetItemAllowOverlap":{
    "scope":"lua",
    "body":"imgui.SetItemAllowOverlap()",
    "prefix":"imgui.SetItemAllowOverlap",
    "description":"[C++] void ImGui::SetItemAllowOverlap()\n\n"
  },
  "imgui.ImFontAtlas.CustomRects":{
    "scope":"lua",
    "body":"ImFontAtlas.CustomRects",
    "prefix":"ImFontAtlas.CustomRects",
    "description":"[C++] ImVector_ImFontAtlasCustomRect ImFontAtlas::CustomRects\n\n"
  },
  "imgui.igVSliderFloat":{
    "scope":"lua",
    "body":"imgui.VSliderFloat(${1:label}, ${2:size}, ${3:v}, ${4:v_min}, ${5:v_max}${6:[, format=\"%.3f\"]}${7:[, power=1.0f]})",
    "prefix":"imgui.VSliderFloat",
    "description":"[C++] bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.ImFontAtlas.Fonts":{
    "scope":"lua",
    "body":"ImFontAtlas.Fonts",
    "prefix":"ImFontAtlas.Fonts",
    "description":"[C++] ImVector_ImFontPtr ImFontAtlas::Fonts\n\n"
  },
  "imgui.ImGuiColorEditFlags_HDR":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.HDR",
    "prefix":"imgui.ColorEditFlags.HDR",
    "description":"[C++] ImGuiColorEditFlags_HDR = 1 << 19\n\n"
  },
  "imgui.igPushTextWrapPos":{
    "scope":"lua",
    "body":"imgui.PushTextWrapPos(${1:[wrap_local_pos_x=0.0f]})",
    "prefix":"imgui.PushTextWrapPos",
    "description":"[C++] void ImGui::PushTextWrapPos(float wrap_local_pos_x=0.0f)\n\n"
  },
  "imgui.ImFontAtlas.TexUvWhitePixel":{
    "scope":"lua",
    "body":"ImFontAtlas.TexUvWhitePixel",
    "prefix":"ImFontAtlas.TexUvWhitePixel",
    "description":"[C++] ImVec2 ImFontAtlas::TexUvWhitePixel\n\n"
  },
  "imgui.ImGuiWindowFlags_NoDecoration":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoDecoration",
    "prefix":"imgui.WindowFlags.NoDecoration",
    "description":"[C++] ImGuiWindowFlags_NoDecoration = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse\n\n"
  },
  "imgui.ImVector_ImDrawCmd_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:back()",
    "prefix":"ImVector_ImDrawCmd:back",
    "description":"[C++] ImDrawCmd* ImVector_ImDrawCmd::back(ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImDrawList_AddText":{
    "scope":"lua",
    "body":"ImDrawList:AddText(${1:pos}, ${2:col}, ${3:text_begin}${4:[, text_end=((void*)0)]})",
    "prefix":"ImDrawList:AddText",
    "description":"[C++] void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end=((void*)0))\n\n"
  },
  "imgui.ImFontAtlas.TexWidth":{
    "scope":"lua",
    "body":"ImFontAtlas.TexWidth",
    "prefix":"ImFontAtlas.TexWidth",
    "description":"[C++] int ImFontAtlas::TexWidth\n\n"
  },
  "imgui.ImGuiKey_V":{
    "scope":"lua",
    "body":"imgui.Key.V",
    "prefix":"imgui.Key.V",
    "description":"[C++] ImGuiKey_V = 18\n\n"
  },
  "imgui.ImGuiCol_Header":{
    "scope":"lua",
    "body":"imgui.Col.Header",
    "prefix":"imgui.Col.Header",
    "description":"[C++] ImGuiCol_Header = 24\n\n"
  },
  "imgui.ImGuiStorage.Data":{
    "scope":"lua",
    "body":"ImGuiStorage.Data",
    "prefix":"ImGuiStorage.Data",
    "description":"[C++] ImVector_ImGuiStoragePair ImGuiStorage::Data\n\n"
  },
  "imgui.ImVector_ImDrawVert_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:pop_back()",
    "prefix":"ImVector_ImDrawVert:pop_back",
    "description":"[C++] void ImVector_ImDrawVert::pop_back(ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImGuiConfigFlags":{
    "scope":"lua",
    "body":"new.ImGuiConfigFlags($1)",
    "prefix":"new.ImGuiConfigFlags",
    "description":"typedef int ImGuiConfigFlags\n\n"
  },
  "imgui.ImGuiFocusedFlags_RootAndChildWindows":{
    "scope":"lua",
    "body":"imgui.FocusedFlags.RootAndChildWindows",
    "prefix":"imgui.FocusedFlags.RootAndChildWindows",
    "description":"[C++] ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows\n\n"
  },
  "imgui.ImGuiStyle.AntiAliasedLines":{
    "scope":"lua",
    "body":"ImGuiStyle.AntiAliasedLines",
    "prefix":"ImGuiStyle.AntiAliasedLines",
    "description":"[C++] bool ImGuiStyle::AntiAliasedLines\n\n"
  },
  "imgui.ImFontAtlas.Locked":{
    "scope":"lua",
    "body":"ImFontAtlas.Locked",
    "prefix":"ImFontAtlas.Locked",
    "description":"[C++] bool ImFontAtlas::Locked\n\n"
  },
  "imgui.ImGuiFocusedFlags_ChildWindows":{
    "scope":"lua",
    "body":"imgui.FocusedFlags.ChildWindows",
    "prefix":"imgui.FocusedFlags.ChildWindows",
    "description":"[C++] ImGuiFocusedFlags_ChildWindows = 1 << 0\n\n"
  },
  "imgui.igGetClipboardText":{
    "scope":"lua",
    "body":"imgui.GetClipboardText()",
    "prefix":"imgui.GetClipboardText",
    "description":"[C++] const char* ImGui::GetClipboardText()\n\n"
  },
  "imgui.ImGuiDataType_U8":{
    "scope":"lua",
    "body":"imgui.DataType.U8",
    "prefix":"imgui.DataType.U8",
    "description":"[C++] ImGuiDataType_U8 = 1\n\n"
  },
  "imgui.ImColor.Value":{
    "scope":"lua",
    "body":"ImColor.Value",
    "prefix":"ImColor.Value",
    "description":"[C++] ImVec4 ImColor::Value\n\n"
  },
  "imgui.ImDrawData.FramebufferScale":{
    "scope":"lua",
    "body":"ImDrawData.FramebufferScale",
    "prefix":"ImDrawData.FramebufferScale",
    "description":"[C++] ImVec2 ImDrawData::FramebufferScale\n\n"
  },
  "imgui.ImGuiTextFilter.InputBuf[256]":{
    "scope":"lua",
    "body":"ImGuiTextFilter.InputBuf[256]",
    "prefix":"ImGuiTextFilter.InputBuf[256]",
    "description":"[C++] char ImGuiTextFilter::InputBuf[256]\n\n"
  },
  "imgui.igSetItemDefaultFocus":{
    "scope":"lua",
    "body":"imgui.SetItemDefaultFocus()",
    "prefix":"imgui.SetItemDefaultFocus",
    "description":"[C++] void ImGui::SetItemDefaultFocus()\n\n"
  },
  "imgui.igGetCursorPos":{
    "scope":"lua",
    "body":"imgui.GetCursorPos()",
    "prefix":"imgui.GetCursorPos",
    "description":"[C++] ImVec2 ImGui::GetCursorPos()\n\n"
  },
  "imgui.ImDrawData.DisplayPos":{
    "scope":"lua",
    "body":"ImDrawData.DisplayPos",
    "prefix":"ImDrawData.DisplayPos",
    "description":"[C++] ImVec2 ImDrawData::DisplayPos\n\n"
  },
  "imgui.igIsKeyDown":{
    "scope":"lua",
    "body":"imgui.IsKeyDown(${1:user_key_index})",
    "prefix":"imgui.IsKeyDown",
    "description":"[C++] bool ImGui::IsKeyDown(int user_key_index)\n\n"
  },
  "imgui.ImDrawList_PathStroke":{
    "scope":"lua",
    "body":"ImDrawList:PathStroke(${1:col}, ${2:closed}${3:[, thickness=1.0f]})",
    "prefix":"ImDrawList:PathStroke",
    "description":"[C++] void ImDrawList::PathStroke(ImU32 col, bool closed, float thickness=1.0f)\n\n"
  },
  "imgui.ImGuiNavInput_KeyUp_":{
    "scope":"lua",
    "body":"imgui.NavInput.KeyUp_",
    "prefix":"imgui.NavInput.KeyUp_",
    "description":"[C++] ImGuiNavInput_KeyUp_ = 20\n\n"
  },
  "imgui.igIsMouseDragging":{
    "scope":"lua",
    "body":"imgui.IsMouseDragging(${1:[button=0]}${2:[, lock_threshold=-1.0f]})",
    "prefix":"imgui.IsMouseDragging",
    "description":"[C++] bool ImGui::IsMouseDragging(int button=0, float lock_threshold=-1.0f)\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder_SetBit":{
    "scope":"lua",
    "body":"ImFontGlyphRangesBuilder:SetBit(${1:n})",
    "prefix":"ImFontGlyphRangesBuilder:SetBit",
    "description":"[C++] void ImFontGlyphRangesBuilder::SetBit(int n)\n\n"
  },
  "imgui.ImDrawData.TotalVtxCount":{
    "scope":"lua",
    "body":"ImDrawData.TotalVtxCount",
    "prefix":"ImDrawData.TotalVtxCount",
    "description":"[C++] int ImDrawData::TotalVtxCount\n\n"
  },
  "imgui.ImDrawData.TotalIdxCount":{
    "scope":"lua",
    "body":"ImDrawData.TotalIdxCount",
    "prefix":"ImDrawData.TotalIdxCount",
    "description":"[C++] int ImDrawData::TotalIdxCount\n\n"
  },
  "imgui.ImDrawData.CmdListsCount":{
    "scope":"lua",
    "body":"ImDrawData.CmdListsCount",
    "prefix":"ImDrawData.CmdListsCount",
    "description":"[C++] int ImDrawData::CmdListsCount\n\n"
  },
  "imgui.ImDrawListSplitter_ImDrawListSplitter":{
    "scope":"lua",
    "body":"imgui.ImDrawListSplitter()",
    "prefix":"imgui.ImDrawListSplitter",
    "description":"[C++] ImDrawListSplitter()\n\n"
  },
  "imgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.NoCloseWithMiddleMouseButton",
    "prefix":"imgui.TabBarFlags.NoCloseWithMiddleMouseButton",
    "description":"[C++] ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 1 << 3\n\n"
  },
  "imgui.ImGuiInputTextFlags_CharsNoBlank":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CharsNoBlank",
    "prefix":"imgui.InputTextFlags.CharsNoBlank",
    "description":"[C++] ImGuiInputTextFlags_CharsNoBlank = 1 << 3\n\n"
  },
  "imgui.ImGuiPayload.Delivery":{
    "scope":"lua",
    "body":"ImGuiPayload.Delivery",
    "prefix":"ImGuiPayload.Delivery",
    "description":"[C++] bool ImGuiPayload::Delivery\n\n"
  },
  "imgui.ImGuiPayload.DataType[32+1]":{
    "scope":"lua",
    "body":"ImGuiPayload.DataType[32+1]",
    "prefix":"ImGuiPayload.DataType[32+1]",
    "description":"[C++] char ImGuiPayload::DataType[32+1]\n\n"
  },
  "imgui.ImVector_ImDrawCmd_ImVector_ImDrawCmd":{
    "scope":"lua",
    "body":"imgui.ImVector_ImDrawCmd()",
    "prefix":"imgui.ImVector_ImDrawCmd",
    "description":"[C++] ImVector_ImDrawCmd()\n\n"
  },
  "imgui.ImVector_ImVec4_push_front":{
    "scope":"lua",
    "body":"ImVector_ImVec4:push_front(${1:v})",
    "prefix":"ImVector_ImVec4:push_front",
    "description":"[C++] void ImVector_ImVec4::push_front(ImVector_ImVec4* self, const ImVec4 v)\n\n"
  },
  "imgui.ImGuiPayload.SourceId":{
    "scope":"lua",
    "body":"ImGuiPayload.SourceId",
    "prefix":"ImGuiPayload.SourceId",
    "description":"[C++] ImGuiID ImGuiPayload::SourceId\n\n"
  },
  "imgui.ImDrawList_PrimRect":{
    "scope":"lua",
    "body":"ImDrawList:PrimRect(${1:a}, ${2:b}, ${3:col})",
    "prefix":"ImDrawList:PrimRect",
    "description":"[C++] void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:back()",
    "prefix":"ImVector_ImDrawIdx:back",
    "description":"[C++] ImDrawIdx* ImVector_ImDrawIdx::back(ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImGuiTextBuffer_appendfv":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:appendfv(${1:fmt}, ${2:args})",
    "prefix":"ImGuiTextBuffer:appendfv",
    "description":"[C++] void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImFontAtlasCustomRect:erase_unsorted",
    "description":"[C++] ImFontAtlasCustomRect* ImVector_ImFontAtlasCustomRect::erase_unsorted(ImVector_ImFontAtlasCustomRect* self, ImFontAtlasCustomRect const * it)\n\n"
  },
  "imgui.CreateTextureFromFile":{
    "scope":"lua",
    "body":"imgui.CreateTextureFromFile(${1:path})",
    "prefix":"imgui.CreateTextureFromFile",
    "description":"[mimgui function]\n\nReturns: cdata<LPDIRECT3DTEXTURE9> tex\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_OpenOnDoubleClick":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.OpenOnDoubleClick",
    "prefix":"imgui.TreeNodeFlags.OpenOnDoubleClick",
    "description":"[C++] ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6\n\n"
  },
  "imgui.ImFontAtlasCustomRect_ImFontAtlasCustomRect":{
    "scope":"lua",
    "body":"imgui.ImFontAtlasCustomRect()",
    "prefix":"imgui.ImFontAtlasCustomRect",
    "description":"[C++] ImFontAtlasCustomRect()\n\n"
  },
  "imgui.ImColor_ImColor":{
    "scope":"lua",
    "body":"imgui.ImColor()",
    "prefix":"imgui.ImColor",
    "description":"[C++] ImColor()\n\n"
  },
  "imgui.ImDrawCornerFlags_None":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.None",
    "prefix":"imgui.DrawCornerFlags.None",
    "description":"[C++] ImDrawCornerFlags_None = 0\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_begin":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:begin()",
    "prefix":"ImVector_ImGuiStoragePair:begin",
    "description":"[C++] ImGuiStoragePair* ImVector_ImGuiStoragePair::begin(ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImFontAtlasCustomRect.GlyphOffset":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect.GlyphOffset",
    "prefix":"ImFontAtlasCustomRect.GlyphOffset",
    "description":"[C++] ImVec2 ImFontAtlasCustomRect::GlyphOffset\n\n"
  },
  "imgui.ImVector_ImVec4__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImVec4:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImVec4:_grow_capacity",
    "description":"[C++] int ImVector_ImVec4::_grow_capacity(const ImVector_ImVec4* self, int sz)\n\n"
  },
  "imgui.igGetWindowWidth":{
    "scope":"lua",
    "body":"imgui.GetWindowWidth()",
    "prefix":"imgui.GetWindowWidth",
    "description":"[C++] float ImGui::GetWindowWidth()\n\n"
  },
  "imgui.ImGuiIO.BackendPlatformUserData":{
    "scope":"lua",
    "body":"ImGuiIO.BackendPlatformUserData",
    "prefix":"ImGuiIO.BackendPlatformUserData",
    "description":"[C++] void* ImGuiIO::BackendPlatformUserData\n\n"
  },
  "imgui.ImFontAtlasCustomRect.Height":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect.Height",
    "prefix":"ImFontAtlasCustomRect.Height",
    "description":"[C++] unsigned short ImFontAtlasCustomRect::Height\n\n"
  },
  "imgui.ImGuiStyleVar_PopupRounding":{
    "scope":"lua",
    "body":"imgui.StyleVar.PopupRounding",
    "prefix":"imgui.StyleVar.PopupRounding",
    "description":"[C++] ImGuiStyleVar_PopupRounding = 8\n\n"
  },
  "imgui.ImGuiStyle.Colors[ImGuiCol_COUNT]":{
    "scope":"lua",
    "body":"ImGuiStyle.Colors[ImGuiCol_COUNT]",
    "prefix":"ImGuiStyle.Colors[ImGuiCol_COUNT]",
    "description":"[C++] ImVec4 ImGuiStyle::Colors[ImGuiCol_COUNT]\n\n"
  },
  "imgui.igRadioButtonIntPtr":{
    "scope":"lua",
    "body":"imgui.RadioButtonIntPtr(${1:label}, ${2:v}, ${3:v_button})",
    "prefix":"imgui.RadioButton",
    "description":"[C++] bool ImGui::RadioButton(const char* label, int* v, int v_button)\n\n"
  },
  "imgui.ImGuiStyle.CurveTessellationTol":{
    "scope":"lua",
    "body":"ImGuiStyle.CurveTessellationTol",
    "prefix":"ImGuiStyle.CurveTessellationTol",
    "description":"[C++] float ImGuiStyle::CurveTessellationTol\n\n"
  },
  "imgui.igSetWindowPosVec2":{
    "scope":"lua",
    "body":"imgui.SetWindowPosVec2(${1:pos}${2:[, cond=0]})",
    "prefix":"imgui.SetWindowPos",
    "description":"[C++] void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond=0)\n\n"
  },
  "imgui.ImVector_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector:size_in_bytes()",
    "prefix":"ImVector:size_in_bytes",
    "description":"[C++] int ImVector::size_in_bytes()\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_front":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:front()",
    "prefix":"ImVector_ImGuiTextRange:front",
    "description":"[C++] ImGuiTextRange* ImVector_ImGuiTextRange::front(ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImFontAtlas.Flags":{
    "scope":"lua",
    "body":"ImFontAtlas.Flags",
    "prefix":"ImFontAtlas.Flags",
    "description":"[C++] ImFontAtlasFlags ImFontAtlas::Flags\n\n"
  },
  "imgui.ImGuiStyle.MouseCursorScale":{
    "scope":"lua",
    "body":"ImGuiStyle.MouseCursorScale",
    "prefix":"ImGuiStyle.MouseCursorScale",
    "description":"[C++] float ImGuiStyle::MouseCursorScale\n\n"
  },
  "imgui.ImGuiStyle.DisplaySafeAreaPadding":{
    "scope":"lua",
    "body":"ImGuiStyle.DisplaySafeAreaPadding",
    "prefix":"ImGuiStyle.DisplaySafeAreaPadding",
    "description":"[C++] ImVec2 ImGuiStyle::DisplaySafeAreaPadding\n\n"
  },
  "imgui.igSetScrollHereX":{
    "scope":"lua",
    "body":"imgui.SetScrollHereX(${1:[center_x_ratio=0.5f]})",
    "prefix":"imgui.SetScrollHereX",
    "description":"[C++] void ImGui::SetScrollHereX(float center_x_ratio=0.5f)\n\n"
  },
  "imgui.ImGuiStyle.DisplayWindowPadding":{
    "scope":"lua",
    "body":"ImGuiStyle.DisplayWindowPadding",
    "prefix":"ImGuiStyle.DisplayWindowPadding",
    "description":"[C++] ImVec2 ImGuiStyle::DisplayWindowPadding\n\n"
  },
  "imgui.ImGuiIO.MouseWheel":{
    "scope":"lua",
    "body":"ImGuiIO.MouseWheel",
    "prefix":"ImGuiIO.MouseWheel",
    "description":"[C++] float ImGuiIO::MouseWheel\n\n"
  },
  "imgui.ImGuiStyle.TabBorderSize":{
    "scope":"lua",
    "body":"ImGuiStyle.TabBorderSize",
    "prefix":"ImGuiStyle.TabBorderSize",
    "description":"[C++] float ImGuiStyle::TabBorderSize\n\n"
  },
  "imgui.igGetKeyIndex":{
    "scope":"lua",
    "body":"imgui.GetKeyIndex(${1:imgui_key})",
    "prefix":"imgui.GetKeyIndex",
    "description":"[C++] int ImGui::GetKeyIndex(ImGuiKey imgui_key)\n\n"
  },
  "imgui.ImDrawList_GetClipRectMin":{
    "scope":"lua",
    "body":"ImDrawList:GetClipRectMin()",
    "prefix":"ImDrawList:GetClipRectMin",
    "description":"[C++] ImVec2 ImDrawList::GetClipRectMin()\n\n"
  },
  "imgui.ImFont.DisplayOffset":{
    "scope":"lua",
    "body":"ImFont.DisplayOffset",
    "prefix":"ImFont.DisplayOffset",
    "description":"[C++] ImVec2 ImFont::DisplayOffset\n\n"
  },
  "imgui.ImGuiStorage_BuildSortByKey":{
    "scope":"lua",
    "body":"ImGuiStorage:BuildSortByKey()",
    "prefix":"ImGuiStorage:BuildSortByKey",
    "description":"[C++] void ImGuiStorage::BuildSortByKey()\n\n"
  },
  "imgui.ImGuiIO.RenderDrawListsFnUnused":{
    "scope":"lua",
    "body":"ImGuiIO.RenderDrawListsFnUnused",
    "prefix":"ImGuiIO.RenderDrawListsFnUnused",
    "description":"[C++] void* ImGuiIO::RenderDrawListsFnUnused\n\n"
  },
  "imgui.ImGuiStyle.GrabRounding":{
    "scope":"lua",
    "body":"ImGuiStyle.GrabRounding",
    "prefix":"ImGuiStyle.GrabRounding",
    "description":"[C++] float ImGuiStyle::GrabRounding\n\n"
  },
  "imgui.ImGuiStyle.GrabMinSize":{
    "scope":"lua",
    "body":"ImGuiStyle.GrabMinSize",
    "prefix":"ImGuiStyle.GrabMinSize",
    "description":"[C++] float ImGuiStyle::GrabMinSize\n\n"
  },
  "imgui.ImVector_ImVec4_insert":{
    "scope":"lua",
    "body":"ImVector_ImVec4:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImVec4:insert",
    "description":"[C++] ImVec4* ImVector_ImVec4::insert(ImVector_ImVec4* self, ImVec4 const * it, const ImVec4 v)\n\n"
  },
  "imgui.ImGuiStyle.ScrollbarSize":{
    "scope":"lua",
    "body":"ImGuiStyle.ScrollbarSize",
    "prefix":"ImGuiStyle.ScrollbarSize",
    "description":"[C++] float ImGuiStyle::ScrollbarSize\n\n"
  },
  "imgui.ImGuiStyle.ColumnsMinSpacing":{
    "scope":"lua",
    "body":"ImGuiStyle.ColumnsMinSpacing",
    "prefix":"ImGuiStyle.ColumnsMinSpacing",
    "description":"[C++] float ImGuiStyle::ColumnsMinSpacing\n\n"
  },
  "imgui.ImGuiStyle.IndentSpacing":{
    "scope":"lua",
    "body":"ImGuiStyle.IndentSpacing",
    "prefix":"ImGuiStyle.IndentSpacing",
    "description":"[C++] float ImGuiStyle::IndentSpacing\n\n"
  },
  "imgui.ImFontConfig.Name[40]":{
    "scope":"lua",
    "body":"ImFontConfig.Name[40]",
    "prefix":"ImFontConfig.Name[40]",
    "description":"[C++] char ImFontConfig::Name[40]\n\n"
  },
  "imgui.ImFontAtlas_AddFont":{
    "scope":"lua",
    "body":"ImFontAtlas:AddFont(${1:font_cfg})",
    "prefix":"ImFontAtlas:AddFont",
    "description":"[C++] ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)\n\n"
  },
  "imgui.ImGuiDragDropFlags_SourceNoPreviewTooltip":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.SourceNoPreviewTooltip",
    "prefix":"imgui.DragDropFlags.SourceNoPreviewTooltip",
    "description":"[C++] ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0\n\n"
  },
  "imgui.igInputTextWithHint":{
    "scope":"lua",
    "body":"imgui.InputTextWithHint(${1:label}, ${2:hint}, ${3:buf}, ${4:buf_size}${5:[, flags=0]}${6:[, callback=((void*)0)]}${7:[, user_data=((void*)0)]})",
    "prefix":"imgui.InputTextWithHint",
    "description":"[C++] bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags=0, ImGuiInputTextCallback callback=((void*)0), void* user_data=((void*)0))\n\n"
  },
  "imgui.ImVector_ImTextureID_resize":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:resize(${1:new_size})",
    "prefix":"ImVector_ImTextureID:resize",
    "description":"[C++] void ImVector_ImTextureID::resize(ImVector_ImTextureID* self, int new_size)\n\n"
  },
  "imgui.igBeginDragDropTarget":{
    "scope":"lua",
    "body":"imgui.BeginDragDropTarget()",
    "prefix":"imgui.BeginDragDropTarget",
    "description":"[C++] bool ImGui::BeginDragDropTarget()\n\n"
  },
  "imgui.ImFont_BuildLookupTable":{
    "scope":"lua",
    "body":"ImFont:BuildLookupTable()",
    "prefix":"ImFont:BuildLookupTable",
    "description":"[C++] void ImFont::BuildLookupTable()\n\n"
  },
  "imgui.igEndTooltip":{
    "scope":"lua",
    "body":"imgui.EndTooltip()",
    "prefix":"imgui.EndTooltip",
    "description":"[C++] void ImGui::EndTooltip()\n\n"
  },
  "imgui.ImGuiIO.MouseDownDurationPrev[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDownDurationPrev[5]",
    "prefix":"ImGuiIO.MouseDownDurationPrev[5]",
    "description":"[C++] float ImGuiIO::MouseDownDurationPrev[5]\n\n"
  },
  "imgui.ImGuiStyle.FrameRounding":{
    "scope":"lua",
    "body":"ImGuiStyle.FrameRounding",
    "prefix":"ImGuiStyle.FrameRounding",
    "description":"[C++] float ImGuiStyle::FrameRounding\n\n"
  },
  "imgui.ImGuiStyle.PopupBorderSize":{
    "scope":"lua",
    "body":"ImGuiStyle.PopupBorderSize",
    "prefix":"ImGuiStyle.PopupBorderSize",
    "description":"[C++] float ImGuiStyle::PopupBorderSize\n\n"
  },
  "imgui.ImGuiStyle.PopupRounding":{
    "scope":"lua",
    "body":"ImGuiStyle.PopupRounding",
    "prefix":"ImGuiStyle.PopupRounding",
    "description":"[C++] float ImGuiStyle::PopupRounding\n\n"
  },
  "imgui.ImGuiStyle.ChildBorderSize":{
    "scope":"lua",
    "body":"ImGuiStyle.ChildBorderSize",
    "prefix":"ImGuiStyle.ChildBorderSize",
    "description":"[C++] float ImGuiStyle::ChildBorderSize\n\n"
  },
  "imgui.igVSliderScalar":{
    "scope":"lua",
    "body":"imgui.VSliderScalar(${1:label}, ${2:size}, ${3:data_type}, ${4:v}, ${5:v_min}, ${6:v_max}${7:[, format=((void*)0)]}${8:[, power=1.0f]})",
    "prefix":"imgui.VSliderScalar",
    "description":"[C++] bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format=((void*)0), float power=1.0f)\n\n"
  },
  "imgui.ImGuiStyle.ChildRounding":{
    "scope":"lua",
    "body":"ImGuiStyle.ChildRounding",
    "prefix":"ImGuiStyle.ChildRounding",
    "description":"[C++] float ImGuiStyle::ChildRounding\n\n"
  },
  "imgui.ImGuiStyle.WindowTitleAlign":{
    "scope":"lua",
    "body":"ImGuiStyle.WindowTitleAlign",
    "prefix":"ImGuiStyle.WindowTitleAlign",
    "description":"[C++] ImVec2 ImGuiStyle::WindowTitleAlign\n\n"
  },
  "imgui.ImGuiStyle.WindowMinSize":{
    "scope":"lua",
    "body":"ImGuiStyle.WindowMinSize",
    "prefix":"ImGuiStyle.WindowMinSize",
    "description":"[C++] ImVec2 ImGuiStyle::WindowMinSize\n\n"
  },
  "imgui.ImVector_ImFontGlyph_push_back":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:push_back(${1:v})",
    "prefix":"ImVector_ImFontGlyph:push_back",
    "description":"[C++] void ImVector_ImFontGlyph::push_back(ImVector_ImFontGlyph* self, const ImFontGlyph v)\n\n"
  },
  "imgui.igVSliderInt":{
    "scope":"lua",
    "body":"imgui.VSliderInt(${1:label}, ${2:size}, ${3:v}, ${4:v_min}, ${5:v_max}${6:[, format=\"%d\"]})",
    "prefix":"imgui.VSliderInt",
    "description":"[C++] bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format=\"%d\")\n\n"
  },
  "imgui.ImVector_ImVec4_swap":{
    "scope":"lua",
    "body":"ImVector_ImVec4:swap(${1:rhs})",
    "prefix":"ImVector_ImVec4:swap",
    "description":"[C++] void ImVector_ImVec4::swap(ImVector_ImVec4* self, ImVector_ImVec4 rhs)\n\n"
  },
  "imgui.ImGuiStyle.WindowRounding":{
    "scope":"lua",
    "body":"ImGuiStyle.WindowRounding",
    "prefix":"ImGuiStyle.WindowRounding",
    "description":"[C++] float ImGuiStyle::WindowRounding\n\n"
  },
  "imgui.ImGuiIO.KeyShift":{
    "scope":"lua",
    "body":"ImGuiIO.KeyShift",
    "prefix":"ImGuiIO.KeyShift",
    "description":"[C++] bool ImGuiIO::KeyShift\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_front":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:front()",
    "prefix":"ImVector_ImFontAtlasCustomRect:front",
    "description":"[C++] ImFontAtlasCustomRect* ImVector_ImFontAtlasCustomRect::front(ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImFont.ConfigDataCount":{
    "scope":"lua",
    "body":"ImFont.ConfigDataCount",
    "prefix":"ImFont.ConfigDataCount",
    "description":"[C++] short ImFont::ConfigDataCount\n\n"
  },
  "imgui.ImGuiDataType_Float":{
    "scope":"lua",
    "body":"imgui.DataType.Float",
    "prefix":"imgui.DataType.Float",
    "description":"[C++] ImGuiDataType_Float = 8\n\n"
  },
  "imgui.igSelectableBoolPtr":{
    "scope":"lua",
    "body":"imgui.SelectableBoolPtr(${1:label}, ${2:p_selected}${3:[, flags=0]}${4:[, size=ImVec2(0,0)]})",
    "prefix":"imgui.Selectable",
    "description":"[C++] bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags=0, const ImVec2& size=ImVec2(0, 0))\n\n"
  },
  "imgui.igBegin":{
    "scope":"lua",
    "body":"imgui.Begin(${1:name}${2:[, p_open=((void*)0)]}${3:[, flags=0]})",
    "prefix":"imgui.Begin",
    "description":"[C++] bool ImGui::Begin(const char* name, bool* p_open=((void*)0), ImGuiWindowFlags flags=0)\n\n"
  },
  "imgui.igSetTooltip":{
    "scope":"lua",
    "body":"imgui.SetTooltip(${1:fmt},...)",
    "prefix":"imgui.SetTooltip",
    "description":"[C++] void ImGui::SetTooltip(const char* fmt, ...)\n\n"
  },
  "imgui.ImFont.DirtyLookupTables":{
    "scope":"lua",
    "body":"ImFont.DirtyLookupTables",
    "prefix":"ImFont.DirtyLookupTables",
    "description":"[C++] bool ImFont::DirtyLookupTables\n\n"
  },
  "imgui.ImFont.MetricsTotalSurface":{
    "scope":"lua",
    "body":"ImFont.MetricsTotalSurface",
    "prefix":"ImFont.MetricsTotalSurface",
    "description":"[C++] int ImFont::MetricsTotalSurface\n\n"
  },
  "imgui.ImVector_ImVec4_empty":{
    "scope":"lua",
    "body":"ImVector_ImVec4:empty()",
    "prefix":"ImVector_ImVec4:empty",
    "description":"[C++] bool ImVector_ImVec4::empty(const ImVector_ImVec4* self)\n\n"
  },
  "imgui.igBeginTooltip":{
    "scope":"lua",
    "body":"imgui.BeginTooltip()",
    "prefix":"imgui.BeginTooltip",
    "description":"[C++] void ImGui::BeginTooltip()\n\n"
  },
  "imgui.ImFont.Ascent":{
    "scope":"lua",
    "body":"ImFont.Ascent",
    "prefix":"ImFont.Ascent",
    "description":"[C++] float ImFont::Ascent\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_insert":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImGuiTextRange:insert",
    "description":"[C++] ImGuiTextRange* ImVector_ImGuiTextRange::insert(ImVector_ImGuiTextRange* self, ImGuiTextRange const * it, const ImGuiTextRange v)\n\n"
  },
  "imgui.igSliderFloat3":{
    "scope":"lua",
    "body":"imgui.SliderFloat3(${1:label}, ${2:v}, ${3:v_min}, ${4:v_max}${5:[, format=\"%.3f\"]}${6:[, power=1.0f]})",
    "prefix":"imgui.SliderFloat3",
    "description":"[C++] bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.ImGuiIO.MetricsRenderWindows":{
    "scope":"lua",
    "body":"ImGuiIO.MetricsRenderWindows",
    "prefix":"ImGuiIO.MetricsRenderWindows",
    "description":"[C++] int ImGuiIO::MetricsRenderWindows\n\n"
  },
  "imgui.ImGuiListClipper.DisplayStart":{
    "scope":"lua",
    "body":"ImGuiListClipper.DisplayStart",
    "prefix":"ImGuiListClipper.DisplayStart",
    "description":"[C++] int ImGuiListClipper::DisplayStart\n\n"
  },
  "imgui.ImFont.ConfigData":{
    "scope":"lua",
    "body":"ImFont.ConfigData",
    "prefix":"ImFont.ConfigData",
    "description":"[C++] const ImFontConfig* ImFont::ConfigData\n\n"
  },
  "imgui.ImGuiCol_CheckMark":{
    "scope":"lua",
    "body":"imgui.Col.CheckMark",
    "prefix":"imgui.Col.CheckMark",
    "description":"[C++] ImGuiCol_CheckMark = 18\n\n"
  },
  "imgui.ImDrawListSplitter":{
    "scope":"lua",
    "body":"new.ImDrawListSplitter($1)",
    "prefix":"new.ImDrawListSplitter",
    "description":"typedef struct ImDrawListSplitter ImDrawListSplitter\n\n"
  },
  "imgui.ImFont.Glyphs":{
    "scope":"lua",
    "body":"ImFont.Glyphs",
    "prefix":"ImFont.Glyphs",
    "description":"[C++] ImVector_ImFontGlyph ImFont::Glyphs\n\n"
  },
  "imgui.ImFont.IndexLookup":{
    "scope":"lua",
    "body":"ImFont.IndexLookup",
    "prefix":"ImFont.IndexLookup",
    "description":"[C++] ImVector_ImWchar ImFont::IndexLookup\n\n"
  },
  "imgui.ImFont.FallbackAdvanceX":{
    "scope":"lua",
    "body":"ImFont.FallbackAdvanceX",
    "prefix":"ImFont.FallbackAdvanceX",
    "description":"[C++] float ImFont::FallbackAdvanceX\n\n"
  },
  "imgui.ImFont.IndexAdvanceX":{
    "scope":"lua",
    "body":"ImFont.IndexAdvanceX",
    "prefix":"ImFont.IndexAdvanceX",
    "description":"[C++] ImVector_float ImFont::IndexAdvanceX\n\n"
  },
  "imgui.ImDrawList.Flags":{
    "scope":"lua",
    "body":"ImDrawList.Flags",
    "prefix":"ImDrawList.Flags",
    "description":"[C++] ImDrawListFlags ImDrawList::Flags\n\n"
  },
  "imgui.ImGuiKey_COUNT":{
    "scope":"lua",
    "body":"imgui.Key.COUNT",
    "prefix":"imgui.Key.COUNT",
    "description":"[C++] ImGuiKey_COUNT = 22\n\n"
  },
  "imgui.ImFontAtlas.TexPixelsRGBA32":{
    "scope":"lua",
    "body":"ImFontAtlas.TexPixelsRGBA32",
    "prefix":"ImFontAtlas.TexPixelsRGBA32",
    "description":"[C++] unsigned int* ImFontAtlas::TexPixelsRGBA32\n\n"
  },
  "imgui.ImDrawList._Path":{
    "scope":"lua",
    "body":"ImDrawList._Path",
    "prefix":"ImDrawList._Path",
    "description":"[C++] ImVector_ImVec2 ImDrawList::_Path\n\n"
  },
  "imgui.ImGuiDragDropFlags_SourceAutoExpirePayload":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.SourceAutoExpirePayload",
    "prefix":"imgui.DragDropFlags.SourceAutoExpirePayload",
    "description":"[C++] ImGuiDragDropFlags_SourceAutoExpirePayload = 1 << 5\n\n"
  },
  "imgui.ImGuiListClipper.ItemsHeight":{
    "scope":"lua",
    "body":"ImGuiListClipper.ItemsHeight",
    "prefix":"ImGuiListClipper.ItemsHeight",
    "description":"[C++] float ImGuiListClipper::ItemsHeight\n\n"
  },
  "imgui.ImDrawListSplitter._Channels":{
    "scope":"lua",
    "body":"ImDrawListSplitter._Channels",
    "prefix":"ImDrawListSplitter._Channels",
    "description":"[C++] ImVector_ImDrawChannel ImDrawListSplitter::_Channels\n\n"
  },
  "imgui.ImDrawListSplitter._Count":{
    "scope":"lua",
    "body":"ImDrawListSplitter._Count",
    "prefix":"ImDrawListSplitter._Count",
    "description":"[C++] int ImDrawListSplitter::_Count\n\n"
  },
  "imgui.igImageButton":{
    "scope":"lua",
    "body":"imgui.ImageButton(${1:user_texture_id}, ${2:size}${3:[, uv0=ImVec2(0,0)]}${4:[, uv1=ImVec2(1,1)]}${5:[, frame_padding=-1]}${6:[, bg_col=ImVec4(0,0,0,0)]}${7:[, tint_col=ImVec4(1,1,1,1)]})",
    "prefix":"imgui.ImageButton",
    "description":"[C++] bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0=ImVec2(0, 0), const ImVec2& uv1=ImVec2(1, 1), int frame_padding=-1, const ImVec4& bg_col=ImVec4(0, 0, 0, 0), const ImVec4& tint_col=ImVec4(1, 1, 1, 1))\n\n"
  },
  "imgui.ImVector_ImDrawCmd_erase":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:erase(${1:it})",
    "prefix":"ImVector_ImDrawCmd:erase",
    "description":"[C++] ImDrawCmd* ImVector_ImDrawCmd::erase(ImVector_ImDrawCmd* self, ImDrawCmd const * it)\n\n"
  },
  "imgui.ImGuiTreeNodeFlags":{
    "scope":"lua",
    "body":"new.ImGuiTreeNodeFlags($1)",
    "prefix":"new.ImGuiTreeNodeFlags",
    "description":"typedef int ImGuiTreeNodeFlags\n\n"
  },
  "imgui.igGetColumnOffset":{
    "scope":"lua",
    "body":"imgui.GetColumnOffset(${1:[column_index=-1]})",
    "prefix":"imgui.GetColumnOffset",
    "description":"[C++] float ImGui::GetColumnOffset(int column_index=-1)\n\n"
  },
  "imgui.ImGuiIO.NavInputsDownDurationPrev[ImGuiNavInput_COUNT]":{
    "scope":"lua",
    "body":"ImGuiIO.NavInputsDownDurationPrev[ImGuiNavInput_COUNT]",
    "prefix":"ImGuiIO.NavInputsDownDurationPrev[ImGuiNavInput_COUNT]",
    "description":"[C++] float ImGuiIO::NavInputsDownDurationPrev[ImGuiNavInput_COUNT]\n\n"
  },
  "imgui.ImVec2_ImVec2Float":{
    "scope":"lua",
    "body":"imgui.ImVec2.ImVec2Float(${1:_x}, ${2:_y})",
    "prefix":"imgui.ImVec2.ImVec2",
    "description":"[C++] ImVec2(float _x, float _y)\n\n"
  },
  "imgui.ImGuiIO.MouseDragMaxDistanceSqr[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDragMaxDistanceSqr[5]",
    "prefix":"ImGuiIO.MouseDragMaxDistanceSqr[5]",
    "description":"[C++] float ImGuiIO::MouseDragMaxDistanceSqr[5]\n\n"
  },
  "imgui.ImGuiIO.MouseDragMaxDistanceAbs[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDragMaxDistanceAbs[5]",
    "prefix":"ImGuiIO.MouseDragMaxDistanceAbs[5]",
    "description":"[C++] ImVec2 ImGuiIO::MouseDragMaxDistanceAbs[5]\n\n"
  },
  "imgui.ImDrawChannel._CmdBuffer":{
    "scope":"lua",
    "body":"ImDrawChannel._CmdBuffer",
    "prefix":"ImDrawChannel._CmdBuffer",
    "description":"[C++] ImVector_ImDrawCmd ImDrawChannel::_CmdBuffer\n\n"
  },
  "imgui.ImGuiStyle.FrameBorderSize":{
    "scope":"lua",
    "body":"ImGuiStyle.FrameBorderSize",
    "prefix":"ImGuiStyle.FrameBorderSize",
    "description":"[C++] float ImGuiStyle::FrameBorderSize\n\n"
  },
  "imgui.igLogText":{
    "scope":"lua",
    "body":"imgui.LogText(${1:fmt},...)",
    "prefix":"imgui.LogText",
    "description":"[C++] void ImGui::LogText(const char* fmt, ...)\n\n"
  },
  "imgui.igSliderScalarN":{
    "scope":"lua",
    "body":"imgui.SliderScalarN(${1:label}, ${2:data_type}, ${3:v}, ${4:components}, ${5:v_min}, ${6:v_max}${7:[, format=((void*)0)]}${8:[, power=1.0f]})",
    "prefix":"imgui.SliderScalarN",
    "description":"[C++] bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format=((void*)0), float power=1.0f)\n\n"
  },
  "imgui.ImGuiIO.MouseDownOwned[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDownOwned[5]",
    "prefix":"ImGuiIO.MouseDownOwned[5]",
    "description":"[C++] bool ImGuiIO::MouseDownOwned[5]\n\n"
  },
  "imgui.ImVector_ImVec2_swap":{
    "scope":"lua",
    "body":"ImVector_ImVec2:swap(${1:rhs})",
    "prefix":"ImVector_ImVec2:swap",
    "description":"[C++] void ImVector_ImVec2::swap(ImVector_ImVec2* self, ImVector_ImVec2 rhs)\n\n"
  },
  "imgui.ImGuiIO.MouseReleased[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseReleased[5]",
    "prefix":"ImGuiIO.MouseReleased[5]",
    "description":"[C++] bool ImGuiIO::MouseReleased[5]\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_end_const":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:end_const()",
    "prefix":"ImVector_ImGuiTextRange:end",
    "description":"[C++] ImGuiTextRange const * ImVector_ImGuiTextRange::end(const ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImGuiIO.FontDefault":{
    "scope":"lua",
    "body":"ImGuiIO.FontDefault",
    "prefix":"ImGuiIO.FontDefault",
    "description":"[C++] ImFont* ImGuiIO::FontDefault\n\n"
  },
  "imgui.ImVector_ImVec4_ImVector_ImVec4Vector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImVec4.ImVector_ImVec4Vector(${1:src})",
    "prefix":"imgui.ImVector_ImVec4.ImVector_ImVec4",
    "description":"[C++] ImVector_ImVec4(const ImVector_ImVec4 src)\n\n"
  },
  "imgui.ImGuiCol":{
    "scope":"lua",
    "body":"new.ImGuiCol($1)",
    "prefix":"new.ImGuiCol",
    "description":"typedef int ImGuiCol\n\n"
  },
  "imgui.ImVector_float_ImVector_floatVector":{
    "scope":"lua",
    "body":"imgui.ImVector_float.ImVector_floatVector(${1:src})",
    "prefix":"imgui.ImVector_float.ImVector_float",
    "description":"[C++] ImVector_float(const ImVector_float src)\n\n"
  },
  "imgui.ImVector_ImVec2_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImVec2:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImVec2:erase_unsorted",
    "description":"[C++] ImVec2* ImVector_ImVec2::erase_unsorted(ImVector_ImVec2* self, ImVec2 const * it)\n\n"
  },
  "imgui.ImGuiIO.MouseClickedPos[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseClickedPos[5]",
    "prefix":"ImGuiIO.MouseClickedPos[5]",
    "description":"[C++] ImVec2 ImGuiIO::MouseClickedPos[5]\n\n"
  },
  "imgui.ImVector_ImFontGlyph_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImFontGlyph:erase_unsorted",
    "description":"[C++] ImFontGlyph* ImVector_ImFontGlyph::erase_unsorted(ImVector_ImFontGlyph* self, ImFontGlyph const * it)\n\n"
  },
  "imgui.ImGuiIO.MousePosPrev":{
    "scope":"lua",
    "body":"ImGuiIO.MousePosPrev",
    "prefix":"ImGuiIO.MousePosPrev",
    "description":"[C++] ImVec2 ImGuiIO::MousePosPrev\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_insert":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImGuiStoragePair:insert",
    "description":"[C++] ImGuiStoragePair* ImVector_ImGuiStoragePair::insert(ImVector_ImGuiStoragePair* self, ImGuiStoragePair const * it, const ImGuiStoragePair v)\n\n"
  },
  "imgui.ImGuiCol_SeparatorActive":{
    "scope":"lua",
    "body":"imgui.Col.SeparatorActive",
    "prefix":"imgui.Col.SeparatorActive",
    "description":"[C++] ImGuiCol_SeparatorActive = 29\n\n"
  },
  "imgui.ImGuiIO.MouseDelta":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDelta",
    "prefix":"ImGuiIO.MouseDelta",
    "description":"[C++] ImVec2 ImGuiIO::MouseDelta\n\n"
  },
  "imgui.ImVector_float_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_float:size_in_bytes()",
    "prefix":"ImVector_float:size_in_bytes",
    "description":"[C++] int ImVector_float::size_in_bytes(const ImVector_float* self)\n\n"
  },
  "imgui.DisableInput":{
    "scope":"lua",
    "body":"imgui.DisableInput",
    "prefix":"imgui.DisableInput",
    "description":"[mimgui variable]\n\nType: bool\n\n"
  },
  "imgui.ReleaseTexture":{
    "scope":"lua",
    "body":"imgui.ReleaseTexture(${1:tex})",
    "prefix":"imgui.ReleaseTexture",
    "description":"[mimgui function]\n\n"
  },
  "imgui.igComboStr":{
    "scope":"lua",
    "body":"imgui.ComboStr(${1:label}, ${2:current_item}, ${3:items_separated_by_zeros}${4:[, popup_max_height_in_items=-1]})",
    "prefix":"imgui.Combo",
    "description":"[C++] bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items=-1)\n\n"
  },
  "imgui.ImGuiIO.MetricsActiveAllocations":{
    "scope":"lua",
    "body":"ImGuiIO.MetricsActiveAllocations",
    "prefix":"ImGuiIO.MetricsActiveAllocations",
    "description":"[C++] int ImGuiIO::MetricsActiveAllocations\n\n"
  },
  "imgui.ImDrawList_AddDrawCmd":{
    "scope":"lua",
    "body":"ImDrawList:AddDrawCmd()",
    "prefix":"ImDrawList:AddDrawCmd",
    "description":"[C++] void ImDrawList::AddDrawCmd()\n\n"
  },
  "imgui.ImGuiIO.MetricsActiveWindows":{
    "scope":"lua",
    "body":"ImGuiIO.MetricsActiveWindows",
    "prefix":"ImGuiIO.MetricsActiveWindows",
    "description":"[C++] int ImGuiIO::MetricsActiveWindows\n\n"
  },
  "imgui.ImGuiIO.MetricsRenderIndices":{
    "scope":"lua",
    "body":"ImGuiIO.MetricsRenderIndices",
    "prefix":"ImGuiIO.MetricsRenderIndices",
    "description":"[C++] int ImGuiIO::MetricsRenderIndices\n\n"
  },
  "imgui.ImGuiIO.MetricsRenderVertices":{
    "scope":"lua",
    "body":"ImGuiIO.MetricsRenderVertices",
    "prefix":"ImGuiIO.MetricsRenderVertices",
    "description":"[C++] int ImGuiIO::MetricsRenderVertices\n\n"
  },
  "imgui.ImVector_ImVec4_back":{
    "scope":"lua",
    "body":"ImVector_ImVec4:back()",
    "prefix":"ImVector_ImVec4:back",
    "description":"[C++] ImVec4* ImVector_ImVec4::back(ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImGuiIO.NavVisible":{
    "scope":"lua",
    "body":"ImGuiIO.NavVisible",
    "prefix":"ImGuiIO.NavVisible",
    "description":"[C++] bool ImGuiIO::NavVisible\n\n"
  },
  "imgui.ImGuiIO.WantSaveIniSettings":{
    "scope":"lua",
    "body":"ImGuiIO.WantSaveIniSettings",
    "prefix":"ImGuiIO.WantSaveIniSettings",
    "description":"[C++] bool ImGuiIO::WantSaveIniSettings\n\n"
  },
  "imgui.igGetTextLineHeight":{
    "scope":"lua",
    "body":"imgui.GetTextLineHeight()",
    "prefix":"imgui.GetTextLineHeight",
    "description":"[C++] float ImGui::GetTextLineHeight()\n\n"
  },
  "imgui.ImGuiIO.NavActive":{
    "scope":"lua",
    "body":"ImGuiIO.NavActive",
    "prefix":"ImGuiIO.NavActive",
    "description":"[C++] bool ImGuiIO::NavActive\n\n"
  },
  "imgui.ImGuiIO.WantSetMousePos":{
    "scope":"lua",
    "body":"ImGuiIO.WantSetMousePos",
    "prefix":"ImGuiIO.WantSetMousePos",
    "description":"[C++] bool ImGuiIO::WantSetMousePos\n\n"
  },
  "imgui.ImGuiIO.WantCaptureKeyboard":{
    "scope":"lua",
    "body":"ImGuiIO.WantCaptureKeyboard",
    "prefix":"ImGuiIO.WantCaptureKeyboard",
    "description":"[C++] bool ImGuiIO::WantCaptureKeyboard\n\n"
  },
  "imgui.ImGuiIO.WantCaptureMouse":{
    "scope":"lua",
    "body":"ImGuiIO.WantCaptureMouse",
    "prefix":"ImGuiIO.WantCaptureMouse",
    "description":"[C++] bool ImGuiIO::WantCaptureMouse\n\n"
  },
  "imgui.ImGuiIO.NavInputs[ImGuiNavInput_COUNT]":{
    "scope":"lua",
    "body":"ImGuiIO.NavInputs[ImGuiNavInput_COUNT]",
    "prefix":"ImGuiIO.NavInputs[ImGuiNavInput_COUNT]",
    "description":"[C++] float ImGuiIO::NavInputs[ImGuiNavInput_COUNT]\n\n"
  },
  "imgui.igBeginMenuBar":{
    "scope":"lua",
    "body":"imgui.BeginMenuBar()",
    "prefix":"imgui.BeginMenuBar",
    "description":"[C++] bool ImGui::BeginMenuBar()\n\n"
  },
  "imgui.ImGuiIO.KeySuper":{
    "scope":"lua",
    "body":"ImGuiIO.KeySuper",
    "prefix":"ImGuiIO.KeySuper",
    "description":"[C++] bool ImGuiIO::KeySuper\n\n"
  },
  "imgui.ImFontAtlas_AddFontFromFileTTF":{
    "scope":"lua",
    "body":"ImFontAtlas:AddFontFromFileTTF(${1:filename}, ${2:size_pixels}${3:[, font_cfg=((void*)0)]}${4:[, glyph_ranges=((void*)0)]})",
    "prefix":"ImFontAtlas:AddFontFromFileTTF",
    "description":"[C++] ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg=((void*)0), const ImWchar* glyph_ranges=((void*)0))\n\n"
  },
  "imgui.ImGuiMouseCursor_ResizeNWSE":{
    "scope":"lua",
    "body":"imgui.MouseCursor.ResizeNWSE",
    "prefix":"imgui.MouseCursor.ResizeNWSE",
    "description":"[C++] ImGuiMouseCursor_ResizeNWSE = 6\n\n"
  },
  "imgui.ImGuiIO.KeyAlt":{
    "scope":"lua",
    "body":"ImGuiIO.KeyAlt",
    "prefix":"ImGuiIO.KeyAlt",
    "description":"[C++] bool ImGuiIO::KeyAlt\n\n"
  },
  "imgui.igGetScrollMaxY":{
    "scope":"lua",
    "body":"imgui.GetScrollMaxY()",
    "prefix":"imgui.GetScrollMaxY",
    "description":"[C++] float ImGui::GetScrollMaxY()\n\n"
  },
  "imgui.igLoadIniSettingsFromDisk":{
    "scope":"lua",
    "body":"imgui.LoadIniSettingsFromDisk(${1:ini_filename})",
    "prefix":"imgui.LoadIniSettingsFromDisk",
    "description":"[C++] void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)\n\n"
  },
  "imgui.ImGuiStyle.WindowPadding":{
    "scope":"lua",
    "body":"ImGuiStyle.WindowPadding",
    "prefix":"ImGuiStyle.WindowPadding",
    "description":"[C++] ImVec2 ImGuiStyle::WindowPadding\n\n"
  },
  "imgui.ImGuiIO.KeyCtrl":{
    "scope":"lua",
    "body":"ImGuiIO.KeyCtrl",
    "prefix":"ImGuiIO.KeyCtrl",
    "description":"[C++] bool ImGuiIO::KeyCtrl\n\n"
  },
  "imgui.ImFontConfig.FontNo":{
    "scope":"lua",
    "body":"ImFontConfig.FontNo",
    "prefix":"ImFontConfig.FontNo",
    "description":"[C++] int ImFontConfig::FontNo\n\n"
  },
  "imgui.igIsItemActivated":{
    "scope":"lua",
    "body":"imgui.IsItemActivated()",
    "prefix":"imgui.IsItemActivated",
    "description":"[C++] bool ImGui::IsItemActivated()\n\n"
  },
  "imgui.ImGuiNavInput_FocusNext":{
    "scope":"lua",
    "body":"imgui.NavInput.FocusNext",
    "prefix":"imgui.NavInput.FocusNext",
    "description":"[C++] ImGuiNavInput_FocusNext = 13\n\n"
  },
  "imgui.ImGuiListClipper_ImGuiListClipper":{
    "scope":"lua",
    "body":"imgui.ImGuiListClipper(${1:[items_count=-1]}${2:[, items_height=-1.0f]})",
    "prefix":"imgui.ImGuiListClipper",
    "description":"[C++] ImGuiListClipper(int items_count=-1, float items_height=-1.0f)\n\n"
  },
  "imgui.ImGuiStyle.SelectableTextAlign":{
    "scope":"lua",
    "body":"ImGuiStyle.SelectableTextAlign",
    "prefix":"ImGuiStyle.SelectableTextAlign",
    "description":"[C++] ImVec2 ImGuiStyle::SelectableTextAlign\n\n"
  },
  "imgui.igColorConvertRGBtoHSV":{
    "scope":"lua",
    "body":"imgui.ColorConvertRGBtoHSV(${1:r}, ${2:g}, ${3:b}, ${4:out_h}, ${5:out_s}, ${6:out_v})",
    "prefix":"imgui.ColorConvertRGBtoHSV",
    "description":"[C++] void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_front":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:front()",
    "prefix":"ImVector_ImGuiStoragePair:front",
    "description":"[C++] ImGuiStoragePair* ImVector_ImGuiStoragePair::front(ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImGuiIO.MouseDown[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDown[5]",
    "prefix":"ImGuiIO.MouseDown[5]",
    "description":"[C++] bool ImGuiIO::MouseDown[5]\n\n"
  },
  "imgui.ImVector_ImDrawChannel__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImDrawChannel:_grow_capacity",
    "description":"[C++] int ImVector_ImDrawChannel::_grow_capacity(const ImVector_ImDrawChannel* self, int sz)\n\n"
  },
  "imgui.ImGuiCond_FirstUseEver":{
    "scope":"lua",
    "body":"imgui.Cond.FirstUseEver",
    "prefix":"imgui.Cond.FirstUseEver",
    "description":"[C++] ImGuiCond_FirstUseEver = 1 << 2\n\n"
  },
  "imgui.ImVector_ImFontGlyph_back":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:back()",
    "prefix":"ImVector_ImFontGlyph:back",
    "description":"[C++] ImFontGlyph* ImVector_ImFontGlyph::back(ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImVector_ImTextureID_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImTextureID:erase",
    "description":"[C++] ImTextureID* ImVector_ImTextureID::erase(ImVector_ImTextureID* self, ImTextureID const * it, ImTextureID const * it_last)\n\n"
  },
  "imgui.ImGuiIO.ImeSetInputScreenPosFn":{
    "scope":"lua",
    "body":"ImGuiIO.ImeSetInputScreenPosFn",
    "prefix":"ImGuiIO.ImeSetInputScreenPosFn",
    "description":"[C++] void(*)(int x,int y) ImGuiIO::ImeSetInputScreenPosFn\n\n"
  },
  "imgui.ImGuiIO.ClipboardUserData":{
    "scope":"lua",
    "body":"ImGuiIO.ClipboardUserData",
    "prefix":"ImGuiIO.ClipboardUserData",
    "description":"[C++] void* ImGuiIO::ClipboardUserData\n\n"
  },
  "imgui.ImGuiWindowFlags_NoNav":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoNav",
    "prefix":"imgui.WindowFlags.NoNav",
    "description":"[C++] ImGuiWindowFlags_NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus\n\n"
  },
  "imgui.ImGuiIO.SetClipboardTextFn":{
    "scope":"lua",
    "body":"ImGuiIO.SetClipboardTextFn",
    "prefix":"ImGuiIO.SetClipboardTextFn",
    "description":"[C++] void(*)(void* user_data,const char* text) ImGuiIO::SetClipboardTextFn\n\n"
  },
  "imgui.ImGuiTextFilter_ImGuiTextFilter":{
    "scope":"lua",
    "body":"imgui.ImGuiTextFilter(${1:[default_filter=\"\"]})",
    "prefix":"imgui.ImGuiTextFilter",
    "description":"[C++] ImGuiTextFilter(const char* default_filter=\"\")\n\n"
  },
  "imgui.ImGuiIO.GetClipboardTextFn":{
    "scope":"lua",
    "body":"ImGuiIO.GetClipboardTextFn",
    "prefix":"ImGuiIO.GetClipboardTextFn",
    "description":"[C++] const char*(*)(void* user_data) ImGuiIO::GetClipboardTextFn\n\n"
  },
  "imgui.ImGuiMouseCursor_ResizeAll":{
    "scope":"lua",
    "body":"imgui.MouseCursor.ResizeAll",
    "prefix":"imgui.MouseCursor.ResizeAll",
    "description":"[C++] ImGuiMouseCursor_ResizeAll = 2\n\n"
  },
  "imgui.ImGuiIO.BackendLanguageUserData":{
    "scope":"lua",
    "body":"ImGuiIO.BackendLanguageUserData",
    "prefix":"ImGuiIO.BackendLanguageUserData",
    "description":"[C++] void* ImGuiIO::BackendLanguageUserData\n\n"
  },
  "imgui.ImGuiIO.BackendRendererUserData":{
    "scope":"lua",
    "body":"ImGuiIO.BackendRendererUserData",
    "prefix":"ImGuiIO.BackendRendererUserData",
    "description":"[C++] void* ImGuiIO::BackendRendererUserData\n\n"
  },
  "imgui.ImVector_ImFontGlyph_clear":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:clear()",
    "prefix":"ImVector_ImFontGlyph:clear",
    "description":"[C++] void ImVector_ImFontGlyph::clear(ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImVector_ImWchar_back":{
    "scope":"lua",
    "body":"ImVector_ImWchar:back()",
    "prefix":"ImVector_ImWchar:back",
    "description":"[C++] ImWchar* ImVector_ImWchar::back(ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_clear":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:clear()",
    "prefix":"ImVector_ImDrawChannel:clear",
    "description":"[C++] void ImVector_ImDrawChannel::clear(ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImFontAtlasCustomRect.X":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect.X",
    "prefix":"ImFontAtlasCustomRect.X",
    "description":"[C++] unsigned short ImFontAtlasCustomRect::X\n\n"
  },
  "imgui.ImFontAtlas_ClearInputData":{
    "scope":"lua",
    "body":"ImFontAtlas:ClearInputData()",
    "prefix":"ImFontAtlas:ClearInputData",
    "description":"[C++] void ImFontAtlas::ClearInputData()\n\n"
  },
  "imgui.ImVector_swap":{
    "scope":"lua",
    "body":"ImVector:swap(${1:rhs})",
    "prefix":"ImVector:swap",
    "description":"[C++] void ImVector::swap(ImVector<T>& rhs)\n\n"
  },
  "imgui.ImGuiIO.BackendRendererName":{
    "scope":"lua",
    "body":"ImGuiIO.BackendRendererName",
    "prefix":"ImGuiIO.BackendRendererName",
    "description":"[C++] const char* ImGuiIO::BackendRendererName\n\n"
  },
  "imgui.igSetStateStorage":{
    "scope":"lua",
    "body":"imgui.SetStateStorage(${1:storage})",
    "prefix":"imgui.SetStateStorage",
    "description":"[C++] void ImGui::SetStateStorage(ImGuiStorage* storage)\n\n"
  },
  "imgui.ImGuiIO.ConfigWindowsMoveFromTitleBarOnly":{
    "scope":"lua",
    "body":"ImGuiIO.ConfigWindowsMoveFromTitleBarOnly",
    "prefix":"ImGuiIO.ConfigWindowsMoveFromTitleBarOnly",
    "description":"[C++] bool ImGuiIO::ConfigWindowsMoveFromTitleBarOnly\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImFontAtlasCustomRect:erase",
    "description":"[C++] ImFontAtlasCustomRect* ImVector_ImFontAtlasCustomRect::erase(ImVector_ImFontAtlasCustomRect* self, ImFontAtlasCustomRect const * it, ImFontAtlasCustomRect const * it_last)\n\n"
  },
  "imgui.ImGuiWindowFlags_NoNavFocus":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoNavFocus",
    "prefix":"imgui.WindowFlags.NoNavFocus",
    "description":"[C++] ImGuiWindowFlags_NoNavFocus = 1 << 19\n\n"
  },
  "imgui.ImGuiIO.ConfigMacOSXBehaviors":{
    "scope":"lua",
    "body":"ImGuiIO.ConfigMacOSXBehaviors",
    "prefix":"ImGuiIO.ConfigMacOSXBehaviors",
    "description":"[C++] bool ImGuiIO::ConfigMacOSXBehaviors\n\n"
  },
  "imgui.ImGuiWindowFlags_HorizontalScrollbar":{
    "scope":"lua",
    "body":"imgui.WindowFlags.HorizontalScrollbar",
    "prefix":"imgui.WindowFlags.HorizontalScrollbar",
    "description":"[C++] ImGuiWindowFlags_HorizontalScrollbar = 1 << 11\n\n"
  },
  "imgui.ImVector_ImFontConfig_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImFontConfig:resize",
    "description":"[C++] void ImVector_ImFontConfig::resize(ImVector_ImFontConfig* self, int new_size, const ImFontConfig v)\n\n"
  },
  "imgui.ImGuiIO.MouseDoubleClicked[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDoubleClicked[5]",
    "prefix":"ImGuiIO.MouseDoubleClicked[5]",
    "description":"[C++] bool ImGuiIO::MouseDoubleClicked[5]\n\n"
  },
  "imgui.ImVector_ImDrawCmd_insert":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImDrawCmd:insert",
    "description":"[C++] ImDrawCmd* ImVector_ImDrawCmd::insert(ImVector_ImDrawCmd* self, ImDrawCmd const * it, const ImDrawCmd v)\n\n"
  },
  "imgui.igGetBackgroundDrawList":{
    "scope":"lua",
    "body":"imgui.GetBackgroundDrawList()",
    "prefix":"imgui.GetBackgroundDrawList",
    "description":"[C++] ImDrawList* ImGui::GetBackgroundDrawList()\n\n"
  },
  "imgui.igGetMousePos":{
    "scope":"lua",
    "body":"imgui.GetMousePos()",
    "prefix":"imgui.GetMousePos",
    "description":"[C++] ImVec2 ImGui::GetMousePos()\n\n"
  },
  "imgui.ImGuiIO.FontGlobalScale":{
    "scope":"lua",
    "body":"ImGuiIO.FontGlobalScale",
    "prefix":"ImGuiIO.FontGlobalScale",
    "description":"[C++] float ImGuiIO::FontGlobalScale\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.NoAutoOpenOnLog",
    "prefix":"imgui.TreeNodeFlags.NoAutoOpenOnLog",
    "description":"[C++] ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4\n\n"
  },
  "imgui.ImGuiStyle_ImGuiStyle":{
    "scope":"lua",
    "body":"imgui.ImGuiStyle()",
    "prefix":"imgui.ImGuiStyle",
    "description":"[C++] ImGuiStyle()\n\n"
  },
  "imgui.ImVector_ImDrawChannel_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImDrawChannel:index_from_ptr",
    "description":"[C++] int ImVector_ImDrawChannel::index_from_ptr(const ImVector_ImDrawChannel* self, ImDrawChannel const * it)\n\n"
  },
  "imgui.ImVector_ImVec2_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImVec2:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImVec2:resize",
    "description":"[C++] void ImVector_ImVec2::resize(ImVector_ImVec2* self, int new_size, const ImVec2 v)\n\n"
  },
  "imgui.ImColor_HSV":{
    "scope":"lua",
    "body":"ImColor:HSV(${1:h}, ${2:s}, ${3:v}${4:[, a=1.0f]})",
    "prefix":"ImColor:HSV",
    "description":"[C++] ImColor ImColor::HSV(float h, float s, float v, float a=1.0f)\n\n"
  },
  "imgui.ImFontAtlas_AddCustomRectFontGlyph":{
    "scope":"lua",
    "body":"ImFontAtlas:AddCustomRectFontGlyph(${1:font}, ${2:id}, ${3:width}, ${4:height}, ${5:advance_x}${6:[, offset=ImVec2(0,0)]})",
    "prefix":"ImFontAtlas:AddCustomRectFontGlyph",
    "description":"[C++] int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset=ImVec2(0, 0))\n\n"
  },
  "imgui.ImVector_ImDrawIdx_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImDrawIdx:index_from_ptr",
    "description":"[C++] int ImVector_ImDrawIdx::index_from_ptr(const ImVector_ImDrawIdx* self, ImDrawIdx const * it)\n\n"
  },
  "imgui.igSetWindowPosStr":{
    "scope":"lua",
    "body":"imgui.SetWindowPosStr(${1:name}, ${2:pos}${3:[, cond=0]})",
    "prefix":"imgui.SetWindowPos",
    "description":"[C++] void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond=0)\n\n"
  },
  "imgui.ImVector_ImWchar_contains":{
    "scope":"lua",
    "body":"ImVector_ImWchar:contains(${1:v})",
    "prefix":"ImVector_ImWchar:contains",
    "description":"[C++] bool ImVector_ImWchar::contains(const ImVector_ImWchar* self, const ImWchar v)\n\n"
  },
  "imgui.igShowUserGuide":{
    "scope":"lua",
    "body":"imgui.ShowUserGuide()",
    "prefix":"imgui.ShowUserGuide",
    "description":"[C++] void ImGui::ShowUserGuide()\n\n"
  },
  "imgui.ImVector_char_resizeT":{
    "scope":"lua",
    "body":"ImVector_char:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_char:resize",
    "description":"[C++] void ImVector_char::resize(ImVector_char* self, int new_size, const char v)\n\n"
  },
  "imgui.ImGuiIO.FontAllowUserScaling":{
    "scope":"lua",
    "body":"ImGuiIO.FontAllowUserScaling",
    "prefix":"ImGuiIO.FontAllowUserScaling",
    "description":"[C++] bool ImGuiIO::FontAllowUserScaling\n\n"
  },
  "imgui.ImGuiIO.MouseDoubleClickMaxDist":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDoubleClickMaxDist",
    "prefix":"ImGuiIO.MouseDoubleClickMaxDist",
    "description":"[C++] float ImGuiIO::MouseDoubleClickMaxDist\n\n"
  },
  "imgui.new":{
    "scope":"lua",
    "body":"imgui.new",
    "prefix":"imgui.new",
    "description":"[mimgui special type]\n\nUsage:\n-- alloc var TYPE[1]\nnew.TYPE()\n-- same. alloc var TYPE[1]\nnew.TYPE[1]()\n-- alloc var TYPE[10][20]\nnew.TYPE[10][20]()\n-- alloc var with initializer values\nnew.TYPE[2](init1, init2)\n-- alloc var TYPE (not TYPE[1]) with initializer value\nnew('TYPE', init1)\n\n"
  },
  "imgui.CreateTextureFromFileInMemory":{
    "scope":"lua",
    "body":"imgui.CreateTextureFromFileInMemory(${1:src}, ${2:size})",
    "prefix":"imgui.CreateTextureFromFileInMemory",
    "description":"[mimgui function]\n\nReturns: cdata<LPDIRECT3DTEXTURE9> tex\n\n"
  },
  "imgui.ImGuiIO.LogFilename":{
    "scope":"lua",
    "body":"ImGuiIO.LogFilename",
    "prefix":"ImGuiIO.LogFilename",
    "description":"[C++] const char* ImGuiIO::LogFilename\n\n"
  },
  "imgui.ImGuiCol_TitleBg":{
    "scope":"lua",
    "body":"imgui.Col.TitleBg",
    "prefix":"imgui.Col.TitleBg",
    "description":"[C++] ImGuiCol_TitleBg = 10\n\n"
  },
  "imgui.ImGuiIO.DeltaTime":{
    "scope":"lua",
    "body":"ImGuiIO.DeltaTime",
    "prefix":"ImGuiIO.DeltaTime",
    "description":"[C++] float ImGuiIO::DeltaTime\n\n"
  },
  "imgui.ImGuiWindowFlags_NoScrollbar":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoScrollbar",
    "prefix":"imgui.WindowFlags.NoScrollbar",
    "description":"[C++] ImGuiWindowFlags_NoScrollbar = 1 << 3\n\n"
  },
  "imgui.ImGuiIO.DisplaySize":{
    "scope":"lua",
    "body":"ImGuiIO.DisplaySize",
    "prefix":"ImGuiIO.DisplaySize",
    "description":"[C++] ImVec2 ImGuiIO::DisplaySize\n\n"
  },
  "imgui.ImVector_ImDrawVert_front":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:front()",
    "prefix":"ImVector_ImDrawVert:front",
    "description":"[C++] ImDrawVert* ImVector_ImDrawVert::front(ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImGuiID":{
    "scope":"lua",
    "body":"new.ImGuiID($1)",
    "prefix":"new.ImGuiID",
    "description":"typedef unsigned int ImGuiID\n\n"
  },
  "imgui.ImDrawVert.col":{
    "scope":"lua",
    "body":"ImDrawVert.col",
    "prefix":"ImDrawVert.col",
    "description":"[C++] ImU32 ImDrawVert::col\n\n"
  },
  "imgui.igSmallButton":{
    "scope":"lua",
    "body":"imgui.SmallButton(${1:label})",
    "prefix":"imgui.SmallButton",
    "description":"[C++] bool ImGui::SmallButton(const char* label)\n\n"
  },
  "imgui.ImDrawList._IdxWritePtr":{
    "scope":"lua",
    "body":"ImDrawList._IdxWritePtr",
    "prefix":"ImDrawList._IdxWritePtr",
    "description":"[C++] ImDrawIdx* ImDrawList::_IdxWritePtr\n\n"
  },
  "imgui.ImVector_insert":{
    "scope":"lua",
    "body":"ImVector:insert(${1:it}, ${2:v})",
    "prefix":"ImVector:insert",
    "description":"[C++] T* ImVector::insert(const T* it, const T& v)\n\n"
  },
  "imgui.ImGuiTabBarFlags_Reorderable":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.Reorderable",
    "prefix":"imgui.TabBarFlags.Reorderable",
    "description":"[C++] ImGuiTabBarFlags_Reorderable = 1 << 0\n\n"
  },
  "imgui.igGetTextLineHeightWithSpacing":{
    "scope":"lua",
    "body":"imgui.GetTextLineHeightWithSpacing()",
    "prefix":"imgui.GetTextLineHeightWithSpacing",
    "description":"[C++] float ImGui::GetTextLineHeightWithSpacing()\n\n"
  },
  "imgui.ImGuiPayload":{
    "scope":"lua",
    "body":"new.ImGuiPayload($1)",
    "prefix":"new.ImGuiPayload",
    "description":"typedef struct ImGuiPayload ImGuiPayload\n\n"
  },
  "imgui.ImDrawChannel._IdxBuffer":{
    "scope":"lua",
    "body":"ImDrawChannel._IdxBuffer",
    "prefix":"ImDrawChannel._IdxBuffer",
    "description":"[C++] ImVector_ImDrawIdx ImDrawChannel::_IdxBuffer\n\n"
  },
  "imgui.ImGuiBackendFlags":{
    "scope":"lua",
    "body":"new.ImGuiBackendFlags($1)",
    "prefix":"new.ImGuiBackendFlags",
    "description":"typedef int ImGuiBackendFlags\n\n"
  },
  "imgui.ImGuiTextFilter.CountGrep":{
    "scope":"lua",
    "body":"ImGuiTextFilter.CountGrep",
    "prefix":"ImGuiTextFilter.CountGrep",
    "description":"[C++] int ImGuiTextFilter::CountGrep\n\n"
  },
  "imgui.ImVector_ImVec2__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImVec2:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImVec2:_grow_capacity",
    "description":"[C++] int ImVector_ImVec2::_grow_capacity(const ImVector_ImVec2* self, int sz)\n\n"
  },
  "imgui.ImVec4.x":{
    "scope":"lua",
    "body":"ImVec4.x",
    "prefix":"ImVec4.x",
    "description":"[C++] float ImVec4::x\n\n"
  },
  "imgui.ImGuiListClipper.DisplayEnd":{
    "scope":"lua",
    "body":"ImGuiListClipper.DisplayEnd",
    "prefix":"ImGuiListClipper.DisplayEnd",
    "description":"[C++] int ImGuiListClipper::DisplayEnd\n\n"
  },
  "imgui.ImGuiStyle.TabRounding":{
    "scope":"lua",
    "body":"ImGuiStyle.TabRounding",
    "prefix":"ImGuiStyle.TabRounding",
    "description":"[C++] float ImGuiStyle::TabRounding\n\n"
  },
  "imgui.ImGuiTextBuffer.Buf":{
    "scope":"lua",
    "body":"ImGuiTextBuffer.Buf",
    "prefix":"ImGuiTextBuffer.Buf",
    "description":"[C++] ImVector_char ImGuiTextBuffer::Buf\n\n"
  },
  "imgui.ImGuiListClipper.StartPosY":{
    "scope":"lua",
    "body":"ImGuiListClipper.StartPosY",
    "prefix":"ImGuiListClipper.StartPosY",
    "description":"[C++] float ImGuiListClipper::StartPosY\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder.UsedChars":{
    "scope":"lua",
    "body":"ImFontGlyphRangesBuilder.UsedChars",
    "prefix":"ImFontGlyphRangesBuilder.UsedChars",
    "description":"[C++] ImVector_ImU32 ImFontGlyphRangesBuilder::UsedChars\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoInputs":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoInputs",
    "prefix":"imgui.ColorEditFlags.NoInputs",
    "description":"[C++] ImGuiColorEditFlags_NoInputs = 1 << 5\n\n"
  },
  "imgui.ImGuiDragDropFlags_AcceptBeforeDelivery":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.AcceptBeforeDelivery",
    "prefix":"imgui.DragDropFlags.AcceptBeforeDelivery",
    "description":"[C++] ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10\n\n"
  },
  "imgui.ImVec2.y":{
    "scope":"lua",
    "body":"ImVec2.y",
    "prefix":"ImVec2.y",
    "description":"[C++] float ImVec2::y\n\n"
  },
  "imgui.ImDrawList._Splitter":{
    "scope":"lua",
    "body":"ImDrawList._Splitter",
    "prefix":"ImDrawList._Splitter",
    "description":"[C++] ImDrawListSplitter ImDrawList::_Splitter\n\n"
  },
  "imgui.ImGuiMouseCursor_Hand":{
    "scope":"lua",
    "body":"imgui.MouseCursor.Hand",
    "prefix":"imgui.MouseCursor.Hand",
    "description":"[C++] ImGuiMouseCursor_Hand = 7\n\n"
  },
  "imgui.ImVector_ImWchar_insert":{
    "scope":"lua",
    "body":"ImVector_ImWchar:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImWchar:insert",
    "description":"[C++] ImWchar* ImVector_ImWchar::insert(ImVector_ImWchar* self, ImWchar const * it, const ImWchar v)\n\n"
  },
  "imgui.igGetStyle":{
    "scope":"lua",
    "body":"imgui.GetStyle()",
    "prefix":"imgui.GetStyle",
    "description":"[C++] ImGuiStyle* ImGui::GetStyle()\n\n"
  },
  "imgui.ImDrawList._ClipRectStack":{
    "scope":"lua",
    "body":"ImDrawList._ClipRectStack",
    "prefix":"ImDrawList._ClipRectStack",
    "description":"[C++] ImVector_ImVec4 ImDrawList::_ClipRectStack\n\n"
  },
  "imgui.ImDrawVert.uv":{
    "scope":"lua",
    "body":"ImDrawVert.uv",
    "prefix":"ImDrawVert.uv",
    "description":"[C++] ImVec2 ImDrawVert::uv\n\n"
  },
  "imgui.ImDrawList_AddConvexPolyFilled":{
    "scope":"lua",
    "body":"ImDrawList:AddConvexPolyFilled(${1:points}, ${2:num_points}, ${3:col})",
    "prefix":"ImDrawList:AddConvexPolyFilled",
    "description":"[C++] void ImDrawList::AddConvexPolyFilled(const ImVec2* points, int num_points, ImU32 col)\n\n"
  },
  "imgui.ImDrawList._VtxCurrentOffset":{
    "scope":"lua",
    "body":"ImDrawList._VtxCurrentOffset",
    "prefix":"ImDrawList._VtxCurrentOffset",
    "description":"[C++] unsigned int ImDrawList::_VtxCurrentOffset\n\n"
  },
  "imgui.ImGuiIO.UserData":{
    "scope":"lua",
    "body":"ImGuiIO.UserData",
    "prefix":"ImGuiIO.UserData",
    "description":"[C++] void* ImGuiIO::UserData\n\n"
  },
  "imgui.ImGuiStoragePair.key":{
    "scope":"lua",
    "body":"ImGuiStoragePair.key",
    "prefix":"ImGuiStoragePair.key",
    "description":"[C++] ImGuiID ImGuiStoragePair::key\n\n"
  },
  "imgui.igIsMouseDown":{
    "scope":"lua",
    "body":"imgui.IsMouseDown(${1:button})",
    "prefix":"imgui.IsMouseDown",
    "description":"[C++] bool ImGui::IsMouseDown(int button)\n\n"
  },
  "imgui.igGetItemRectMin":{
    "scope":"lua",
    "body":"imgui.GetItemRectMin()",
    "prefix":"imgui.GetItemRectMin",
    "description":"[C++] ImVec2 ImGui::GetItemRectMin()\n\n"
  },
  "imgui.ImGuiColorEditFlags__DisplayMask":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags._DisplayMask",
    "prefix":"imgui.ColorEditFlags._DisplayMask",
    "description":"[C++] ImGuiColorEditFlags__DisplayMask = ImGuiColorEditFlags_DisplayRGB|ImGuiColorEditFlags_DisplayHSV|ImGuiColorEditFlags_DisplayHex\n\n"
  },
  "imgui.ImGuiCond_Always":{
    "scope":"lua",
    "body":"imgui.Cond.Always",
    "prefix":"imgui.Cond.Always",
    "description":"[C++] ImGuiCond_Always = 1 << 0\n\n"
  },
  "imgui.ImDrawList.VtxBuffer":{
    "scope":"lua",
    "body":"ImDrawList.VtxBuffer",
    "prefix":"ImDrawList.VtxBuffer",
    "description":"[C++] ImVector_ImDrawVert ImDrawList::VtxBuffer\n\n"
  },
  "imgui.ImVector_ImDrawChannel_empty":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:empty()",
    "prefix":"ImVector_ImDrawChannel:empty",
    "description":"[C++] bool ImVector_ImDrawChannel::empty(const ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImDrawList.IdxBuffer":{
    "scope":"lua",
    "body":"ImDrawList.IdxBuffer",
    "prefix":"ImDrawList.IdxBuffer",
    "description":"[C++] ImVector_ImDrawIdx ImDrawList::IdxBuffer\n\n"
  },
  "imgui.ImVector_ImU32_capacity":{
    "scope":"lua",
    "body":"ImVector_ImU32:capacity()",
    "prefix":"ImVector_ImU32:capacity",
    "description":"[C++] int ImVector_ImU32::capacity(const ImVector_ImU32* self)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_resize":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:resize(${1:new_size})",
    "prefix":"ImVector_ImGuiTextRange:resize",
    "description":"[C++] void ImVector_ImGuiTextRange::resize(ImVector_ImGuiTextRange* self, int new_size)\n\n"
  },
  "imgui.ImGuiComboFlags_NoPreview":{
    "scope":"lua",
    "body":"imgui.ComboFlags.NoPreview",
    "prefix":"imgui.ComboFlags.NoPreview",
    "description":"[C++] ImGuiComboFlags_NoPreview = 1 << 6\n\n"
  },
  "imgui.ImGuiInputTextFlags_CallbackResize":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CallbackResize",
    "prefix":"imgui.InputTextFlags.CallbackResize",
    "description":"[C++] ImGuiInputTextFlags_CallbackResize = 1 << 18\n\n"
  },
  "imgui.ImFontConfig.DstFont":{
    "scope":"lua",
    "body":"ImFontConfig.DstFont",
    "prefix":"ImFontConfig.DstFont",
    "description":"[C++] ImFont* ImFontConfig::DstFont\n\n"
  },
  "imgui.ImVector_float_reserve":{
    "scope":"lua",
    "body":"ImVector_float:reserve(${1:new_capacity})",
    "prefix":"ImVector_float:reserve",
    "description":"[C++] void ImVector_float::reserve(ImVector_float* self, int new_capacity)\n\n"
  },
  "imgui.ImGuiStyle.TouchExtraPadding":{
    "scope":"lua",
    "body":"ImGuiStyle.TouchExtraPadding",
    "prefix":"ImGuiStyle.TouchExtraPadding",
    "description":"[C++] ImVec2 ImGuiStyle::TouchExtraPadding\n\n"
  },
  "imgui.ImFontConfig.RasterizerMultiply":{
    "scope":"lua",
    "body":"ImFontConfig.RasterizerMultiply",
    "prefix":"ImFontConfig.RasterizerMultiply",
    "description":"[C++] float ImFontConfig::RasterizerMultiply\n\n"
  },
  "imgui.ImVector_ImDrawVert_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImDrawVert:erase_unsorted",
    "description":"[C++] ImDrawVert* ImVector_ImDrawVert::erase_unsorted(ImVector_ImDrawVert* self, ImDrawVert const * it)\n\n"
  },
  "imgui.ImFontConfig.RasterizerFlags":{
    "scope":"lua",
    "body":"ImFontConfig.RasterizerFlags",
    "prefix":"ImFontConfig.RasterizerFlags",
    "description":"[C++] unsigned int ImFontConfig::RasterizerFlags\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_ImVector_ImFontAtlasCustomRect":{
    "scope":"lua",
    "body":"imgui.ImVector_ImFontAtlasCustomRect()",
    "prefix":"imgui.ImVector_ImFontAtlasCustomRect",
    "description":"[C++] ImVector_ImFontAtlasCustomRect()\n\n"
  },
  "imgui.ImFontConfig.GlyphMaxAdvanceX":{
    "scope":"lua",
    "body":"ImFontConfig.GlyphMaxAdvanceX",
    "prefix":"ImFontConfig.GlyphMaxAdvanceX",
    "description":"[C++] float ImFontConfig::GlyphMaxAdvanceX\n\n"
  },
  "imgui.ImVector_char_push_front":{
    "scope":"lua",
    "body":"ImVector_char:push_front(${1:v})",
    "prefix":"ImVector_char:push_front",
    "description":"[C++] void ImVector_char::push_front(ImVector_char* self, const char v)\n\n"
  },
  "imgui.ImFontAtlas_AddFontFromMemoryTTF":{
    "scope":"lua",
    "body":"ImFontAtlas:AddFontFromMemoryTTF(${1:font_data}, ${2:font_size}, ${3:size_pixels}${4:[, font_cfg=((void*)0)]}${5:[, glyph_ranges=((void*)0)]})",
    "prefix":"ImFontAtlas:AddFontFromMemoryTTF",
    "description":"[C++] ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg=((void*)0), const ImWchar* glyph_ranges=((void*)0))\n\n"
  },
  "imgui.igSliderFloat":{
    "scope":"lua",
    "body":"imgui.SliderFloat(${1:label}, ${2:v}, ${3:v_min}, ${4:v_max}${5:[, format=\"%.3f\"]}${6:[, power=1.0f]})",
    "prefix":"imgui.SliderFloat",
    "description":"[C++] bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.ImFontConfig.PixelSnapH":{
    "scope":"lua",
    "body":"ImFontConfig.PixelSnapH",
    "prefix":"ImFontConfig.PixelSnapH",
    "description":"[C++] bool ImFontConfig::PixelSnapH\n\n"
  },
  "imgui.ImFont_GrowIndex":{
    "scope":"lua",
    "body":"ImFont:GrowIndex(${1:new_size})",
    "prefix":"ImFont:GrowIndex",
    "description":"[C++] void ImFont::GrowIndex(int new_size)\n\n"
  },
  "imgui.ImFontConfig.GlyphMinAdvanceX":{
    "scope":"lua",
    "body":"ImFontConfig.GlyphMinAdvanceX",
    "prefix":"ImFontConfig.GlyphMinAdvanceX",
    "description":"[C++] float ImFontConfig::GlyphMinAdvanceX\n\n"
  },
  "imgui.ImFontConfig.OversampleV":{
    "scope":"lua",
    "body":"ImFontConfig.OversampleV",
    "prefix":"ImFontConfig.OversampleV",
    "description":"[C++] int ImFontConfig::OversampleV\n\n"
  },
  "imgui.ImFontConfig.OversampleH":{
    "scope":"lua",
    "body":"ImFontConfig.OversampleH",
    "prefix":"ImFontConfig.OversampleH",
    "description":"[C++] int ImFontConfig::OversampleH\n\n"
  },
  "imgui.ImGuiConfigFlags_NoMouse":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.NoMouse",
    "prefix":"imgui.ConfigFlags.NoMouse",
    "description":"[C++] ImGuiConfigFlags_NoMouse = 1 << 4\n\n"
  },
  "imgui.ImGuiPayload_Clear":{
    "scope":"lua",
    "body":"ImGuiPayload:Clear()",
    "prefix":"ImGuiPayload:Clear",
    "description":"[C++] void ImGuiPayload::Clear()\n\n"
  },
  "imgui.igSetDragDropPayload":{
    "scope":"lua",
    "body":"imgui.SetDragDropPayload(${1:type}, ${2:data}, ${3:sz}${4:[, cond=0]})",
    "prefix":"imgui.SetDragDropPayload",
    "description":"[C++] bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond=0)\n\n"
  },
  "imgui.ImFontConfig.SizePixels":{
    "scope":"lua",
    "body":"ImFontConfig.SizePixels",
    "prefix":"ImFontConfig.SizePixels",
    "description":"[C++] float ImFontConfig::SizePixels\n\n"
  },
  "imgui.ImVector_ImU32_begin":{
    "scope":"lua",
    "body":"ImVector_ImU32:begin()",
    "prefix":"ImVector_ImU32:begin",
    "description":"[C++] ImU32* ImVector_ImU32::begin(ImVector_ImU32* self)\n\n"
  },
  "imgui.ImFontConfig.FontDataOwnedByAtlas":{
    "scope":"lua",
    "body":"ImFontConfig.FontDataOwnedByAtlas",
    "prefix":"ImFontConfig.FontDataOwnedByAtlas",
    "description":"[C++] bool ImFontConfig::FontDataOwnedByAtlas\n\n"
  },
  "imgui.ImGuiInputTextFlags_AutoSelectAll":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.AutoSelectAll",
    "prefix":"imgui.InputTextFlags.AutoSelectAll",
    "description":"[C++] ImGuiInputTextFlags_AutoSelectAll = 1 << 4\n\n"
  },
  "imgui.ImFont_RenderChar":{
    "scope":"lua",
    "body":"ImFont:RenderChar(${1:draw_list}, ${2:size}, ${3:pos}, ${4:col}, ${5:c})",
    "prefix":"ImFont:RenderChar",
    "description":"[C++] void ImFont::RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImGuiStoragePair:erase_unsorted",
    "description":"[C++] ImGuiStoragePair* ImVector_ImGuiStoragePair::erase_unsorted(ImVector_ImGuiStoragePair* self, ImGuiStoragePair const * it)\n\n"
  },
  "imgui.igIsItemVisible":{
    "scope":"lua",
    "body":"imgui.IsItemVisible()",
    "prefix":"imgui.IsItemVisible",
    "description":"[C++] bool ImGui::IsItemVisible()\n\n"
  },
  "imgui.ImGuiInputTextFlags_ReadOnly":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.ReadOnly",
    "prefix":"imgui.InputTextFlags.ReadOnly",
    "description":"[C++] ImGuiInputTextFlags_ReadOnly = 1 << 14\n\n"
  },
  "imgui.ImGuiKey_Y":{
    "scope":"lua",
    "body":"imgui.Key.Y",
    "prefix":"imgui.Key.Y",
    "description":"[C++] ImGuiKey_Y = 20\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImGuiStoragePair:index_from_ptr",
    "description":"[C++] int ImVector_ImGuiStoragePair::index_from_ptr(const ImVector_ImGuiStoragePair* self, ImGuiStoragePair const * it)\n\n"
  },
  "imgui.ImGuiKey_X":{
    "scope":"lua",
    "body":"imgui.Key.X",
    "prefix":"imgui.Key.X",
    "description":"[C++] ImGuiKey_X = 19\n\n"
  },
  "imgui.ImGuiKey_Enter":{
    "scope":"lua",
    "body":"imgui.Key.Enter",
    "prefix":"imgui.Key.Enter",
    "description":"[C++] ImGuiKey_Enter = 13\n\n"
  },
  "imgui.ImGuiKey_Backspace":{
    "scope":"lua",
    "body":"imgui.Key.Backspace",
    "prefix":"imgui.Key.Backspace",
    "description":"[C++] ImGuiKey_Backspace = 11\n\n"
  },
  "imgui.igCheckbox":{
    "scope":"lua",
    "body":"imgui.Checkbox(${1:label}, ${2:v})",
    "prefix":"imgui.Checkbox",
    "description":"[C++] bool ImGui::Checkbox(const char* label, bool* v)\n\n"
  },
  "imgui.igSetWindowCollapsedStr":{
    "scope":"lua",
    "body":"imgui.SetWindowCollapsedStr(${1:name}, ${2:collapsed}${3:[, cond=0]})",
    "prefix":"imgui.SetWindowCollapsed",
    "description":"[C++] void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond=0)\n\n"
  },
  "imgui.ImGuiKey_Delete":{
    "scope":"lua",
    "body":"imgui.Key.Delete",
    "prefix":"imgui.Key.Delete",
    "description":"[C++] ImGuiKey_Delete = 10\n\n"
  },
  "imgui.igGetItemRectMax":{
    "scope":"lua",
    "body":"imgui.GetItemRectMax()",
    "prefix":"imgui.GetItemRectMax",
    "description":"[C++] ImVec2 ImGui::GetItemRectMax()\n\n"
  },
  "imgui.ImGuiKey_Insert":{
    "scope":"lua",
    "body":"imgui.Key.Insert",
    "prefix":"imgui.Key.Insert",
    "description":"[C++] ImGuiKey_Insert = 9\n\n"
  },
  "imgui.ImVector_ImDrawChannel_begin":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:begin()",
    "prefix":"ImVector_ImDrawChannel:begin",
    "description":"[C++] ImDrawChannel* ImVector_ImDrawChannel::begin(ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImGuiKey_End":{
    "scope":"lua",
    "body":"imgui.Key.End",
    "prefix":"imgui.Key.End",
    "description":"[C++] ImGuiKey_End = 8\n\n"
  },
  "imgui.ImGuiKey_PageUp":{
    "scope":"lua",
    "body":"imgui.Key.PageUp",
    "prefix":"imgui.Key.PageUp",
    "description":"[C++] ImGuiKey_PageUp = 5\n\n"
  },
  "imgui.igPopStyleVar":{
    "scope":"lua",
    "body":"imgui.PopStyleVar(${1:[count=1]})",
    "prefix":"imgui.PopStyleVar",
    "description":"[C++] void ImGui::PopStyleVar(int count=1)\n\n"
  },
  "imgui.ImGuiKey_DownArrow":{
    "scope":"lua",
    "body":"imgui.Key.DownArrow",
    "prefix":"imgui.Key.DownArrow",
    "description":"[C++] ImGuiKey_DownArrow = 4\n\n"
  },
  "imgui.ImDrawCmd.VtxOffset":{
    "scope":"lua",
    "body":"ImDrawCmd.VtxOffset",
    "prefix":"ImDrawCmd.VtxOffset",
    "description":"[C++] unsigned int ImDrawCmd::VtxOffset\n\n"
  },
  "imgui.ImGuiKey_RightArrow":{
    "scope":"lua",
    "body":"imgui.Key.RightArrow",
    "prefix":"imgui.Key.RightArrow",
    "description":"[C++] ImGuiKey_RightArrow = 2\n\n"
  },
  "imgui.igBeginChildID":{
    "scope":"lua",
    "body":"imgui.BeginChildID(${1:id}${2:[, size=ImVec2(0,0)]}${3:[, border=false]}${4:[, flags=0]})",
    "prefix":"imgui.BeginChild",
    "description":"[C++] bool ImGui::BeginChild(ImGuiID id, const ImVec2& size=ImVec2(0, 0), bool border=false, ImGuiWindowFlags flags=0)\n\n"
  },
  "imgui.ImVec4_ImVec4":{
    "scope":"lua",
    "body":"imgui.ImVec4()",
    "prefix":"imgui.ImVec4",
    "description":"[C++] ImVec4()\n\n"
  },
  "imgui.ImVector_float_empty":{
    "scope":"lua",
    "body":"ImVector_float:empty()",
    "prefix":"ImVector_float:empty",
    "description":"[C++] bool ImVector_float::empty(const ImVector_float* self)\n\n"
  },
  "imgui.ImGuiKey_LeftArrow":{
    "scope":"lua",
    "body":"imgui.Key.LeftArrow",
    "prefix":"imgui.Key.LeftArrow",
    "description":"[C++] ImGuiKey_LeftArrow = 1\n\n"
  },
  "imgui.ImFont_FindGlyphNoFallback":{
    "scope":"lua",
    "body":"ImFont:FindGlyphNoFallback(${1:c})",
    "prefix":"ImFont:FindGlyphNoFallback",
    "description":"[C++] const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c)\n\n"
  },
  "imgui.ImGuiKey_Tab":{
    "scope":"lua",
    "body":"imgui.Key.Tab",
    "prefix":"imgui.Key.Tab",
    "description":"[C++] ImGuiKey_Tab = 0\n\n"
  },
  "imgui.ImVector_ImDrawChannel_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:pop_back()",
    "prefix":"ImVector_ImDrawChannel:pop_back",
    "description":"[C++] void ImVector_ImDrawChannel::pop_back(ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImGuiDataType_COUNT":{
    "scope":"lua",
    "body":"imgui.DataType.COUNT",
    "prefix":"imgui.DataType.COUNT",
    "description":"[C++] ImGuiDataType_COUNT = 10\n\n"
  },
  "imgui.igBeginDragDropSource":{
    "scope":"lua",
    "body":"imgui.BeginDragDropSource(${1:[flags=0]})",
    "prefix":"imgui.BeginDragDropSource",
    "description":"[C++] bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags=0)\n\n"
  },
  "imgui.ImGuiDataType_U64":{
    "scope":"lua",
    "body":"imgui.DataType.U64",
    "prefix":"imgui.DataType.U64",
    "description":"[C++] ImGuiDataType_U64 = 7\n\n"
  },
  "imgui.ImVector_ImVec4_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImVec4:begin_const()",
    "prefix":"ImVector_ImVec4:begin",
    "description":"[C++] ImVec4 const * ImVector_ImVec4::begin(const ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImGuiDataType_U32":{
    "scope":"lua",
    "body":"imgui.DataType.U32",
    "prefix":"imgui.DataType.U32",
    "description":"[C++] ImGuiDataType_U32 = 5\n\n"
  },
  "imgui.ImVector_ImTextureID_end":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:_end()",
    "prefix":"ImVector_ImTextureID:end",
    "description":"[C++] ImTextureID* ImVector_ImTextureID::end(ImVector_ImTextureID* self)\n\n"
  },
  "imgui.ImGuiColorEditFlags__InputMask":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags._InputMask",
    "prefix":"imgui.ColorEditFlags._InputMask",
    "description":"[C++] ImGuiColorEditFlags__InputMask = ImGuiColorEditFlags_InputRGB|ImGuiColorEditFlags_InputHSV\n\n"
  },
  "imgui.ImVector_ImFontPtr_ImVector_ImFontPtr":{
    "scope":"lua",
    "body":"imgui.ImVector_ImFontPtr()",
    "prefix":"imgui.ImVector_ImFontPtr",
    "description":"[C++] ImVector_ImFontPtr()\n\n"
  },
  "imgui.ImGuiDataType_U16":{
    "scope":"lua",
    "body":"imgui.DataType.U16",
    "prefix":"imgui.DataType.U16",
    "description":"[C++] ImGuiDataType_U16 = 3\n\n"
  },
  "imgui.igInputFloat2":{
    "scope":"lua",
    "body":"imgui.InputFloat2(${1:label}, ${2:v}${3:[, format=\"%.3f\"]}${4:[, flags=0]})",
    "prefix":"imgui.InputFloat2",
    "description":"[C++] bool ImGui::InputFloat2(const char* label, float v[2], const char* format=\"%.3f\", ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImVec2_end_const":{
    "scope":"lua",
    "body":"ImVector_ImVec2:end_const()",
    "prefix":"ImVector_ImVec2:end",
    "description":"[C++] ImVec2 const * ImVector_ImVec2::end(const ImVector_ImVec2* self)\n\n"
  },
  "imgui.igPushIDRange":{
    "scope":"lua",
    "body":"imgui.PushIDRange(${1:str_id_begin}, ${2:str_id_end})",
    "prefix":"imgui.PushID",
    "description":"[C++] void ImGui::PushID(const char* str_id_begin, const char* str_id_end)\n\n"
  },
  "imgui.igBeginPopupContextVoid":{
    "scope":"lua",
    "body":"imgui.BeginPopupContextVoid(${1:[str_id=((void*)0)]}${2:[, mouse_button=1]})",
    "prefix":"imgui.BeginPopupContextVoid",
    "description":"[C++] bool ImGui::BeginPopupContextVoid(const char* str_id=((void*)0), int mouse_button=1)\n\n"
  },
  "imgui.ImGuiDataType_S8":{
    "scope":"lua",
    "body":"imgui.DataType.S8",
    "prefix":"imgui.DataType.S8",
    "description":"[C++] ImGuiDataType_S8 = 0\n\n"
  },
  "imgui.ImDrawListFlags_AllowVtxOffset":{
    "scope":"lua",
    "body":"imgui.DrawListFlags.AllowVtxOffset",
    "prefix":"imgui.DrawListFlags.AllowVtxOffset",
    "description":"[C++] ImDrawListFlags_AllowVtxOffset = 1 << 2\n\n"
  },
  "imgui.ImGuiTextBuffer_reserve":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:reserve(${1:capacity})",
    "prefix":"ImGuiTextBuffer:reserve",
    "description":"[C++] void ImGuiTextBuffer::reserve(int capacity)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_front":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:front()",
    "prefix":"ImVector_ImDrawCmd:front",
    "description":"[C++] ImDrawCmd* ImVector_ImDrawCmd::front(ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImDrawListFlags_AntiAliasedFill":{
    "scope":"lua",
    "body":"imgui.DrawListFlags.AntiAliasedFill",
    "prefix":"imgui.DrawListFlags.AntiAliasedFill",
    "description":"[C++] ImDrawListFlags_AntiAliasedFill = 1 << 1\n\n"
  },
  "imgui.ImVector_ImDrawIdx_back_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:back_const()",
    "prefix":"ImVector_ImDrawIdx:back",
    "description":"[C++] ImDrawIdx const * ImVector_ImDrawIdx::back(const ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImGuiConfigFlags_IsTouchScreen":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.IsTouchScreen",
    "prefix":"imgui.ConfigFlags.IsTouchScreen",
    "description":"[C++] ImGuiConfigFlags_IsTouchScreen = 1 << 21\n\n"
  },
  "imgui.ImVector_char_end_const":{
    "scope":"lua",
    "body":"ImVector_char:end_const()",
    "prefix":"ImVector_char:end",
    "description":"[C++] char const * ImVector_char::end(const ImVector_char* self)\n\n"
  },
  "imgui.ImGuiConfigFlags_IsSRGB":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.IsSRGB",
    "prefix":"imgui.ConfigFlags.IsSRGB",
    "description":"[C++] ImGuiConfigFlags_IsSRGB = 1 << 20\n\n"
  },
  "imgui.ImVector_ImVector":{
    "scope":"lua",
    "body":"imgui.ImVector()",
    "prefix":"imgui.ImVector",
    "description":"[C++] ImVector()\n\n"
  },
  "imgui.ImGuiConfigFlags_NavEnableSetMousePos":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.NavEnableSetMousePos",
    "prefix":"imgui.ConfigFlags.NavEnableSetMousePos",
    "description":"[C++] ImGuiConfigFlags_NavEnableSetMousePos = 1 << 2\n\n"
  },
  "imgui.ImGuiConfigFlags_NavEnableKeyboard":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.NavEnableKeyboard",
    "prefix":"imgui.ConfigFlags.NavEnableKeyboard",
    "description":"[C++] ImGuiConfigFlags_NavEnableKeyboard = 1 << 0\n\n"
  },
  "imgui.ImGuiConfigFlags_None":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.None",
    "prefix":"imgui.ConfigFlags.None",
    "description":"[C++] ImGuiConfigFlags_None = 0\n\n"
  },
  "imgui.ImGuiNavInput_KeyMenu_":{
    "scope":"lua",
    "body":"imgui.NavInput.KeyMenu_",
    "prefix":"imgui.NavInput.KeyMenu_",
    "description":"[C++] ImGuiNavInput_KeyMenu_ = 16\n\n"
  },
  "imgui.igPlotLinesFnPtr":{
    "scope":"lua",
    "body":"imgui.PlotLinesFnPtr(${1:label}, ${2:values_getter}, ${3:data}, ${4:values_count}${5:[, values_offset=0]}${6:[, overlay_text=((void*)0)]}${7:[, scale_min=FLT_MAX]}${8:[, scale_max=FLT_MAX]}${9:[, graph_size=ImVec2(0,0)]})",
    "prefix":"imgui.PlotLines",
    "description":"[C++] void ImGui::PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset=0, const char* overlay_text=((void*)0), float scale_min=3.40282346638528859811704183484516925e+38F, float scale_max=3.40282346638528859811704183484516925e+38F, ImVec2 graph_size=ImVec2(0, 0))\n\n"
  },
  "imgui.ImVector_ImDrawCmd_size":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:size()",
    "prefix":"ImVector_ImDrawCmd:size",
    "description":"[C++] int ImVector_ImDrawCmd::size(const ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImGuiHoveredFlags_RectOnly":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.RectOnly",
    "prefix":"imgui.HoveredFlags.RectOnly",
    "description":"[C++] ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped\n\n"
  },
  "imgui.ImGuiHoveredFlags_AllowWhenDisabled":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.AllowWhenDisabled",
    "prefix":"imgui.HoveredFlags.AllowWhenDisabled",
    "description":"[C++] ImGuiHoveredFlags_AllowWhenDisabled = 1 << 7\n\n"
  },
  "imgui.ImGuiHoveredFlags_AllowWhenOverlapped":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.AllowWhenOverlapped",
    "prefix":"imgui.HoveredFlags.AllowWhenOverlapped",
    "description":"[C++] ImGuiHoveredFlags_AllowWhenOverlapped = 1 << 6\n\n"
  },
  "imgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.AllowWhenBlockedByPopup",
    "prefix":"imgui.HoveredFlags.AllowWhenBlockedByPopup",
    "description":"[C++] ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 3\n\n"
  },
  "imgui.igTreePop":{
    "scope":"lua",
    "body":"imgui.TreePop()",
    "prefix":"imgui.TreePop",
    "description":"[C++] void ImGui::TreePop()\n\n"
  },
  "imgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.AllowWhenBlockedByActiveItem",
    "prefix":"imgui.HoveredFlags.AllowWhenBlockedByActiveItem",
    "description":"[C++] ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 5\n\n"
  },
  "imgui.ImGuiHoveredFlags_AnyWindow":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.AnyWindow",
    "prefix":"imgui.HoveredFlags.AnyWindow",
    "description":"[C++] ImGuiHoveredFlags_AnyWindow = 1 << 2\n\n"
  },
  "imgui.ImGuiHoveredFlags_RootWindow":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.RootWindow",
    "prefix":"imgui.HoveredFlags.RootWindow",
    "description":"[C++] ImGuiHoveredFlags_RootWindow = 1 << 1\n\n"
  },
  "imgui.ImGuiStyle_ScaleAllSizes":{
    "scope":"lua",
    "body":"ImGuiStyle:ScaleAllSizes(${1:scale_factor})",
    "prefix":"ImGuiStyle:ScaleAllSizes",
    "description":"[C++] void ImGuiStyle::ScaleAllSizes(float scale_factor)\n\n"
  },
  "imgui.ImGuiHoveredFlags_None":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.None",
    "prefix":"imgui.HoveredFlags.None",
    "description":"[C++] ImGuiHoveredFlags_None = 0\n\n"
  },
  "imgui.ImGuiColorEditFlags_DisplayRGB":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.DisplayRGB",
    "prefix":"imgui.ColorEditFlags.DisplayRGB",
    "description":"[C++] ImGuiColorEditFlags_DisplayRGB = 1 << 20\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_begin":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:begin()",
    "prefix":"ImVector_ImFontAtlasCustomRect:begin",
    "description":"[C++] ImFontAtlasCustomRect* ImVector_ImFontAtlasCustomRect::begin(ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImGuiInputTextFlags_CharsDecimal":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CharsDecimal",
    "prefix":"imgui.InputTextFlags.CharsDecimal",
    "description":"[C++] ImGuiInputTextFlags_CharsDecimal = 1 << 0\n\n"
  },
  "imgui.ImGuiMouseCursor_ResizeNESW":{
    "scope":"lua",
    "body":"imgui.MouseCursor.ResizeNESW",
    "prefix":"imgui.MouseCursor.ResizeNESW",
    "description":"[C++] ImGuiMouseCursor_ResizeNESW = 5\n\n"
  },
  "imgui.igIsAnyItemActive":{
    "scope":"lua",
    "body":"imgui.IsAnyItemActive()",
    "prefix":"imgui.IsAnyItemActive",
    "description":"[C++] bool ImGui::IsAnyItemActive()\n\n"
  },
  "imgui.ImDrawList_UpdateTextureID":{
    "scope":"lua",
    "body":"ImDrawList:UpdateTextureID()",
    "prefix":"ImDrawList:UpdateTextureID",
    "description":"[C++] void ImDrawList::UpdateTextureID()\n\n"
  },
  "imgui.ImVector_ImDrawVert_reserve":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImDrawVert:reserve",
    "description":"[C++] void ImVector_ImDrawVert::reserve(ImVector_ImDrawVert* self, int new_capacity)\n\n"
  },
  "imgui.ImGuiMouseCursor_ResizeEW":{
    "scope":"lua",
    "body":"imgui.MouseCursor.ResizeEW",
    "prefix":"imgui.MouseCursor.ResizeEW",
    "description":"[C++] ImGuiMouseCursor_ResizeEW = 4\n\n"
  },
  "imgui.ImVector_ImDrawVert_capacity":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:capacity()",
    "prefix":"ImVector_ImDrawVert:capacity",
    "description":"[C++] int ImVector_ImDrawVert::capacity(const ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImGuiNavInput_TweakFast":{
    "scope":"lua",
    "body":"imgui.NavInput.TweakFast",
    "prefix":"imgui.NavInput.TweakFast",
    "description":"[C++] ImGuiNavInput_TweakFast = 15\n\n"
  },
  "imgui.ImGuiInputTextCallbackData_HasSelection":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData:HasSelection()",
    "prefix":"ImGuiInputTextCallbackData:HasSelection",
    "description":"[C++] bool ImGuiInputTextCallbackData::HasSelection()\n\n"
  },
  "imgui.ImFontAtlas_GetGlyphRangesChineseFull":{
    "scope":"lua",
    "body":"ImFontAtlas:GetGlyphRangesChineseFull()",
    "prefix":"ImFontAtlas:GetGlyphRangesChineseFull",
    "description":"[C++] const ImWchar* ImFontAtlas::GetGlyphRangesChineseFull()\n\n"
  },
  "imgui.ImGuiMouseCursor_TextInput":{
    "scope":"lua",
    "body":"imgui.MouseCursor.TextInput",
    "prefix":"imgui.MouseCursor.TextInput",
    "description":"[C++] ImGuiMouseCursor_TextInput = 1\n\n"
  },
  "imgui.igPlotHistogramFloatPtr":{
    "scope":"lua",
    "body":"imgui.PlotHistogramFloatPtr(${1:label}, ${2:values}, ${3:values_count}${4:[, values_offset=0]}${5:[, overlay_text=((void*)0)]}${6:[, scale_min=FLT_MAX]}${7:[, scale_max=FLT_MAX]}${8:[, graph_size=ImVec2(0,0)]}${9:[, stride=sizeof(float)]})",
    "prefix":"imgui.PlotHistogram",
    "description":"[C++] void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset=0, const char* overlay_text=((void*)0), float scale_min=3.40282346638528859811704183484516925e+38F, float scale_max=3.40282346638528859811704183484516925e+38F, ImVec2 graph_size=ImVec2(0, 0), int stride=sizeof(float))\n\n"
  },
  "imgui.ImVector_ImU32_resize":{
    "scope":"lua",
    "body":"ImVector_ImU32:resize(${1:new_size})",
    "prefix":"ImVector_ImU32:resize",
    "description":"[C++] void ImVector_ImU32::resize(ImVector_ImU32* self, int new_size)\n\n"
  },
  "imgui.ImGuiOnceUponAFrame_ImGuiOnceUponAFrame":{
    "scope":"lua",
    "body":"imgui.ImGuiOnceUponAFrame()",
    "prefix":"imgui.ImGuiOnceUponAFrame",
    "description":"[C++] ImGuiOnceUponAFrame()\n\n"
  },
  "imgui.ImGuiCol_PlotLines":{
    "scope":"lua",
    "body":"imgui.Col.PlotLines",
    "prefix":"imgui.Col.PlotLines",
    "description":"[C++] ImGuiCol_PlotLines = 38\n\n"
  },
  "imgui.ImGuiInputTextFlags_CharsScientific":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CharsScientific",
    "prefix":"imgui.InputTextFlags.CharsScientific",
    "description":"[C++] ImGuiInputTextFlags_CharsScientific = 1 << 17\n\n"
  },
  "imgui.ImGuiInputTextFlags_Password":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.Password",
    "prefix":"imgui.InputTextFlags.Password",
    "description":"[C++] ImGuiInputTextFlags_Password = 1 << 15\n\n"
  },
  "imgui.ImGuiKey_Z":{
    "scope":"lua",
    "body":"imgui.Key.Z",
    "prefix":"imgui.Key.Z",
    "description":"[C++] ImGuiKey_Z = 21\n\n"
  },
  "imgui.ImGuiInputTextFlags_AlwaysInsertMode":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.AlwaysInsertMode",
    "prefix":"imgui.InputTextFlags.AlwaysInsertMode",
    "description":"[C++] ImGuiInputTextFlags_AlwaysInsertMode = 1 << 13\n\n"
  },
  "imgui.ImGuiInputTextFlags_EnterReturnsTrue":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.EnterReturnsTrue",
    "prefix":"imgui.InputTextFlags.EnterReturnsTrue",
    "description":"[C++] ImGuiInputTextFlags_EnterReturnsTrue = 1 << 5\n\n"
  },
  "imgui.ImGuiInputTextFlags_NoHorizontalScroll":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.NoHorizontalScroll",
    "prefix":"imgui.InputTextFlags.NoHorizontalScroll",
    "description":"[C++] ImGuiInputTextFlags_NoHorizontalScroll = 1 << 12\n\n"
  },
  "imgui.igCalcTextSize":{
    "scope":"lua",
    "body":"imgui.CalcTextSize(${1:text}${2:[, text_end=((void*)0)]}${3:[, hide_text_after_double_hash=false]}${4:[, wrap_width=-1.0f]})",
    "prefix":"imgui.CalcTextSize",
    "description":"[C++] ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end=((void*)0), bool hide_text_after_double_hash=false, float wrap_width=-1.0f)\n\n"
  },
  "imgui.ImGuiTextRange_ImGuiTextRange":{
    "scope":"lua",
    "body":"imgui.ImGuiTextRange()",
    "prefix":"imgui.ImGuiTextRange",
    "description":"[C++] ImGuiTextRange()\n\n"
  },
  "imgui.igNextColumn":{
    "scope":"lua",
    "body":"imgui.NextColumn()",
    "prefix":"imgui.NextColumn",
    "description":"[C++] void ImGui::NextColumn()\n\n"
  },
  "imgui.ImGuiSizeCallbackData":{
    "scope":"lua",
    "body":"new.ImGuiSizeCallbackData($1)",
    "prefix":"new.ImGuiSizeCallbackData",
    "description":"typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData\n\n"
  },
  "imgui.ImGuiInputTextFlags_CallbackCharFilter":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CallbackCharFilter",
    "prefix":"imgui.InputTextFlags.CallbackCharFilter",
    "description":"[C++] ImGuiInputTextFlags_CallbackCharFilter = 1 << 9\n\n"
  },
  "imgui.ImGuiComboFlags_HeightSmall":{
    "scope":"lua",
    "body":"imgui.ComboFlags.HeightSmall",
    "prefix":"imgui.ComboFlags.HeightSmall",
    "description":"[C++] ImGuiComboFlags_HeightSmall = 1 << 1\n\n"
  },
  "imgui.ImVector_ImU32_back":{
    "scope":"lua",
    "body":"ImVector_ImU32:back()",
    "prefix":"ImVector_ImU32:back",
    "description":"[C++] ImU32* ImVector_ImU32::back(ImVector_ImU32* self)\n\n"
  },
  "imgui.ImGuiInputTextFlags_CallbackHistory":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CallbackHistory",
    "prefix":"imgui.InputTextFlags.CallbackHistory",
    "description":"[C++] ImGuiInputTextFlags_CallbackHistory = 1 << 7\n\n"
  },
  "imgui.ImVector_float_back":{
    "scope":"lua",
    "body":"ImVector_float:back()",
    "prefix":"ImVector_float:back",
    "description":"[C++] float* ImVector_float::back(ImVector_float* self)\n\n"
  },
  "imgui.ImGuiOnceUponAFrame.RefFrame":{
    "scope":"lua",
    "body":"ImGuiOnceUponAFrame.RefFrame",
    "prefix":"ImGuiOnceUponAFrame.RefFrame",
    "description":"[C++] int ImGuiOnceUponAFrame::RefFrame\n\n"
  },
  "imgui.igGetWindowContentRegionMax":{
    "scope":"lua",
    "body":"imgui.GetWindowContentRegionMax()",
    "prefix":"imgui.GetWindowContentRegionMax",
    "description":"[C++] ImVec2 ImGui::GetWindowContentRegionMax()\n\n"
  },
  "imgui.ImGuiInputTextFlags_CharsUppercase":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CharsUppercase",
    "prefix":"imgui.InputTextFlags.CharsUppercase",
    "description":"[C++] ImGuiInputTextFlags_CharsUppercase = 1 << 2\n\n"
  },
  "imgui.ImVector_end_const":{
    "scope":"lua",
    "body":"ImVector:end_const()",
    "prefix":"ImVector:end",
    "description":"[C++] const T* ImVector::end()\n\n"
  },
  "imgui.ImDrawList_AddImage":{
    "scope":"lua",
    "body":"ImDrawList:AddImage(${1:user_texture_id}, ${2:a}, ${3:b}${4:[, uv_a=ImVec2(0,0)]}${5:[, uv_b=ImVec2(1,1)]}${6:[, col=(((ImU32)(255)<<24)|((ImU32)(255)<<16)|((ImU32)(255)<<8)|((ImU32)(255)<<0))]})",
    "prefix":"ImDrawList:AddImage",
    "description":"[C++] void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a=ImVec2(0, 0), const ImVec2& uv_b=ImVec2(1, 1), ImU32 col=(((ImU32)(255)<<24)|((ImU32)(255)<<16)|((ImU32)(255)<<8)|((ImU32)(255)<<0)))\n\n"
  },
  "imgui.ImVector_ImWchar_front":{
    "scope":"lua",
    "body":"ImVector_ImWchar:front()",
    "prefix":"ImVector_ImWchar:front",
    "description":"[C++] ImWchar* ImVector_ImWchar::front(ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImGuiInputTextFlags_None":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.None",
    "prefix":"imgui.InputTextFlags.None",
    "description":"[C++] ImGuiInputTextFlags_None = 0\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.EventChar":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.EventChar",
    "prefix":"ImGuiInputTextCallbackData.EventChar",
    "description":"[C++] ImWchar ImGuiInputTextCallbackData::EventChar\n\n"
  },
  "imgui.ImGuiSelectableFlags_DontClosePopups":{
    "scope":"lua",
    "body":"imgui.SelectableFlags.DontClosePopups",
    "prefix":"imgui.SelectableFlags.DontClosePopups",
    "description":"[C++] ImGuiSelectableFlags_DontClosePopups = 1 << 0\n\n"
  },
  "imgui.ImGuiCol_ModalWindowDimBg":{
    "scope":"lua",
    "body":"imgui.Col.ModalWindowDimBg",
    "prefix":"imgui.Col.ModalWindowDimBg",
    "description":"[C++] ImGuiCol_ModalWindowDimBg = 47\n\n"
  },
  "imgui.ImGuiTextBuffer_empty":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:empty()",
    "prefix":"ImGuiTextBuffer:empty",
    "description":"[C++] bool ImGuiTextBuffer::empty()\n\n"
  },
  "imgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.AcceptNoPreviewTooltip",
    "prefix":"imgui.DragDropFlags.AcceptNoPreviewTooltip",
    "description":"[C++] ImGuiDragDropFlags_AcceptNoPreviewTooltip = 1 << 12\n\n"
  },
  "imgui.ImVector_ImVectorVector":{
    "scope":"lua",
    "body":"imgui.ImVector.ImVectorVector(${1:src})",
    "prefix":"imgui.ImVector.ImVector",
    "description":"[C++] ImVector(const ImVector<T>& src)\n\n"
  },
  "imgui.ImGuiDragDropFlags_SourceExtern":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.SourceExtern",
    "prefix":"imgui.DragDropFlags.SourceExtern",
    "description":"[C++] ImGuiDragDropFlags_SourceExtern = 1 << 4\n\n"
  },
  "imgui.ImDrawListSplitter_Split":{
    "scope":"lua",
    "body":"ImDrawListSplitter:Split(${1:draw_list}, ${2:count})",
    "prefix":"ImDrawListSplitter:Split",
    "description":"[C++] void ImDrawListSplitter::Split(ImDrawList* draw_list, int count)\n\n"
  },
  "imgui.ImGuiDragDropFlags_SourceAllowNullID":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.SourceAllowNullID",
    "prefix":"imgui.DragDropFlags.SourceAllowNullID",
    "description":"[C++] ImGuiDragDropFlags_SourceAllowNullID = 1 << 3\n\n"
  },
  "imgui.ImGuiListClipper":{
    "scope":"lua",
    "body":"new.ImGuiListClipper($1)",
    "prefix":"new.ImGuiListClipper",
    "description":"typedef struct ImGuiListClipper ImGuiListClipper\n\n"
  },
  "imgui.ImGuiDragDropFlags_SourceNoDisableHover":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.SourceNoDisableHover",
    "prefix":"imgui.DragDropFlags.SourceNoDisableHover",
    "description":"[C++] ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1\n\n"
  },
  "imgui.igPlotLines":{
    "scope":"lua",
    "body":"imgui.PlotLines(${1:label}, ${2:values}, ${3:values_count}${4:[, values_offset=0]}${5:[, overlay_text=((void*)0)]}${6:[, scale_min=FLT_MAX]}${7:[, scale_max=FLT_MAX]}${8:[, graph_size=ImVec2(0,0)]}${9:[, stride=sizeof(float)]})",
    "prefix":"imgui.PlotLines",
    "description":"[C++] void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset=0, const char* overlay_text=((void*)0), float scale_min=3.40282346638528859811704183484516925e+38F, float scale_max=3.40282346638528859811704183484516925e+38F, ImVec2 graph_size=ImVec2(0, 0), int stride=sizeof(float))\n\n"
  },
  "imgui.ImDrawCornerFlags_All":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.All",
    "prefix":"imgui.DrawCornerFlags.All",
    "description":"[C++] ImDrawCornerFlags_All = 0xF\n\n"
  },
  "imgui.ImVector_ImFontConfig_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImFontConfig:erase",
    "description":"[C++] ImFontConfig* ImVector_ImFontConfig::erase(ImVector_ImFontConfig* self, ImFontConfig const * it, ImFontConfig const * it_last)\n\n"
  },
  "imgui.ImDrawCornerFlags_Right":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.Right",
    "prefix":"imgui.DrawCornerFlags.Right",
    "description":"[C++] ImDrawCornerFlags_Right = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight\n\n"
  },
  "imgui.ImDrawCornerFlags_Left":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.Left",
    "prefix":"imgui.DrawCornerFlags.Left",
    "description":"[C++] ImDrawCornerFlags_Left = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft\n\n"
  },
  "imgui.OnInitialize":{
    "scope":"lua",
    "body":"imgui.OnInitialize(${1:callback})",
    "prefix":"imgui.OnInitialize",
    "description":"[mimgui function]\n\nReturns: function unsubscribe\n\n"
  },
  "imgui.ImGuiWindowFlags_ChildWindow":{
    "scope":"lua",
    "body":"imgui.WindowFlags.ChildWindow",
    "prefix":"imgui.WindowFlags.ChildWindow",
    "description":"[C++] ImGuiWindowFlags_ChildWindow = 1 << 24\n\n"
  },
  "imgui.igSliderInt4":{
    "scope":"lua",
    "body":"imgui.SliderInt4(${1:label}, ${2:v}, ${3:v_min}, ${4:v_max}${5:[, format=\"%d\"]})",
    "prefix":"imgui.SliderInt4",
    "description":"[C++] bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format=\"%d\")\n\n"
  },
  "imgui.ImGuiStyleVar_ButtonTextAlign":{
    "scope":"lua",
    "body":"imgui.StyleVar.ButtonTextAlign",
    "prefix":"imgui.StyleVar.ButtonTextAlign",
    "description":"[C++] ImGuiStyleVar_ButtonTextAlign = 21\n\n"
  },
  "imgui.ImGuiDir_None":{
    "scope":"lua",
    "body":"imgui.Dir.None",
    "prefix":"imgui.Dir.None",
    "description":"[C++] ImGuiDir_None = -1\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_front_const":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:front_const()",
    "prefix":"ImVector_ImGuiStoragePair:front",
    "description":"[C++] ImGuiStoragePair const * ImVector_ImGuiStoragePair::front(const ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.igEndDragDropSource":{
    "scope":"lua",
    "body":"imgui.EndDragDropSource()",
    "prefix":"imgui.EndDragDropSource",
    "description":"[C++] void ImGui::EndDragDropSource()\n\n"
  },
  "imgui.ImDrawCornerFlags_BotRight":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.BotRight",
    "prefix":"imgui.DrawCornerFlags.BotRight",
    "description":"[C++] ImDrawCornerFlags_BotRight = 1 << 3\n\n"
  },
  "imgui.igGetWindowHeight":{
    "scope":"lua",
    "body":"imgui.GetWindowHeight()",
    "prefix":"imgui.GetWindowHeight",
    "description":"[C++] float ImGui::GetWindowHeight()\n\n"
  },
  "imgui.ImDrawCornerFlags_BotLeft":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.BotLeft",
    "prefix":"imgui.DrawCornerFlags.BotLeft",
    "description":"[C++] ImDrawCornerFlags_BotLeft = 1 << 2\n\n"
  },
  "imgui.igSetScrollY":{
    "scope":"lua",
    "body":"imgui.SetScrollY(${1:scroll_y})",
    "prefix":"imgui.SetScrollY",
    "description":"[C++] void ImGui::SetScrollY(float scroll_y)\n\n"
  },
  "imgui.ImDrawCornerFlags_TopRight":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.TopRight",
    "prefix":"imgui.DrawCornerFlags.TopRight",
    "description":"[C++] ImDrawCornerFlags_TopRight = 1 << 1\n\n"
  },
  "imgui.igIsMouseDoubleClicked":{
    "scope":"lua",
    "body":"imgui.IsMouseDoubleClicked(${1:button})",
    "prefix":"imgui.IsMouseDoubleClicked",
    "description":"[C++] bool ImGui::IsMouseDoubleClicked(int button)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_ImVector_ImDrawChannelVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImDrawChannel.ImVector_ImDrawChannelVector(${1:src})",
    "prefix":"imgui.ImVector_ImDrawChannel.ImVector_ImDrawChannel",
    "description":"[C++] ImVector_ImDrawChannel(const ImVector_ImDrawChannel src)\n\n"
  },
  "imgui.ImFontAtlasCustomRect.Font":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect.Font",
    "prefix":"ImFontAtlasCustomRect.Font",
    "description":"[C++] ImFont* ImFontAtlasCustomRect::Font\n\n"
  },
  "imgui.ImGuiStyleVar_COUNT":{
    "scope":"lua",
    "body":"imgui.StyleVar.COUNT",
    "prefix":"imgui.StyleVar.COUNT",
    "description":"[C++] ImGuiStyleVar_COUNT = 23\n\n"
  },
  "imgui.ImVector_ImDrawChannel_end_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:end_const()",
    "prefix":"ImVector_ImDrawChannel:end",
    "description":"[C++] ImDrawChannel const * ImVector_ImDrawChannel::end(const ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoPicker":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoPicker",
    "prefix":"imgui.ColorEditFlags.NoPicker",
    "description":"[C++] ImGuiColorEditFlags_NoPicker = 1 << 2\n\n"
  },
  "imgui.ImGuiIO_ImGuiIO":{
    "scope":"lua",
    "body":"imgui.ImGuiIO()",
    "prefix":"imgui.ImGuiIO",
    "description":"[C++] ImGuiIO()\n\n"
  },
  "imgui.ImGuiStyleVar_SelectableTextAlign":{
    "scope":"lua",
    "body":"imgui.StyleVar.SelectableTextAlign",
    "prefix":"imgui.StyleVar.SelectableTextAlign",
    "description":"[C++] ImGuiStyleVar_SelectableTextAlign = 22\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.CursorPos":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.CursorPos",
    "prefix":"ImGuiInputTextCallbackData.CursorPos",
    "description":"[C++] int ImGuiInputTextCallbackData::CursorPos\n\n"
  },
  "imgui.igSetWindowFontScale":{
    "scope":"lua",
    "body":"imgui.SetWindowFontScale(${1:scale})",
    "prefix":"imgui.SetWindowFontScale",
    "description":"[C++] void ImGui::SetWindowFontScale(float scale)\n\n"
  },
  "imgui.ImGuiStyleVar_GrabRounding":{
    "scope":"lua",
    "body":"imgui.StyleVar.GrabRounding",
    "prefix":"imgui.StyleVar.GrabRounding",
    "description":"[C++] ImGuiStyleVar_GrabRounding = 19\n\n"
  },
  "imgui.ImGuiInputTextFlags_CtrlEnterForNewLine":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CtrlEnterForNewLine",
    "prefix":"imgui.InputTextFlags.CtrlEnterForNewLine",
    "description":"[C++] ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11\n\n"
  },
  "imgui.ImGuiStyleVar_ScrollbarRounding":{
    "scope":"lua",
    "body":"imgui.StyleVar.ScrollbarRounding",
    "prefix":"imgui.StyleVar.ScrollbarRounding",
    "description":"[C++] ImGuiStyleVar_ScrollbarRounding = 17\n\n"
  },
  "imgui.igInvisibleButton":{
    "scope":"lua",
    "body":"imgui.InvisibleButton(${1:str_id}, ${2:size})",
    "prefix":"imgui.InvisibleButton",
    "description":"[C++] bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size)\n\n"
  },
  "imgui.igSetColorEditOptions":{
    "scope":"lua",
    "body":"imgui.SetColorEditOptions(${1:flags})",
    "prefix":"imgui.SetColorEditOptions",
    "description":"[C++] void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)\n\n"
  },
  "imgui.ImGuiColorEditFlags_PickerHueBar":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.PickerHueBar",
    "prefix":"imgui.ColorEditFlags.PickerHueBar",
    "description":"[C++] ImGuiColorEditFlags_PickerHueBar = 1 << 25\n\n"
  },
  "imgui.ImGuiCol_HeaderHovered":{
    "scope":"lua",
    "body":"imgui.Col.HeaderHovered",
    "prefix":"imgui.Col.HeaderHovered",
    "description":"[C++] ImGuiCol_HeaderHovered = 25\n\n"
  },
  "imgui.ImGuiStyleVar_ScrollbarSize":{
    "scope":"lua",
    "body":"imgui.StyleVar.ScrollbarSize",
    "prefix":"imgui.StyleVar.ScrollbarSize",
    "description":"[C++] ImGuiStyleVar_ScrollbarSize = 16\n\n"
  },
  "imgui.ImVector__grow_capacity":{
    "scope":"lua",
    "body":"ImVector:_grow_capacity(${1:sz})",
    "prefix":"ImVector:_grow_capacity",
    "description":"[C++] int ImVector::_grow_capacity(int sz)\n\n"
  },
  "imgui.ImDrawData_ImDrawData":{
    "scope":"lua",
    "body":"imgui.ImDrawData()",
    "prefix":"imgui.ImDrawData",
    "description":"[C++] ImDrawData()\n\n"
  },
  "imgui.ImVector_ImDrawChannel_front":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:front()",
    "prefix":"ImVector_ImDrawChannel:front",
    "description":"[C++] ImDrawChannel* ImVector_ImDrawChannel::front(ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImVector_float_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_float:index_from_ptr(${1:it})",
    "prefix":"ImVector_float:index_from_ptr",
    "description":"[C++] int ImVector_float::index_from_ptr(const ImVector_float* self, float const * it)\n\n"
  },
  "imgui.ImGuiStyleVar_ItemInnerSpacing":{
    "scope":"lua",
    "body":"imgui.StyleVar.ItemInnerSpacing",
    "prefix":"imgui.StyleVar.ItemInnerSpacing",
    "description":"[C++] ImGuiStyleVar_ItemInnerSpacing = 14\n\n"
  },
  "imgui.ImGuiStyleVar_FrameBorderSize":{
    "scope":"lua",
    "body":"imgui.StyleVar.FrameBorderSize",
    "prefix":"imgui.StyleVar.FrameBorderSize",
    "description":"[C++] ImGuiStyleVar_FrameBorderSize = 12\n\n"
  },
  "imgui.ImGuiStyleVar_FrameRounding":{
    "scope":"lua",
    "body":"imgui.StyleVar.FrameRounding",
    "prefix":"imgui.StyleVar.FrameRounding",
    "description":"[C++] ImGuiStyleVar_FrameRounding = 11\n\n"
  },
  "imgui.ImGuiCol_Separator":{
    "scope":"lua",
    "body":"imgui.Col.Separator",
    "prefix":"imgui.Col.Separator",
    "description":"[C++] ImGuiCol_Separator = 27\n\n"
  },
  "imgui.ImGuiTabBarFlags":{
    "scope":"lua",
    "body":"new.ImGuiTabBarFlags($1)",
    "prefix":"new.ImGuiTabBarFlags",
    "description":"typedef int ImGuiTabBarFlags\n\n"
  },
  "imgui.ImFontAtlasCustomRect.ID":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect.ID",
    "prefix":"ImFontAtlasCustomRect.ID",
    "description":"[C++] unsigned int ImFontAtlasCustomRect::ID\n\n"
  },
  "imgui.igPushStyleVarFloat":{
    "scope":"lua",
    "body":"imgui.PushStyleVarFloat(${1:idx}, ${2:val})",
    "prefix":"imgui.PushStyleVar",
    "description":"[C++] void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)\n\n"
  },
  "imgui.ImGuiStyleVar_ChildRounding":{
    "scope":"lua",
    "body":"imgui.StyleVar.ChildRounding",
    "prefix":"imgui.StyleVar.ChildRounding",
    "description":"[C++] ImGuiStyleVar_ChildRounding = 6\n\n"
  },
  "imgui.ImGuiStyleVar_WindowBorderSize":{
    "scope":"lua",
    "body":"imgui.StyleVar.WindowBorderSize",
    "prefix":"imgui.StyleVar.WindowBorderSize",
    "description":"[C++] ImGuiStyleVar_WindowBorderSize = 3\n\n"
  },
  "imgui.ImVector_ImDrawVert_begin":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:begin()",
    "prefix":"ImVector_ImDrawVert:begin",
    "description":"[C++] ImDrawVert* ImVector_ImDrawVert::begin(ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImVector_ImTextureID_back_const":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:back_const()",
    "prefix":"ImVector_ImTextureID:back",
    "description":"[C++] ImTextureID const * ImVector_ImTextureID::back(const ImVector_ImTextureID* self)\n\n"
  },
  "imgui.igSetCurrentContext":{
    "scope":"lua",
    "body":"imgui.SetCurrentContext(${1:ctx})",
    "prefix":"imgui.SetCurrentContext",
    "description":"[C++] void ImGui::SetCurrentContext(ImGuiContext* ctx)\n\n"
  },
  "imgui.ImGuiStyleVar_WindowPadding":{
    "scope":"lua",
    "body":"imgui.StyleVar.WindowPadding",
    "prefix":"imgui.StyleVar.WindowPadding",
    "description":"[C++] ImGuiStyleVar_WindowPadding = 1\n\n"
  },
  "imgui.ImGuiTextRange.b":{
    "scope":"lua",
    "body":"ImGuiTextRange.b",
    "prefix":"ImGuiTextRange.b",
    "description":"[C++] const char* ImGuiTextRange::b\n\n"
  },
  "imgui.igSetKeyboardFocusHere":{
    "scope":"lua",
    "body":"imgui.SetKeyboardFocusHere(${1:[offset=0]})",
    "prefix":"imgui.SetKeyboardFocusHere",
    "description":"[C++] void ImGui::SetKeyboardFocusHere(int offset=0)\n\n"
  },
  "imgui.ImVector_ImFontPtr_size":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:size()",
    "prefix":"ImVector_ImFontPtr:size",
    "description":"[C++] int ImVector_ImFontPtr::size(const ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImGuiTabBarFlags_FittingPolicyScroll":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.FittingPolicyScroll",
    "prefix":"imgui.TabBarFlags.FittingPolicyScroll",
    "description":"[C++] ImGuiTabBarFlags_FittingPolicyScroll = 1 << 7\n\n"
  },
  "imgui.ImDrawList_GetClipRectMax":{
    "scope":"lua",
    "body":"ImDrawList:GetClipRectMax()",
    "prefix":"ImDrawList:GetClipRectMax",
    "description":"[C++] ImVec2 ImDrawList::GetClipRectMax()\n\n"
  },
  "imgui.ImGuiTabBarFlags_FittingPolicyResizeDown":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.FittingPolicyResizeDown",
    "prefix":"imgui.TabBarFlags.FittingPolicyResizeDown",
    "description":"[C++] ImGuiTabBarFlags_FittingPolicyResizeDown = 1 << 6\n\n"
  },
  "imgui.ImVector_ImTextureID_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImTextureID:erase_unsorted",
    "description":"[C++] ImTextureID* ImVector_ImTextureID::erase_unsorted(ImVector_ImTextureID* self, ImTextureID const * it)\n\n"
  },
  "imgui.ImDrawData.Valid":{
    "scope":"lua",
    "body":"ImDrawData.Valid",
    "prefix":"ImDrawData.Valid",
    "description":"[C++] bool ImDrawData::Valid\n\n"
  },
  "imgui.ImGuiTabBarFlags_AutoSelectNewTabs":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.AutoSelectNewTabs",
    "prefix":"imgui.TabBarFlags.AutoSelectNewTabs",
    "description":"[C++] ImGuiTabBarFlags_AutoSelectNewTabs = 1 << 1\n\n"
  },
  "imgui.igShowAboutWindow":{
    "scope":"lua",
    "body":"imgui.ShowAboutWindow(${1:[p_open=((void*)0)]})",
    "prefix":"imgui.ShowAboutWindow",
    "description":"[C++] void ImGui::ShowAboutWindow(bool* p_open=((void*)0))\n\n"
  },
  "imgui.ImDrawData_Clear":{
    "scope":"lua",
    "body":"ImDrawData:Clear()",
    "prefix":"ImDrawData:Clear",
    "description":"[C++] void ImDrawData::Clear()\n\n"
  },
  "imgui.ImVector_ImDrawIdx_erase":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:erase(${1:it})",
    "prefix":"ImVector_ImDrawIdx:erase",
    "description":"[C++] ImDrawIdx* ImVector_ImDrawIdx::erase(ImVector_ImDrawIdx* self, ImDrawIdx const * it)\n\n"
  },
  "imgui.ImGuiStorage_GetVoidPtr":{
    "scope":"lua",
    "body":"ImGuiStorage:GetVoidPtr(${1:key})",
    "prefix":"ImGuiStorage:GetVoidPtr",
    "description":"[C++] void* ImGuiStorage::GetVoidPtr(ImGuiID key)\n\n"
  },
  "imgui.ImGuiBackendFlags_HasSetMousePos":{
    "scope":"lua",
    "body":"imgui.BackendFlags.HasSetMousePos",
    "prefix":"imgui.BackendFlags.HasSetMousePos",
    "description":"[C++] ImGuiBackendFlags_HasSetMousePos = 1 << 2\n\n"
  },
  "imgui.ImGuiTabItemFlags_None":{
    "scope":"lua",
    "body":"imgui.TabItemFlags.None",
    "prefix":"imgui.TabItemFlags.None",
    "description":"[C++] ImGuiTabItemFlags_None = 0\n\n"
  },
  "imgui.ImVector_ImDrawIdx_end_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:end_const()",
    "prefix":"ImVector_ImDrawIdx:end",
    "description":"[C++] ImDrawIdx const * ImVector_ImDrawIdx::end(const ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImGuiNavInput_LStickLeft":{
    "scope":"lua",
    "body":"imgui.NavInput.LStickLeft",
    "prefix":"imgui.NavInput.LStickLeft",
    "description":"[C++] ImGuiNavInput_LStickLeft = 8\n\n"
  },
  "imgui.ImGuiBackendFlags_HasGamepad":{
    "scope":"lua",
    "body":"imgui.BackendFlags.HasGamepad",
    "prefix":"imgui.BackendFlags.HasGamepad",
    "description":"[C++] ImGuiBackendFlags_HasGamepad = 1 << 0\n\n"
  },
  "imgui.igEndGroup":{
    "scope":"lua",
    "body":"imgui.EndGroup()",
    "prefix":"imgui.EndGroup",
    "description":"[C++] void ImGui::EndGroup()\n\n"
  },
  "imgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.SourceNoHoldToOpenOthers",
    "prefix":"imgui.DragDropFlags.SourceNoHoldToOpenOthers",
    "description":"[C++] ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.NavLeftJumpsBackHere",
    "prefix":"imgui.TreeNodeFlags.NavLeftJumpsBackHere",
    "description":"[C++] ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13\n\n"
  },
  "imgui.ImFont_AddRemapChar":{
    "scope":"lua",
    "body":"ImFont:AddRemapChar(${1:dst}, ${2:src}${3:[, overwrite_dst=true]})",
    "prefix":"ImFont:AddRemapChar",
    "description":"[C++] void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst=true)\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_Bullet":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.Bullet",
    "prefix":"imgui.TreeNodeFlags.Bullet",
    "description":"[C++] ImGuiTreeNodeFlags_Bullet = 1 << 9\n\n"
  },
  "imgui.ImFontAtlas.TexPixelsAlpha8":{
    "scope":"lua",
    "body":"ImFontAtlas.TexPixelsAlpha8",
    "prefix":"ImFontAtlas.TexPixelsAlpha8",
    "description":"[C++] unsigned char* ImFontAtlas::TexPixelsAlpha8\n\n"
  },
  "imgui.ImGuiWindowFlags_NoNavInputs":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoNavInputs",
    "prefix":"imgui.WindowFlags.NoNavInputs",
    "description":"[C++] ImGuiWindowFlags_NoNavInputs = 1 << 18\n\n"
  },
  "imgui.ImGuiIO.Framerate":{
    "scope":"lua",
    "body":"ImGuiIO.Framerate",
    "prefix":"ImGuiIO.Framerate",
    "description":"[C++] float ImGuiIO::Framerate\n\n"
  },
  "imgui.GetRenderer":{
    "scope":"lua",
    "body":"imgui.GetRenderer()",
    "prefix":"imgui.GetRenderer",
    "description":"[mimgui function]\n\nReturns: table dx9renderer\n\n"
  },
  "imgui.ImVector_ImFontGlyph_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:begin_const()",
    "prefix":"ImVector_ImFontGlyph:begin",
    "description":"[C++] ImFontGlyph const * ImVector_ImFontGlyph::begin(const ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_NoTreePushOnOpen":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.NoTreePushOnOpen",
    "prefix":"imgui.TreeNodeFlags.NoTreePushOnOpen",
    "description":"[C++] ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3\n\n"
  },
  "imgui.igColorConvertU32ToFloat4":{
    "scope":"lua",
    "body":"imgui.ColorConvertU32ToFloat4(${1:in})",
    "prefix":"imgui.ColorConvertU32ToFloat4",
    "description":"[C++] ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_AllowItemOverlap":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.AllowItemOverlap",
    "prefix":"imgui.TreeNodeFlags.AllowItemOverlap",
    "description":"[C++] ImGuiTreeNodeFlags_AllowItemOverlap = 1 << 2\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_Framed":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.Framed",
    "prefix":"imgui.TreeNodeFlags.Framed",
    "description":"[C++] ImGuiTreeNodeFlags_Framed = 1 << 1\n\n"
  },
  "imgui.ImVector_ImFontGlyph_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:size_in_bytes()",
    "prefix":"ImVector_ImFontGlyph:size_in_bytes",
    "description":"[C++] int ImVector_ImFontGlyph::size_in_bytes(const ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_None":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.None",
    "prefix":"imgui.TreeNodeFlags.None",
    "description":"[C++] ImGuiTreeNodeFlags_None = 0\n\n"
  },
  "imgui.ImFontAtlas_GetGlyphRangesJapanese":{
    "scope":"lua",
    "body":"ImFontAtlas:GetGlyphRangesJapanese()",
    "prefix":"ImFontAtlas:GetGlyphRangesJapanese",
    "description":"[C++] const ImWchar* ImFontAtlas::GetGlyphRangesJapanese()\n\n"
  },
  "imgui.ImFont_ClearOutputData":{
    "scope":"lua",
    "body":"ImFont:ClearOutputData()",
    "prefix":"ImFont:ClearOutputData",
    "description":"[C++] void ImFont::ClearOutputData()\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_swap":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:swap(${1:rhs})",
    "prefix":"ImVector_ImGuiTextRange:swap",
    "description":"[C++] void ImVector_ImGuiTextRange::swap(ImVector_ImGuiTextRange* self, ImVector_ImGuiTextRange rhs)\n\n"
  },
  "imgui.igGetCursorPosY":{
    "scope":"lua",
    "body":"imgui.GetCursorPosY()",
    "prefix":"imgui.GetCursorPosY",
    "description":"[C++] float ImGui::GetCursorPosY()\n\n"
  },
  "imgui.ImGuiIO.MousePos":{
    "scope":"lua",
    "body":"ImGuiIO.MousePos",
    "prefix":"ImGuiIO.MousePos",
    "description":"[C++] ImVec2 ImGuiIO::MousePos\n\n"
  },
  "imgui.igIsItemFocused":{
    "scope":"lua",
    "body":"imgui.IsItemFocused()",
    "prefix":"imgui.IsItemFocused",
    "description":"[C++] bool ImGui::IsItemFocused()\n\n"
  },
  "imgui.ImVector_ImU32_push_front":{
    "scope":"lua",
    "body":"ImVector_ImU32:push_front(${1:v})",
    "prefix":"ImVector_ImU32:push_front",
    "description":"[C++] void ImVector_ImU32::push_front(ImVector_ImU32* self, const ImU32 v)\n\n"
  },
  "imgui.ImFontAtlas.TexID":{
    "scope":"lua",
    "body":"ImFontAtlas.TexID",
    "prefix":"ImFontAtlas.TexID",
    "description":"[C++] ImTextureID ImFontAtlas::TexID\n\n"
  },
  "imgui.ImFontConfig_ImFontConfig":{
    "scope":"lua",
    "body":"imgui.ImFontConfig()",
    "prefix":"imgui.ImFontConfig",
    "description":"[C++] ImFontConfig()\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoSidePreview":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoSidePreview",
    "prefix":"imgui.ColorEditFlags.NoSidePreview",
    "description":"[C++] ImGuiColorEditFlags_NoSidePreview = 1 << 8\n\n"
  },
  "imgui.igTextV":{
    "scope":"lua",
    "body":"imgui.TextV(${1:fmt}, ${2:args})",
    "prefix":"imgui.TextV",
    "description":"[C++] void ImGui::TextV(const char* fmt, va_list args)\n\n"
  },
  "imgui.ImFontAtlas":{
    "scope":"lua",
    "body":"new.ImFontAtlas($1)",
    "prefix":"new.ImFontAtlas",
    "description":"typedef struct ImFontAtlas ImFontAtlas\n\n"
  },
  "imgui.ImDrawList_PushClipRect":{
    "scope":"lua",
    "body":"ImDrawList:PushClipRect(${1:clip_rect_min}, ${2:clip_rect_max}${3:[, intersect_with_current_clip_rect=false]})",
    "prefix":"ImDrawList:PushClipRect",
    "description":"[C++] void ImDrawList::PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect=false)\n\n"
  },
  "imgui.ImGuiNavInput_InternalStart_":{
    "scope":"lua",
    "body":"imgui.NavInput.InternalStart_",
    "prefix":"imgui.NavInput.InternalStart_",
    "description":"[C++] ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImGuiStoragePair:_grow_capacity",
    "description":"[C++] int ImVector_ImGuiStoragePair::_grow_capacity(const ImVector_ImGuiStoragePair* self, int sz)\n\n"
  },
  "imgui.ImGuiNavInput_COUNT":{
    "scope":"lua",
    "body":"imgui.NavInput.COUNT",
    "prefix":"imgui.NavInput.COUNT",
    "description":"[C++] ImGuiNavInput_COUNT = 22\n\n"
  },
  "imgui.ImGuiNavInput_KeyDown_":{
    "scope":"lua",
    "body":"imgui.NavInput.KeyDown_",
    "prefix":"imgui.NavInput.KeyDown_",
    "description":"[C++] ImGuiNavInput_KeyDown_ = 21\n\n"
  },
  "imgui.ImVector_ImDrawCmd_empty":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:empty()",
    "prefix":"ImVector_ImDrawCmd:empty",
    "description":"[C++] bool ImVector_ImDrawCmd::empty(const ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImFontAtlas_GetGlyphRangesCyrillic":{
    "scope":"lua",
    "body":"ImFontAtlas:GetGlyphRangesCyrillic()",
    "prefix":"ImFontAtlas:GetGlyphRangesCyrillic",
    "description":"[C++] const ImWchar* ImFontAtlas::GetGlyphRangesCyrillic()\n\n"
  },
  "imgui.ImVector_ImFontPtr_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:pop_back()",
    "prefix":"ImVector_ImFontPtr:pop_back",
    "description":"[C++] void ImVector_ImFontPtr::pop_back(ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImGuiNavInput_TweakSlow":{
    "scope":"lua",
    "body":"imgui.NavInput.TweakSlow",
    "prefix":"imgui.NavInput.TweakSlow",
    "description":"[C++] ImGuiNavInput_TweakSlow = 14\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:pop_back()",
    "prefix":"ImVector_ImGuiTextRange:pop_back",
    "description":"[C++] void ImVector_ImGuiTextRange::pop_back(ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_end":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:_end()",
    "prefix":"ImVector_ImGuiTextRange:end",
    "description":"[C++] ImGuiTextRange* ImVector_ImGuiTextRange::end(ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImGuiIO.MouseWheelH":{
    "scope":"lua",
    "body":"ImGuiIO.MouseWheelH",
    "prefix":"ImGuiIO.MouseWheelH",
    "description":"[C++] float ImGuiIO::MouseWheelH\n\n"
  },
  "imgui.ImVector_ImTextureID_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImTextureID:index_from_ptr",
    "description":"[C++] int ImVector_ImTextureID::index_from_ptr(const ImVector_ImTextureID* self, ImTextureID const * it)\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoSmallPreview":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoSmallPreview",
    "prefix":"imgui.ColorEditFlags.NoSmallPreview",
    "description":"[C++] ImGuiColorEditFlags_NoSmallPreview = 1 << 4\n\n"
  },
  "imgui.ImGuiNavInput_LStickUp":{
    "scope":"lua",
    "body":"imgui.NavInput.LStickUp",
    "prefix":"imgui.NavInput.LStickUp",
    "description":"[C++] ImGuiNavInput_LStickUp = 10\n\n"
  },
  "imgui.ImGuiMouseCursor_ResizeNS":{
    "scope":"lua",
    "body":"imgui.MouseCursor.ResizeNS",
    "prefix":"imgui.MouseCursor.ResizeNS",
    "description":"[C++] ImGuiMouseCursor_ResizeNS = 3\n\n"
  },
  "imgui.ImDrawList_PathLineToMergeDuplicate":{
    "scope":"lua",
    "body":"ImDrawList:PathLineToMergeDuplicate(${1:pos})",
    "prefix":"ImDrawList:PathLineToMergeDuplicate",
    "description":"[C++] void ImDrawList::PathLineToMergeDuplicate(const ImVec2& pos)\n\n"
  },
  "imgui.ImDrawData_ScaleClipRects":{
    "scope":"lua",
    "body":"ImDrawData:ScaleClipRects(${1:fb_scale})",
    "prefix":"ImDrawData:ScaleClipRects",
    "description":"[C++] void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)\n\n"
  },
  "imgui.ImVector_ImFontConfig_front":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:front()",
    "prefix":"ImVector_ImFontConfig:front",
    "description":"[C++] ImFontConfig* ImVector_ImFontConfig::front(ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImGuiNavInput_DpadUp":{
    "scope":"lua",
    "body":"imgui.NavInput.DpadUp",
    "prefix":"imgui.NavInput.DpadUp",
    "description":"[C++] ImGuiNavInput_DpadUp = 6\n\n"
  },
  "imgui.ImVec2":{
    "scope":"lua",
    "body":"new.ImVec2($1)",
    "prefix":"new.ImVec2",
    "description":"typedef struct ImVec2 ImVec2\n\n"
  },
  "imgui.ImVector_char_empty":{
    "scope":"lua",
    "body":"ImVector_char:empty()",
    "prefix":"ImVector_char:empty",
    "description":"[C++] bool ImVector_char::empty(const ImVector_char* self)\n\n"
  },
  "imgui.igSetNextWindowFocus":{
    "scope":"lua",
    "body":"imgui.SetNextWindowFocus()",
    "prefix":"imgui.SetNextWindowFocus",
    "description":"[C++] void ImGui::SetNextWindowFocus()\n\n"
  },
  "imgui.ImGuiNavInput_Cancel":{
    "scope":"lua",
    "body":"imgui.NavInput.Cancel",
    "prefix":"imgui.NavInput.Cancel",
    "description":"[C++] ImGuiNavInput_Cancel = 1\n\n"
  },
  "imgui.igPopButtonRepeat":{
    "scope":"lua",
    "body":"imgui.PopButtonRepeat()",
    "prefix":"imgui.PopButtonRepeat",
    "description":"[C++] void ImGui::PopButtonRepeat()\n\n"
  },
  "imgui.igColorEdit3":{
    "scope":"lua",
    "body":"imgui.ColorEdit3(${1:label}, ${2:col}${3:[, flags=0]})",
    "prefix":"imgui.ColorEdit3",
    "description":"[C++] bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags=0)\n\n"
  },
  "imgui.ImVector_float_pop_back":{
    "scope":"lua",
    "body":"ImVector_float:pop_back()",
    "prefix":"ImVector_float:pop_back",
    "description":"[C++] void ImVector_float::pop_back(ImVector_float* self)\n\n"
  },
  "imgui.ImGuiWindowFlags_ChildMenu":{
    "scope":"lua",
    "body":"imgui.WindowFlags.ChildMenu",
    "prefix":"imgui.WindowFlags.ChildMenu",
    "description":"[C++] ImGuiWindowFlags_ChildMenu = 1 << 28\n\n"
  },
  "imgui.igTreeNodeExStrStr":{
    "scope":"lua",
    "body":"imgui.TreeNodeExStrStr(${1:str_id}, ${2:flags}, ${3:fmt},...)",
    "prefix":"imgui.TreeNodeEx",
    "description":"[C++] bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)\n\n"
  },
  "imgui.ImFontAtlas_AddCustomRectRegular":{
    "scope":"lua",
    "body":"ImFontAtlas:AddCustomRectRegular(${1:id}, ${2:width}, ${3:height})",
    "prefix":"ImFontAtlas:AddCustomRectRegular",
    "description":"[C++] int ImFontAtlas::AddCustomRectRegular(unsigned int id, int width, int height)\n\n"
  },
  "imgui.ImFontAtlas_GetTexDataAsAlpha8":{
    "scope":"lua",
    "body":"ImFontAtlas:GetTexDataAsAlpha8(${1:out_pixels}, ${2:out_width}, ${3:out_height}${4:[, out_bytes_per_pixel=((void*)0)]})",
    "prefix":"ImFontAtlas:GetTexDataAsAlpha8",
    "description":"[C++] void ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel=((void*)0))\n\n"
  },
  "imgui.igGetCursorScreenPos":{
    "scope":"lua",
    "body":"imgui.GetCursorScreenPos()",
    "prefix":"imgui.GetCursorScreenPos",
    "description":"[C++] ImVec2 ImGui::GetCursorScreenPos()\n\n"
  },
  "imgui.ImGuiWindowFlags_Tooltip":{
    "scope":"lua",
    "body":"imgui.WindowFlags.Tooltip",
    "prefix":"imgui.WindowFlags.Tooltip",
    "description":"[C++] ImGuiWindowFlags_Tooltip = 1 << 25\n\n"
  },
  "imgui.ImDrawCornerFlags_Bot":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.Bot",
    "prefix":"imgui.DrawCornerFlags.Bot",
    "description":"[C++] ImDrawCornerFlags_Bot = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight\n\n"
  },
  "imgui.ImGuiWindowFlags_NavFlattened":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NavFlattened",
    "prefix":"imgui.WindowFlags.NavFlattened",
    "description":"[C++] ImGuiWindowFlags_NavFlattened = 1 << 23\n\n"
  },
  "imgui.ImVector_ImDrawIdx_ImVector_ImDrawIdxVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImDrawIdx.ImVector_ImDrawIdxVector(${1:src})",
    "prefix":"imgui.ImVector_ImDrawIdx.ImVector_ImDrawIdx",
    "description":"[C++] ImVector_ImDrawIdx(const ImVector_ImDrawIdx src)\n\n"
  },
  "imgui.igGetStateStorage":{
    "scope":"lua",
    "body":"imgui.GetStateStorage()",
    "prefix":"imgui.GetStateStorage",
    "description":"[C++] ImGuiStorage* ImGui::GetStateStorage()\n\n"
  },
  "imgui.ImGuiWindowFlags_NoInputs":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoInputs",
    "prefix":"imgui.WindowFlags.NoInputs",
    "description":"[C++] ImGuiWindowFlags_NoInputs = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus\n\n"
  },
  "imgui.ImGuiStorage_GetIntRef":{
    "scope":"lua",
    "body":"ImGuiStorage:GetIntRef(${1:key}${2:[, default_val=0]})",
    "prefix":"ImGuiStorage:GetIntRef",
    "description":"[C++] int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val=0)\n\n"
  },
  "imgui.ImFontAtlas.TexUvScale":{
    "scope":"lua",
    "body":"ImFontAtlas.TexUvScale",
    "prefix":"ImFontAtlas.TexUvScale",
    "description":"[C++] ImVec2 ImFontAtlas::TexUvScale\n\n"
  },
  "imgui.igImage":{
    "scope":"lua",
    "body":"imgui.Image(${1:user_texture_id}, ${2:size}${3:[, uv0=ImVec2(0,0)]}${4:[, uv1=ImVec2(1,1)]}${5:[, tint_col=ImVec4(1,1,1,1)]}${6:[, border_col=ImVec4(0,0,0,0)]})",
    "prefix":"imgui.Image",
    "description":"[C++] void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0=ImVec2(0, 0), const ImVec2& uv1=ImVec2(1, 1), const ImVec4& tint_col=ImVec4(1, 1, 1, 1), const ImVec4& border_col=ImVec4(0, 0, 0, 0))\n\n"
  },
  "imgui.ImGuiWindowFlags_UnsavedDocument":{
    "scope":"lua",
    "body":"imgui.WindowFlags.UnsavedDocument",
    "prefix":"imgui.WindowFlags.UnsavedDocument",
    "description":"[C++] ImGuiWindowFlags_UnsavedDocument = 1 << 20\n\n"
  },
  "imgui.ImGuiCol_ButtonHovered":{
    "scope":"lua",
    "body":"imgui.Col.ButtonHovered",
    "prefix":"imgui.Col.ButtonHovered",
    "description":"[C++] ImGuiCol_ButtonHovered = 22\n\n"
  },
  "imgui.ImGuiIO.ConfigWindowsResizeFromEdges":{
    "scope":"lua",
    "body":"ImGuiIO.ConfigWindowsResizeFromEdges",
    "prefix":"ImGuiIO.ConfigWindowsResizeFromEdges",
    "description":"[C++] bool ImGuiIO::ConfigWindowsResizeFromEdges\n\n"
  },
  "imgui.ImGuiWindowFlags_AlwaysUseWindowPadding":{
    "scope":"lua",
    "body":"imgui.WindowFlags.AlwaysUseWindowPadding",
    "prefix":"imgui.WindowFlags.AlwaysUseWindowPadding",
    "description":"[C++] ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16\n\n"
  },
  "imgui.igBeginTabItem":{
    "scope":"lua",
    "body":"imgui.BeginTabItem(${1:label}${2:[, p_open=((void*)0)]}${3:[, flags=0]})",
    "prefix":"imgui.BeginTabItem",
    "description":"[C++] bool ImGui::BeginTabItem(const char* label, bool* p_open=((void*)0), ImGuiTabItemFlags flags=0)\n\n"
  },
  "imgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar":{
    "scope":"lua",
    "body":"imgui.WindowFlags.AlwaysHorizontalScrollbar",
    "prefix":"imgui.WindowFlags.AlwaysHorizontalScrollbar",
    "description":"[C++] ImGuiWindowFlags_AlwaysHorizontalScrollbar = 1<< 15\n\n"
  },
  "imgui.igListBoxHeaderVec2":{
    "scope":"lua",
    "body":"imgui.ListBoxHeaderVec2(${1:label}${2:[, size=ImVec2(0,0)]})",
    "prefix":"imgui.ListBoxHeader",
    "description":"[C++] bool ImGui::ListBoxHeader(const char* label, const ImVec2& size=ImVec2(0, 0))\n\n"
  },
  "imgui.ImVector_ImFontConfig_push_back":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:push_back(${1:v})",
    "prefix":"ImVector_ImFontConfig:push_back",
    "description":"[C++] void ImVector_ImFontConfig::push_back(ImVector_ImFontConfig* self, const ImFontConfig v)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_size":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:size()",
    "prefix":"ImVector_ImDrawIdx:size",
    "description":"[C++] int ImVector_ImDrawIdx::size(const ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImGuiColorEditFlags_DisplayHex":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.DisplayHex",
    "prefix":"imgui.ColorEditFlags.DisplayHex",
    "description":"[C++] ImGuiColorEditFlags_DisplayHex = 1 << 22\n\n"
  },
  "imgui.ImVector_ImVec4_resize":{
    "scope":"lua",
    "body":"ImVector_ImVec4:resize(${1:new_size})",
    "prefix":"ImVector_ImVec4:resize",
    "description":"[C++] void ImVector_ImVec4::resize(ImVector_ImVec4* self, int new_size)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_front":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:front()",
    "prefix":"ImVector_ImFontGlyph:front",
    "description":"[C++] ImFontGlyph* ImVector_ImFontGlyph::front(ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImGuiWindowFlags_MenuBar":{
    "scope":"lua",
    "body":"imgui.WindowFlags.MenuBar",
    "prefix":"imgui.WindowFlags.MenuBar",
    "description":"[C++] ImGuiWindowFlags_MenuBar = 1 << 10\n\n"
  },
  "imgui.ImVec4_ImVec4Float":{
    "scope":"lua",
    "body":"imgui.ImVec4.ImVec4Float(${1:_x}, ${2:_y}, ${3:_z}, ${4:_w})",
    "prefix":"imgui.ImVec4.ImVec4",
    "description":"[C++] ImVec4(float _x, float _y, float _z, float _w)\n\n"
  },
  "imgui.ImVector_ImVec4_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImVec4:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImVec4:erase_unsorted",
    "description":"[C++] ImVec4* ImVector_ImVec4::erase_unsorted(ImVector_ImVec4* self, ImVec4 const * it)\n\n"
  },
  "imgui.ImGuiWindowFlags_NoCollapse":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoCollapse",
    "prefix":"imgui.WindowFlags.NoCollapse",
    "description":"[C++] ImGuiWindowFlags_NoCollapse = 1 << 5\n\n"
  },
  "imgui.igGetWindowContentRegionMin":{
    "scope":"lua",
    "body":"imgui.GetWindowContentRegionMin()",
    "prefix":"imgui.GetWindowContentRegionMin",
    "description":"[C++] ImVec2 ImGui::GetWindowContentRegionMin()\n\n"
  },
  "imgui.igGetItemRectSize":{
    "scope":"lua",
    "body":"imgui.GetItemRectSize()",
    "prefix":"imgui.GetItemRectSize",
    "description":"[C++] ImVec2 ImGui::GetItemRectSize()\n\n"
  },
  "imgui.igTextWrappedV":{
    "scope":"lua",
    "body":"imgui.TextWrappedV(${1:fmt}, ${2:args})",
    "prefix":"imgui.TextWrappedV",
    "description":"[C++] void ImGui::TextWrappedV(const char* fmt, va_list args)\n\n"
  },
  "imgui.igShowMetricsWindow":{
    "scope":"lua",
    "body":"imgui.ShowMetricsWindow(${1:[p_open=((void*)0)]})",
    "prefix":"imgui.ShowMetricsWindow",
    "description":"[C++] void ImGui::ShowMetricsWindow(bool* p_open=((void*)0))\n\n"
  },
  "imgui.igPopFont":{
    "scope":"lua",
    "body":"imgui.PopFont()",
    "prefix":"imgui.PopFont",
    "description":"[C++] void ImGui::PopFont()\n\n"
  },
  "imgui.igGetWindowDrawList":{
    "scope":"lua",
    "body":"imgui.GetWindowDrawList()",
    "prefix":"imgui.GetWindowDrawList",
    "description":"[C++] ImDrawList* ImGui::GetWindowDrawList()\n\n"
  },
  "imgui.ImGuiWindowFlags_NoScrollWithMouse":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoScrollWithMouse",
    "prefix":"imgui.WindowFlags.NoScrollWithMouse",
    "description":"[C++] ImGuiWindowFlags_NoScrollWithMouse = 1 << 4\n\n"
  },
  "imgui.igTreeNodeStr":{
    "scope":"lua",
    "body":"imgui.TreeNodeStr(${1:label})",
    "prefix":"imgui.TreeNode",
    "description":"[C++] bool ImGui::TreeNode(const char* label)\n\n"
  },
  "imgui.igSetTooltipV":{
    "scope":"lua",
    "body":"imgui.SetTooltipV(${1:fmt}, ${2:args})",
    "prefix":"imgui.SetTooltipV",
    "description":"[C++] void ImGui::SetTooltipV(const char* fmt, va_list args)\n\n"
  },
  "imgui.ImGuiWindowFlags_NoMove":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoMove",
    "prefix":"imgui.WindowFlags.NoMove",
    "description":"[C++] ImGuiWindowFlags_NoMove = 1 << 2\n\n"
  },
  "imgui.ImVector_ImTextureID_capacity":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:capacity()",
    "prefix":"ImVector_ImTextureID:capacity",
    "description":"[C++] int ImVector_ImTextureID::capacity(const ImVector_ImTextureID* self)\n\n"
  },
  "imgui.ImVector_float_push_back":{
    "scope":"lua",
    "body":"ImVector_float:push_back(${1:v})",
    "prefix":"ImVector_float:push_back",
    "description":"[C++] void ImVector_float::push_back(ImVector_float* self, const float v)\n\n"
  },
  "imgui.ImGuiCol_MenuBarBg":{
    "scope":"lua",
    "body":"imgui.Col.MenuBarBg",
    "prefix":"imgui.Col.MenuBarBg",
    "description":"[C++] ImGuiCol_MenuBarBg = 13\n\n"
  },
  "imgui.ImGuiWindowFlags_NoResize":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoResize",
    "prefix":"imgui.WindowFlags.NoResize",
    "description":"[C++] ImGuiWindowFlags_NoResize = 1 << 1\n\n"
  },
  "imgui.ImGuiWindowFlags_NoTitleBar":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoTitleBar",
    "prefix":"imgui.WindowFlags.NoTitleBar",
    "description":"[C++] ImGuiWindowFlags_NoTitleBar = 1 << 0\n\n"
  },
  "imgui.ImU32":{
    "scope":"lua",
    "body":"new.ImU32($1)",
    "prefix":"new.ImU32",
    "description":"typedef unsigned int ImU32\n\n"
  },
  "imgui.igIsMouseHoveringRect":{
    "scope":"lua",
    "body":"imgui.IsMouseHoveringRect(${1:r_min}, ${2:r_max}${3:[, clip=true]})",
    "prefix":"imgui.IsMouseHoveringRect",
    "description":"[C++] bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip=true)\n\n"
  },
  "imgui.ImGuiCol_COUNT":{
    "scope":"lua",
    "body":"imgui.Col.COUNT",
    "prefix":"imgui.Col.COUNT",
    "description":"[C++] ImGuiCol_COUNT = 48\n\n"
  },
  "imgui.ImFontAtlas_SetTexID":{
    "scope":"lua",
    "body":"ImFontAtlas:SetTexID(${1:id})",
    "prefix":"ImFontAtlas:SetTexID",
    "description":"[C++] void ImFontAtlas::SetTexID(ImTextureID id)\n\n"
  },
  "imgui.ImGuiDragDropFlags_AcceptPeekOnly":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.AcceptPeekOnly",
    "prefix":"imgui.DragDropFlags.AcceptPeekOnly",
    "description":"[C++] ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect\n\n"
  },
  "imgui.ImGuiCol_DragDropTarget":{
    "scope":"lua",
    "body":"imgui.Col.DragDropTarget",
    "prefix":"imgui.Col.DragDropTarget",
    "description":"[C++] ImGuiCol_DragDropTarget = 43\n\n"
  },
  "imgui.ImGuiCol_TextSelectedBg":{
    "scope":"lua",
    "body":"imgui.Col.TextSelectedBg",
    "prefix":"imgui.Col.TextSelectedBg",
    "description":"[C++] ImGuiCol_TextSelectedBg = 42\n\n"
  },
  "imgui.ImGuiCol_PlotHistogram":{
    "scope":"lua",
    "body":"imgui.Col.PlotHistogram",
    "prefix":"imgui.Col.PlotHistogram",
    "description":"[C++] ImGuiCol_PlotHistogram = 40\n\n"
  },
  "imgui.igBeginPopupContextItem":{
    "scope":"lua",
    "body":"imgui.BeginPopupContextItem(${1:[str_id=((void*)0)]}${2:[, mouse_button=1]})",
    "prefix":"imgui.BeginPopupContextItem",
    "description":"[C++] bool ImGui::BeginPopupContextItem(const char* str_id=((void*)0), int mouse_button=1)\n\n"
  },
  "imgui.ImGuiStorage_SetInt":{
    "scope":"lua",
    "body":"ImGuiStorage:SetInt(${1:key}, ${2:val})",
    "prefix":"ImGuiStorage:SetInt",
    "description":"[C++] void ImGuiStorage::SetInt(ImGuiID key, int val)\n\n"
  },
  "imgui.ImGuiCol_TabUnfocusedActive":{
    "scope":"lua",
    "body":"imgui.Col.TabUnfocusedActive",
    "prefix":"imgui.Col.TabUnfocusedActive",
    "description":"[C++] ImGuiCol_TabUnfocusedActive = 37\n\n"
  },
  "imgui.ImGuiCol_TabUnfocused":{
    "scope":"lua",
    "body":"imgui.Col.TabUnfocused",
    "prefix":"imgui.Col.TabUnfocused",
    "description":"[C++] ImGuiCol_TabUnfocused = 36\n\n"
  },
  "imgui.ImGuiCol_TabActive":{
    "scope":"lua",
    "body":"imgui.Col.TabActive",
    "prefix":"imgui.Col.TabActive",
    "description":"[C++] ImGuiCol_TabActive = 35\n\n"
  },
  "imgui.ImGuiSizeCallback":{
    "scope":"lua",
    "body":"new.ImGuiSizeCallback($1)",
    "prefix":"new.ImGuiSizeCallback",
    "description":"typedef void(*)(ImGuiSizeCallbackData* data); ImGuiSizeCallback\n\n"
  },
  "imgui.ImVector_ImDrawVert_erase":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:erase(${1:it})",
    "prefix":"ImVector_ImDrawVert:erase",
    "description":"[C++] ImDrawVert* ImVector_ImDrawVert::erase(ImVector_ImDrawVert* self, ImDrawVert const * it)\n\n"
  },
  "imgui.ImGuiColorEditFlags_Uint8":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.Uint8",
    "prefix":"imgui.ColorEditFlags.Uint8",
    "description":"[C++] ImGuiColorEditFlags_Uint8 = 1 << 23\n\n"
  },
  "imgui.igGetColorU32Vec4":{
    "scope":"lua",
    "body":"imgui.GetColorU32Vec4(${1:col})",
    "prefix":"imgui.GetColorU32",
    "description":"[C++] ImU32 ImGui::GetColorU32(const ImVec4& col)\n\n"
  },
  "imgui.ImVector_char_ImVector_charVector":{
    "scope":"lua",
    "body":"imgui.ImVector_char.ImVector_charVector(${1:src})",
    "prefix":"imgui.ImVector_char.ImVector_char",
    "description":"[C++] ImVector_char(const ImVector_char src)\n\n"
  },
  "imgui.ImGuiCol_ResizeGrip":{
    "scope":"lua",
    "body":"imgui.Col.ResizeGrip",
    "prefix":"imgui.Col.ResizeGrip",
    "description":"[C++] ImGuiCol_ResizeGrip = 30\n\n"
  },
  "imgui.ImGuiStyleVar_FramePadding":{
    "scope":"lua",
    "body":"imgui.StyleVar.FramePadding",
    "prefix":"imgui.StyleVar.FramePadding",
    "description":"[C++] ImGuiStyleVar_FramePadding = 10\n\n"
  },
  "imgui.ImGuiCol_HeaderActive":{
    "scope":"lua",
    "body":"imgui.Col.HeaderActive",
    "prefix":"imgui.Col.HeaderActive",
    "description":"[C++] ImGuiCol_HeaderActive = 26\n\n"
  },
  "imgui.ImGuiCol_SliderGrabActive":{
    "scope":"lua",
    "body":"imgui.Col.SliderGrabActive",
    "prefix":"imgui.Col.SliderGrabActive",
    "description":"[C++] ImGuiCol_SliderGrabActive = 20\n\n"
  },
  "imgui.ImVector_ImDrawVert_clear":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:clear()",
    "prefix":"ImVector_ImDrawVert:clear",
    "description":"[C++] void ImVector_ImDrawVert::clear(ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.igGetColorU32":{
    "scope":"lua",
    "body":"imgui.GetColorU32(${1:idx}${2:[, alpha_mul=1.0f]})",
    "prefix":"imgui.GetColorU32",
    "description":"[C++] ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul=1.0f)\n\n"
  },
  "imgui.ImGuiCol_SliderGrab":{
    "scope":"lua",
    "body":"imgui.Col.SliderGrab",
    "prefix":"imgui.Col.SliderGrab",
    "description":"[C++] ImGuiCol_SliderGrab = 19\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_push_front":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:push_front(${1:v})",
    "prefix":"ImVector_ImGuiStoragePair:push_front",
    "description":"[C++] void ImVector_ImGuiStoragePair::push_front(ImVector_ImGuiStoragePair* self, const ImGuiStoragePair v)\n\n"
  },
  "imgui.igGetColumnsCount":{
    "scope":"lua",
    "body":"imgui.GetColumnsCount()",
    "prefix":"imgui.GetColumnsCount",
    "description":"[C++] int ImGui::GetColumnsCount()\n\n"
  },
  "imgui.ImFont.ContainerAtlas":{
    "scope":"lua",
    "body":"ImFont.ContainerAtlas",
    "prefix":"ImFont.ContainerAtlas",
    "description":"[C++] ImFontAtlas* ImFont::ContainerAtlas\n\n"
  },
  "imgui.igIsKeyPressed":{
    "scope":"lua",
    "body":"imgui.IsKeyPressed(${1:user_key_index}${2:[, repeat=true]})",
    "prefix":"imgui.IsKeyPressed",
    "description":"[C++] bool ImGui::IsKeyPressed(int user_key_index, bool repeat=true)\n\n"
  },
  "imgui.igSetNextItemWidth":{
    "scope":"lua",
    "body":"imgui.SetNextItemWidth(${1:item_width})",
    "prefix":"imgui.SetNextItemWidth",
    "description":"[C++] void ImGui::SetNextItemWidth(float item_width)\n\n"
  },
  "imgui.ImVector_begin":{
    "scope":"lua",
    "body":"ImVector:begin()",
    "prefix":"ImVector:begin",
    "description":"[C++] T* ImVector::begin()\n\n"
  },
  "imgui.ImGuiCol_TitleBgCollapsed":{
    "scope":"lua",
    "body":"imgui.Col.TitleBgCollapsed",
    "prefix":"imgui.Col.TitleBgCollapsed",
    "description":"[C++] ImGuiCol_TitleBgCollapsed = 12\n\n"
  },
  "imgui.igColorConvertFloat4ToU32":{
    "scope":"lua",
    "body":"imgui.ColorConvertFloat4ToU32(${1:in})",
    "prefix":"imgui.ColorConvertFloat4ToU32",
    "description":"[C++] ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)\n\n"
  },
  "imgui.ImVector_ImFontPtr_capacity":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:capacity()",
    "prefix":"ImVector_ImFontPtr:capacity",
    "description":"[C++] int ImVector_ImFontPtr::capacity(const ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImGuiIO.IniFilename":{
    "scope":"lua",
    "body":"ImGuiIO.IniFilename",
    "prefix":"ImGuiIO.IniFilename",
    "description":"[C++] const char* ImGuiIO::IniFilename\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_back":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:back()",
    "prefix":"ImVector_ImFontAtlasCustomRect:back",
    "description":"[C++] ImFontAtlasCustomRect* ImVector_ImFontAtlasCustomRect::back(ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImFont_SetFallbackChar":{
    "scope":"lua",
    "body":"ImFont:SetFallbackChar(${1:c})",
    "prefix":"ImFont:SetFallbackChar",
    "description":"[C++] void ImFont::SetFallbackChar(ImWchar c)\n\n"
  },
  "imgui.ImVector_float_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_float:erase_unsorted(${1:it})",
    "prefix":"ImVector_float:erase_unsorted",
    "description":"[C++] float* ImVector_float::erase_unsorted(ImVector_float* self, float const * it)\n\n"
  },
  "imgui.ImDrawList_AddCircleFilled":{
    "scope":"lua",
    "body":"ImDrawList:AddCircleFilled(${1:centre}, ${2:radius}, ${3:col}${4:[, num_segments=12]})",
    "prefix":"ImDrawList:AddCircleFilled",
    "description":"[C++] void ImDrawList::AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments=12)\n\n"
  },
  "imgui.ImGuiCol_FrameBgHovered":{
    "scope":"lua",
    "body":"imgui.Col.FrameBgHovered",
    "prefix":"imgui.Col.FrameBgHovered",
    "description":"[C++] ImGuiCol_FrameBgHovered = 8\n\n"
  },
  "imgui.igTextDisabled":{
    "scope":"lua",
    "body":"imgui.TextDisabled(${1:fmt},...)",
    "prefix":"imgui.TextDisabled",
    "description":"[C++] void ImGui::TextDisabled(const char* fmt, ...)\n\n"
  },
  "imgui.ImGuiCol_PopupBg":{
    "scope":"lua",
    "body":"imgui.Col.PopupBg",
    "prefix":"imgui.Col.PopupBg",
    "description":"[C++] ImGuiCol_PopupBg = 4\n\n"
  },
  "imgui.ImGuiCol_WindowBg":{
    "scope":"lua",
    "body":"imgui.Col.WindowBg",
    "prefix":"imgui.Col.WindowBg",
    "description":"[C++] ImGuiCol_WindowBg = 2\n\n"
  },
  "imgui.ImGuiCol_Text":{
    "scope":"lua",
    "body":"imgui.Col.Text",
    "prefix":"imgui.Col.Text",
    "description":"[C++] ImGuiCol_Text = 0\n\n"
  },
  "imgui.ImGuiDataType_S32":{
    "scope":"lua",
    "body":"imgui.DataType.S32",
    "prefix":"imgui.DataType.S32",
    "description":"[C++] ImGuiDataType_S32 = 4\n\n"
  },
  "imgui.ImVector_ImU32_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImU32:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImU32:erase",
    "description":"[C++] ImU32* ImVector_ImU32::erase(ImVector_ImU32* self, ImU32 const * it, ImU32 const * it_last)\n\n"
  },
  "imgui.ImVector_ImWchar_swap":{
    "scope":"lua",
    "body":"ImVector_ImWchar:swap(${1:rhs})",
    "prefix":"ImVector_ImWchar:swap",
    "description":"[C++] void ImVector_ImWchar::swap(ImVector_ImWchar* self, ImVector_ImWchar rhs)\n\n"
  },
  "imgui.ImVector_ImTextureID_clear":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:clear()",
    "prefix":"ImVector_ImTextureID:clear",
    "description":"[C++] void ImVector_ImTextureID::clear(ImVector_ImTextureID* self)\n\n"
  },
  "imgui.igSetNextWindowContentSize":{
    "scope":"lua",
    "body":"imgui.SetNextWindowContentSize(${1:size})",
    "prefix":"imgui.SetNextWindowContentSize",
    "description":"[C++] void ImGui::SetNextWindowContentSize(const ImVec2& size)\n\n"
  },
  "imgui.ImFontAtlasFlags_None":{
    "scope":"lua",
    "body":"imgui.FontAtlasFlags.None",
    "prefix":"imgui.FontAtlasFlags.None",
    "description":"[C++] ImFontAtlasFlags_None = 0\n\n"
  },
  "imgui.ImVector_float_capacity":{
    "scope":"lua",
    "body":"ImVector_float:capacity()",
    "prefix":"ImVector_float:capacity",
    "description":"[C++] int ImVector_float::capacity(const ImVector_float* self)\n\n"
  },
  "imgui.ImGuiColorEditFlags_AlphaPreviewHalf":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.AlphaPreviewHalf",
    "prefix":"imgui.ColorEditFlags.AlphaPreviewHalf",
    "description":"[C++] ImGuiColorEditFlags_AlphaPreviewHalf = 1 << 18\n\n"
  },
  "imgui.igInputFloat3":{
    "scope":"lua",
    "body":"imgui.InputFloat3(${1:label}, ${2:v}${3:[, format=\"%.3f\"]}${4:[, flags=0]})",
    "prefix":"imgui.InputFloat3",
    "description":"[C++] bool ImGui::InputFloat3(const char* label, float v[3], const char* format=\"%.3f\", ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImWchar_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImWchar:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImWchar:index_from_ptr",
    "description":"[C++] int ImVector_ImWchar::index_from_ptr(const ImVector_ImWchar* self, ImWchar const * it)\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoDragDrop":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoDragDrop",
    "prefix":"imgui.ColorEditFlags.NoDragDrop",
    "description":"[C++] ImGuiColorEditFlags_NoDragDrop = 1 << 9\n\n"
  },
  "imgui.ImGuiFocusedFlags_AnyWindow":{
    "scope":"lua",
    "body":"imgui.FocusedFlags.AnyWindow",
    "prefix":"imgui.FocusedFlags.AnyWindow",
    "description":"[C++] ImGuiFocusedFlags_AnyWindow = 1 << 2\n\n"
  },
  "imgui.ImVector_ImFontPtr_begin":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:begin()",
    "prefix":"ImVector_ImFontPtr:begin",
    "description":"[C++] ImFont** ImVector_ImFontPtr::begin(ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImGuiTextRange.e":{
    "scope":"lua",
    "body":"ImGuiTextRange.e",
    "prefix":"ImGuiTextRange.e",
    "description":"[C++] const char* ImGuiTextRange::e\n\n"
  },
  "imgui.ImVector_ImFontGlyph_erase":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:erase(${1:it})",
    "prefix":"ImVector_ImFontGlyph:erase",
    "description":"[C++] ImFontGlyph* ImVector_ImFontGlyph::erase(ImVector_ImFontGlyph* self, ImFontGlyph const * it)\n\n"
  },
  "imgui.igGetFontTexUvWhitePixel":{
    "scope":"lua",
    "body":"imgui.GetFontTexUvWhitePixel()",
    "prefix":"imgui.GetFontTexUvWhitePixel",
    "description":"[C++] ImVec2 ImGui::GetFontTexUvWhitePixel()\n\n"
  },
  "imgui.ImGuiNavInput_LStickDown":{
    "scope":"lua",
    "body":"imgui.NavInput.LStickDown",
    "prefix":"imgui.NavInput.LStickDown",
    "description":"[C++] ImGuiNavInput_LStickDown = 11\n\n"
  },
  "imgui.igEnd":{
    "scope":"lua",
    "body":"imgui.End()",
    "prefix":"imgui.End",
    "description":"[C++] void ImGui::End()\n\n"
  },
  "imgui.ImGuiColorEditFlags_None":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.None",
    "prefix":"imgui.ColorEditFlags.None",
    "description":"[C++] ImGuiColorEditFlags_None = 0\n\n"
  },
  "imgui.igMenuItemBoolPtr":{
    "scope":"lua",
    "body":"imgui.MenuItemBoolPtr(${1:label}, ${2:shortcut}, ${3:p_selected}${4:[, enabled=true]})",
    "prefix":"imgui.MenuItem",
    "description":"[C++] bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled=true)\n\n"
  },
  "imgui.igInputScalarN":{
    "scope":"lua",
    "body":"imgui.InputScalarN(${1:label}, ${2:data_type}, ${3:v}, ${4:components}${5:[, step=((void*)0)]}${6:[, step_fast=((void*)0)]}${7:[, format=((void*)0)]}${8:[, flags=0]})",
    "prefix":"imgui.InputScalarN",
    "description":"[C++] bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* step=((void*)0), const void* step_fast=((void*)0), const char* format=((void*)0), ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.ImGuiTabItemFlags_NoPushId":{
    "scope":"lua",
    "body":"imgui.TabItemFlags.NoPushId",
    "prefix":"imgui.TabItemFlags.NoPushId",
    "description":"[C++] ImGuiTabItemFlags_NoPushId = 1 << 3\n\n"
  },
  "imgui.ImGuiTabItemFlags_SetSelected":{
    "scope":"lua",
    "body":"imgui.TabItemFlags.SetSelected",
    "prefix":"imgui.TabItemFlags.SetSelected",
    "description":"[C++] ImGuiTabItemFlags_SetSelected = 1 << 1\n\n"
  },
  "imgui.ImGuiTabItemFlags_UnsavedDocument":{
    "scope":"lua",
    "body":"imgui.TabItemFlags.UnsavedDocument",
    "prefix":"imgui.TabItemFlags.UnsavedDocument",
    "description":"[C++] ImGuiTabItemFlags_UnsavedDocument = 1 << 0\n\n"
  },
  "imgui.ImGuiDir_COUNT":{
    "scope":"lua",
    "body":"imgui.Dir.COUNT",
    "prefix":"imgui.Dir.COUNT",
    "description":"[C++] ImGuiDir_COUNT = 4\n\n"
  },
  "imgui.ImVector_ImU32_size":{
    "scope":"lua",
    "body":"ImVector_ImU32:size()",
    "prefix":"ImVector_ImU32:size",
    "description":"[C++] int ImVector_ImU32::size(const ImVector_ImU32* self)\n\n"
  },
  "imgui.ImGuiDir_Up":{
    "scope":"lua",
    "body":"imgui.Dir.Up",
    "prefix":"imgui.Dir.Up",
    "description":"[C++] ImGuiDir_Up = 2\n\n"
  },
  "imgui.ImGuiDir_Right":{
    "scope":"lua",
    "body":"imgui.Dir.Right",
    "prefix":"imgui.Dir.Right",
    "description":"[C++] ImGuiDir_Right = 1\n\n"
  },
  "imgui.ImDrawList_AddRectFilled":{
    "scope":"lua",
    "body":"ImDrawList:AddRectFilled(${1:a}, ${2:b}, ${3:col}${4:[, rounding=0.0f]}${5:[, rounding_corners=ImDrawCornerFlags_All]})",
    "prefix":"ImDrawList:AddRectFilled",
    "description":"[C++] void ImDrawList::AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding=0.0f, ImDrawCornerFlags rounding_corners=ImDrawCornerFlags_All)\n\n"
  },
  "imgui.ImGuiComboFlags_HeightMask_":{
    "scope":"lua",
    "body":"imgui.ComboFlags.HeightMask_",
    "prefix":"imgui.ComboFlags.HeightMask_",
    "description":"[C++] ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest\n\n"
  },
  "imgui.ImGuiInputTextCallbackData_ImGuiInputTextCallbackData":{
    "scope":"lua",
    "body":"imgui.ImGuiInputTextCallbackData()",
    "prefix":"imgui.ImGuiInputTextCallbackData",
    "description":"[C++] ImGuiInputTextCallbackData()\n\n"
  },
  "imgui.ImDrawList.CmdBuffer":{
    "scope":"lua",
    "body":"ImDrawList.CmdBuffer",
    "prefix":"ImDrawList.CmdBuffer",
    "description":"[C++] ImVector_ImDrawCmd ImDrawList::CmdBuffer\n\n"
  },
  "imgui.ImGuiStoragePair_ImGuiStoragePairFloat":{
    "scope":"lua",
    "body":"imgui.ImGuiStoragePair.ImGuiStoragePairFloat(${1:_key}, ${2:_val_f})",
    "prefix":"imgui.ImGuiStoragePair.ImGuiStoragePair",
    "description":"[C++] ImGuiStoragePair(ImGuiID _key, float _val_f)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:pop_back()",
    "prefix":"ImVector_ImDrawIdx:pop_back",
    "description":"[C++] void ImVector_ImDrawIdx::pop_back(ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.igProgressBar":{
    "scope":"lua",
    "body":"imgui.ProgressBar(${1:fraction}${2:[, size_arg=ImVec2(-1,0)]}${3:[, overlay=((void*)0)]})",
    "prefix":"imgui.ProgressBar",
    "description":"[C++] void ImGui::ProgressBar(float fraction, const ImVec2& size_arg=ImVec2(-1, 0), const char* overlay=((void*)0))\n\n"
  },
  "imgui.ImGuiComboFlags_HeightLargest":{
    "scope":"lua",
    "body":"imgui.ComboFlags.HeightLargest",
    "prefix":"imgui.ComboFlags.HeightLargest",
    "description":"[C++] ImGuiComboFlags_HeightLargest = 1 << 4\n\n"
  },
  "imgui.ImGuiComboFlags_HeightLarge":{
    "scope":"lua",
    "body":"imgui.ComboFlags.HeightLarge",
    "prefix":"imgui.ComboFlags.HeightLarge",
    "description":"[C++] ImGuiComboFlags_HeightLarge = 1 << 3\n\n"
  },
  "imgui.ImVector_ImVec4_capacity":{
    "scope":"lua",
    "body":"ImVector_ImVec4:capacity()",
    "prefix":"ImVector_ImVec4:capacity",
    "description":"[C++] int ImVector_ImVec4::capacity(const ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImVector_ImDrawVert_front_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:front_const()",
    "prefix":"ImVector_ImDrawVert:front",
    "description":"[C++] ImDrawVert const * ImVector_ImDrawVert::front(const ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImVector_ImFontPtr_push_back":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:push_back(${1:v})",
    "prefix":"ImVector_ImFontPtr:push_back",
    "description":"[C++] void ImVector_ImFontPtr::push_back(ImVector_ImFontPtr* self, ImFont* const  v)\n\n"
  },
  "imgui.ImVector_reserve":{
    "scope":"lua",
    "body":"ImVector:reserve(${1:new_capacity})",
    "prefix":"ImVector:reserve",
    "description":"[C++] void ImVector::reserve(int new_capacity)\n\n"
  },
  "imgui.igBeginChildFrame":{
    "scope":"lua",
    "body":"imgui.BeginChildFrame(${1:id}, ${2:size}${3:[, flags=0]})",
    "prefix":"imgui.BeginChildFrame",
    "description":"[C++] bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags=0)\n\n"
  },
  "imgui.ImFont.Descent":{
    "scope":"lua",
    "body":"ImFont.Descent",
    "prefix":"ImFont.Descent",
    "description":"[C++] float ImFont::Descent\n\n"
  },
  "imgui.ImVector_ImVec2_reserve":{
    "scope":"lua",
    "body":"ImVector_ImVec2:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImVec2:reserve",
    "description":"[C++] void ImVector_ImVec2::reserve(ImVector_ImVec2* self, int new_capacity)\n\n"
  },
  "imgui.ImVector_ImVec4_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImVec4:size_in_bytes()",
    "prefix":"ImVector_ImVec4:size_in_bytes",
    "description":"[C++] int ImVector_ImVec4::size_in_bytes(const ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImGuiStoragePair":{
    "scope":"lua",
    "body":"new.ImGuiStoragePair($1)",
    "prefix":"new.ImGuiStoragePair",
    "description":"typedef struct ImGuiStoragePair ImGuiStoragePair\n\n"
  },
  "imgui.ImGuiDataType_S16":{
    "scope":"lua",
    "body":"imgui.DataType.S16",
    "prefix":"imgui.DataType.S16",
    "description":"[C++] ImGuiDataType_S16 = 2\n\n"
  },
  "imgui.ImVector_char_begin":{
    "scope":"lua",
    "body":"ImVector_char:begin()",
    "prefix":"ImVector_char:begin",
    "description":"[C++] char* ImVector_char::begin(ImVector_char* self)\n\n"
  },
  "imgui.igEndTabBar":{
    "scope":"lua",
    "body":"imgui.EndTabBar()",
    "prefix":"imgui.EndTabBar",
    "description":"[C++] void ImGui::EndTabBar()\n\n"
  },
  "imgui.igDragFloat3":{
    "scope":"lua",
    "body":"imgui.DragFloat3(${1:label}, ${2:v}${3:[, v_speed=1.0f]}${4:[, v_min=0.0f]}${5:[, v_max=0.0f]}${6:[, format=\"%.3f\"]}${7:[, power=1.0f]})",
    "prefix":"imgui.DragFloat3",
    "description":"[C++] bool ImGui::DragFloat3(const char* label, float v[3], float v_speed=1.0f, float v_min=0.0f, float v_max=0.0f, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.ImVector_ImVec2_end":{
    "scope":"lua",
    "body":"ImVector_ImVec2:_end()",
    "prefix":"ImVector_ImVec2:end",
    "description":"[C++] ImVec2* ImVector_ImVec2::end(ImVector_ImVec2* self)\n\n"
  },
  "imgui.igInputText":{
    "scope":"lua",
    "body":"imgui.InputText(${1:label}, ${2:buf}, ${3:buf_size}${4:[, flags=0]}${5:[, callback=((void*)0)]}${6:[, user_data=((void*)0)]})",
    "prefix":"imgui.InputText",
    "description":"[C++] bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags=0, ImGuiInputTextCallback callback=((void*)0), void* user_data=((void*)0))\n\n"
  },
  "imgui.ImGuiCond_Once":{
    "scope":"lua",
    "body":"imgui.Cond.Once",
    "prefix":"imgui.Cond.Once",
    "description":"[C++] ImGuiCond_Once = 1 << 1\n\n"
  },
  "imgui.igGetDragDropPayload":{
    "scope":"lua",
    "body":"imgui.GetDragDropPayload()",
    "prefix":"imgui.GetDragDropPayload",
    "description":"[C++] const ImGuiPayload* ImGui::GetDragDropPayload()\n\n"
  },
  "imgui.ImVector_ImFontConfig__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImFontConfig:_grow_capacity",
    "description":"[C++] int ImVector_ImFontConfig::_grow_capacity(const ImVector_ImFontConfig* self, int sz)\n\n"
  },
  "imgui.ImFontConfig.MergeMode":{
    "scope":"lua",
    "body":"ImFontConfig.MergeMode",
    "prefix":"ImFontConfig.MergeMode",
    "description":"[C++] bool ImFontConfig::MergeMode\n\n"
  },
  "imgui.igSetAllocatorFunctions":{
    "scope":"lua",
    "body":"imgui.SetAllocatorFunctions(${1:alloc_func}, ${2:free_func}${3:[, user_data=((void*)0)]})",
    "prefix":"imgui.SetAllocatorFunctions",
    "description":"[C++] void ImGui::SetAllocatorFunctions(void*(*alloc_func)(size_t sz, void* user_data), void(*free_func)(void* ptr, void* user_data), void* user_data=((void*)0))\n\n"
  },
  "imgui.ImFontAtlas_CalcCustomRectUV":{
    "scope":"lua",
    "body":"ImFontAtlas:CalcCustomRectUV(${1:rect}, ${2:out_uv_min}, ${3:out_uv_max})",
    "prefix":"ImFontAtlas:CalcCustomRectUV",
    "description":"[C++] void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max)\n\n"
  },
  "imgui.ImVector_ImTextureID_end_const":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:end_const()",
    "prefix":"ImVector_ImTextureID:end",
    "description":"[C++] ImTextureID const * ImVector_ImTextureID::end(const ImVector_ImTextureID* self)\n\n"
  },
  "imgui.igSetScrollFromPosY":{
    "scope":"lua",
    "body":"imgui.SetScrollFromPosY(${1:local_y}${2:[, center_y_ratio=0.5f]})",
    "prefix":"imgui.SetScrollFromPosY",
    "description":"[C++] void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio=0.5f)\n\n"
  },
  "imgui.ImVector_ImDrawVert_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:begin_const()",
    "prefix":"ImVector_ImDrawVert:begin",
    "description":"[C++] ImDrawVert const * ImVector_ImDrawVert::begin(const ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_insert":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImDrawChannel:insert",
    "description":"[C++] ImDrawChannel* ImVector_ImDrawChannel::insert(ImVector_ImDrawChannel* self, ImDrawChannel const * it, const ImDrawChannel v)\n\n"
  },
  "imgui.ImVector_char_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_char:index_from_ptr(${1:it})",
    "prefix":"ImVector_char:index_from_ptr",
    "description":"[C++] int ImVector_char::index_from_ptr(const ImVector_char* self, char const * it)\n\n"
  },
  "imgui.igSliderInt3":{
    "scope":"lua",
    "body":"imgui.SliderInt3(${1:label}, ${2:v}, ${3:v_min}, ${4:v_max}${5:[, format=\"%d\"]})",
    "prefix":"imgui.SliderInt3",
    "description":"[C++] bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format=\"%d\")\n\n"
  },
  "imgui.ImGuiStorage_SetFloat":{
    "scope":"lua",
    "body":"ImGuiStorage:SetFloat(${1:key}, ${2:val})",
    "prefix":"ImGuiStorage:SetFloat",
    "description":"[C++] void ImGuiStorage::SetFloat(ImGuiID key, float val)\n\n"
  },
  "imgui.igIsKeyReleased":{
    "scope":"lua",
    "body":"imgui.IsKeyReleased(${1:user_key_index})",
    "prefix":"imgui.IsKeyReleased",
    "description":"[C++] bool ImGui::IsKeyReleased(int user_key_index)\n\n"
  },
  "imgui.ImDrawCmd_ImDrawCmd":{
    "scope":"lua",
    "body":"imgui.ImDrawCmd()",
    "prefix":"imgui.ImDrawCmd",
    "description":"[C++] ImDrawCmd()\n\n"
  },
  "imgui.ImGuiTabBarFlags_FittingPolicyDefault_":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.FittingPolicyDefault_",
    "prefix":"imgui.TabBarFlags.FittingPolicyDefault_",
    "description":"[C++] ImGuiTabBarFlags_FittingPolicyDefault_ = ImGuiTabBarFlags_FittingPolicyResizeDown\n\n"
  },
  "imgui.ImVector_ImWchar_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImWchar:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImWchar:resize",
    "description":"[C++] void ImVector_ImWchar::resize(ImVector_ImWchar* self, int new_size, const ImWchar v)\n\n"
  },
  "imgui.igGetTime":{
    "scope":"lua",
    "body":"imgui.GetTime()",
    "prefix":"imgui.GetTime",
    "description":"[C++] double ImGui::GetTime()\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.BufTextLen":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.BufTextLen",
    "prefix":"ImGuiInputTextCallbackData.BufTextLen",
    "description":"[C++] int ImGuiInputTextCallbackData::BufTextLen\n\n"
  },
  "imgui.ImVector_ImFontGlyph_end_const":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:end_const()",
    "prefix":"ImVector_ImFontGlyph:end",
    "description":"[C++] ImFontGlyph const * ImVector_ImFontGlyph::end(const ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_end":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:_end()",
    "prefix":"ImVector_ImFontGlyph:end",
    "description":"[C++] ImFontGlyph* ImVector_ImFontGlyph::end(ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.igGetMouseCursor":{
    "scope":"lua",
    "body":"imgui.GetMouseCursor()",
    "prefix":"imgui.GetMouseCursor",
    "description":"[C++] ImGuiMouseCursor ImGui::GetMouseCursor()\n\n"
  },
  "imgui.igSetColumnOffset":{
    "scope":"lua",
    "body":"imgui.SetColumnOffset(${1:column_index}, ${2:offset_x})",
    "prefix":"imgui.SetColumnOffset",
    "description":"[C++] void ImGui::SetColumnOffset(int column_index, float offset_x)\n\n"
  },
  "imgui.igIsAnyItemHovered":{
    "scope":"lua",
    "body":"imgui.IsAnyItemHovered()",
    "prefix":"imgui.IsAnyItemHovered",
    "description":"[C++] bool ImGui::IsAnyItemHovered()\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder_Clear":{
    "scope":"lua",
    "body":"ImFontGlyphRangesBuilder:Clear()",
    "prefix":"ImFontGlyphRangesBuilder:Clear",
    "description":"[C++] void ImFontGlyphRangesBuilder::Clear()\n\n"
  },
  "imgui.igOpenPopup":{
    "scope":"lua",
    "body":"imgui.OpenPopup(${1:str_id})",
    "prefix":"imgui.OpenPopup",
    "description":"[C++] void ImGui::OpenPopup(const char* str_id)\n\n"
  },
  "imgui.ImGuiTabBarFlags_None":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.None",
    "prefix":"imgui.TabBarFlags.None",
    "description":"[C++] ImGuiTabBarFlags_None = 0\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImFontAtlasCustomRect:index_from_ptr",
    "description":"[C++] int ImVector_ImFontAtlasCustomRect::index_from_ptr(const ImVector_ImFontAtlasCustomRect* self, ImFontAtlasCustomRect const * it)\n\n"
  },
  "imgui.ImDrawList_ImDrawList":{
    "scope":"lua",
    "body":"imgui.ImDrawList(${1:shared_data})",
    "prefix":"imgui.ImDrawList",
    "description":"[C++] ImDrawList(const ImDrawListSharedData* shared_data)\n\n"
  },
  "imgui.igListBoxStr_arr":{
    "scope":"lua",
    "body":"imgui.ListBoxStr_arr(${1:label}, ${2:current_item}, ${3:items}, ${4:items_count}${5:[, height_in_items=-1]})",
    "prefix":"imgui.ListBox",
    "description":"[C++] bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items=-1)\n\n"
  },
  "imgui.igTreeNodePtr":{
    "scope":"lua",
    "body":"imgui.TreeNodePtr(${1:ptr_id}, ${2:fmt},...)",
    "prefix":"imgui.TreeNode",
    "description":"[C++] bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)\n\n"
  },
  "imgui.ImVector_ImVec4_push_back":{
    "scope":"lua",
    "body":"ImVector_ImVec4:push_back(${1:v})",
    "prefix":"ImVector_ImVec4:push_back",
    "description":"[C++] void ImVector_ImVec4::push_back(ImVector_ImVec4* self, const ImVec4 v)\n\n"
  },
  "imgui.igTreeNodeStrStr":{
    "scope":"lua",
    "body":"imgui.TreeNodeStrStr(${1:str_id}, ${2:fmt},...)",
    "prefix":"imgui.TreeNode",
    "description":"[C++] bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_swap":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:swap(${1:rhs})",
    "prefix":"ImVector_ImDrawIdx:swap",
    "description":"[C++] void ImVector_ImDrawIdx::swap(ImVector_ImDrawIdx* self, ImVector_ImDrawIdx rhs)\n\n"
  },
  "imgui.ImVector_ImFontConfig_clear":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:clear()",
    "prefix":"ImVector_ImFontConfig:clear",
    "description":"[C++] void ImVector_ImFontConfig::clear(ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImFontConfig":{
    "scope":"lua",
    "body":"new.ImFontConfig($1)",
    "prefix":"new.ImFontConfig",
    "description":"typedef struct ImFontConfig ImFontConfig\n\n"
  },
  "imgui.ImVector_ImFontConfig_end":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:_end()",
    "prefix":"ImVector_ImFontConfig:end",
    "description":"[C++] ImFontConfig* ImVector_ImFontConfig::end(ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImFontAtlas_AddFontFromMemoryCompressedTTF":{
    "scope":"lua",
    "body":"ImFontAtlas:AddFontFromMemoryCompressedTTF(${1:compressed_font_data}, ${2:compressed_font_size}, ${3:size_pixels}${4:[, font_cfg=((void*)0)]}${5:[, glyph_ranges=((void*)0)]})",
    "prefix":"ImFontAtlas:AddFontFromMemoryCompressedTTF",
    "description":"[C++] ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg=((void*)0), const ImWchar* glyph_ranges=((void*)0))\n\n"
  },
  "imgui.ImFontAtlas.CustomRectIds[1]":{
    "scope":"lua",
    "body":"ImFontAtlas.CustomRectIds[1]",
    "prefix":"ImFontAtlas.CustomRectIds[1]",
    "description":"[C++] int ImFontAtlas::CustomRectIds[1]\n\n"
  },
  "imgui.ImVector_ImTextureID_size":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:size()",
    "prefix":"ImVector_ImTextureID:size",
    "description":"[C++] int ImVector_ImTextureID::size(const ImVector_ImTextureID* self)\n\n"
  },
  "imgui.ImVector_ImU32_front_const":{
    "scope":"lua",
    "body":"ImVector_ImU32:front_const()",
    "prefix":"ImVector_ImU32:front",
    "description":"[C++] ImU32 const * ImVector_ImU32::front(const ImVector_ImU32* self)\n\n"
  },
  "imgui.ImGuiDataType_S64":{
    "scope":"lua",
    "body":"imgui.DataType.S64",
    "prefix":"imgui.DataType.S64",
    "description":"[C++] ImGuiDataType_S64 = 6\n\n"
  },
  "imgui.ImVector_ImDrawCmd_capacity":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:capacity()",
    "prefix":"ImVector_ImDrawCmd:capacity",
    "description":"[C++] int ImVector_ImDrawCmd::capacity(const ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_erase":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:erase(${1:it})",
    "prefix":"ImVector_ImDrawChannel:erase",
    "description":"[C++] ImDrawChannel* ImVector_ImDrawChannel::erase(ImVector_ImDrawChannel* self, ImDrawChannel const * it)\n\n"
  },
  "imgui.igPushStyleVarVec2":{
    "scope":"lua",
    "body":"imgui.PushStyleVarVec2(${1:idx}, ${2:val})",
    "prefix":"imgui.PushStyleVar",
    "description":"[C++] void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)\n\n"
  },
  "imgui.igGetIDStr":{
    "scope":"lua",
    "body":"imgui.GetIDStr(${1:str_id})",
    "prefix":"imgui.GetID",
    "description":"[C++] ImGuiID ImGui::GetID(const char* str_id)\n\n"
  },
  "imgui.igIsWindowCollapsed":{
    "scope":"lua",
    "body":"imgui.IsWindowCollapsed()",
    "prefix":"imgui.IsWindowCollapsed",
    "description":"[C++] bool ImGui::IsWindowCollapsed()\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImFontAtlasCustomRect:resize",
    "description":"[C++] void ImVector_ImFontAtlasCustomRect::resize(ImVector_ImFontAtlasCustomRect* self, int new_size, const ImFontAtlasCustomRect v)\n\n"
  },
  "imgui.igTreeNodeExVPtr":{
    "scope":"lua",
    "body":"imgui.TreeNodeExVPtr(${1:ptr_id}, ${2:flags}, ${3:fmt}, ${4:args})",
    "prefix":"imgui.TreeNodeExV",
    "description":"[C++] bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)\n\n"
  },
  "imgui.ImGuiWindowFlags_AlwaysVerticalScrollbar":{
    "scope":"lua",
    "body":"imgui.WindowFlags.AlwaysVerticalScrollbar",
    "prefix":"imgui.WindowFlags.AlwaysVerticalScrollbar",
    "description":"[C++] ImGuiWindowFlags_AlwaysVerticalScrollbar = 1 << 14\n\n"
  },
  "imgui.ImVector_ImFontConfig_begin":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:begin()",
    "prefix":"ImVector_ImFontConfig:begin",
    "description":"[C++] ImFontConfig* ImVector_ImFontConfig::begin(ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImVector_ImU32_end":{
    "scope":"lua",
    "body":"ImVector_ImU32:_end()",
    "prefix":"ImVector_ImU32:end",
    "description":"[C++] ImU32* ImVector_ImU32::end(ImVector_ImU32* self)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:pop_back()",
    "prefix":"ImVector_ImGuiStoragePair:pop_back",
    "description":"[C++] void ImVector_ImGuiStoragePair::pop_back(ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_begin":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:begin()",
    "prefix":"ImVector_ImFontGlyph:begin",
    "description":"[C++] ImFontGlyph* ImVector_ImFontGlyph::begin(ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImVector_float_push_front":{
    "scope":"lua",
    "body":"ImVector_float:push_front(${1:v})",
    "prefix":"ImVector_float:push_front",
    "description":"[C++] void ImVector_float::push_front(ImVector_float* self, const float v)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:begin_const()",
    "prefix":"ImVector_ImDrawChannel:begin",
    "description":"[C++] ImDrawChannel const * ImVector_ImDrawChannel::begin(const ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.igSetScrollHereY":{
    "scope":"lua",
    "body":"imgui.SetScrollHereY(${1:[center_y_ratio=0.5f]})",
    "prefix":"imgui.SetScrollHereY",
    "description":"[C++] void ImGui::SetScrollHereY(float center_y_ratio=0.5f)\n\n"
  },
  "imgui.ImColor_SetHSV":{
    "scope":"lua",
    "body":"ImColor:SetHSV(${1:h}, ${2:s}, ${3:v}${4:[, a=1.0f]})",
    "prefix":"ImColor:SetHSV",
    "description":"[C++] void ImColor::SetHSV(float h, float s, float v, float a=1.0f)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_resize":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:resize(${1:new_size})",
    "prefix":"ImVector_ImDrawCmd:resize",
    "description":"[C++] void ImVector_ImDrawCmd::resize(ImVector_ImDrawCmd* self, int new_size)\n\n"
  },
  "imgui.igGetIDRange":{
    "scope":"lua",
    "body":"imgui.GetIDRange(${1:str_id_begin}, ${2:str_id_end})",
    "prefix":"imgui.GetID",
    "description":"[C++] ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)\n\n"
  },
  "imgui.ImDrawList._OwnerName":{
    "scope":"lua",
    "body":"ImDrawList._OwnerName",
    "prefix":"ImDrawList._OwnerName",
    "description":"[C++] const char* ImDrawList::_OwnerName\n\n"
  },
  "imgui.ImVector_ImFontPtr_insert":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImFontPtr:insert",
    "description":"[C++] ImFont** ImVector_ImFontPtr::insert(ImVector_ImFontPtr* self, ImFont* const * it, ImFont* const  v)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImDrawCmd:erase",
    "description":"[C++] ImDrawCmd* ImVector_ImDrawCmd::erase(ImVector_ImDrawCmd* self, ImDrawCmd const * it, ImDrawCmd const * it_last)\n\n"
  },
  "imgui.igEndChild":{
    "scope":"lua",
    "body":"imgui.EndChild()",
    "prefix":"imgui.EndChild",
    "description":"[C++] void ImGui::EndChild()\n\n"
  },
  "imgui.ImVector_float_end_const":{
    "scope":"lua",
    "body":"ImVector_float:end_const()",
    "prefix":"ImVector_float:end",
    "description":"[C++] float const * ImVector_float::end(const ImVector_float* self)\n\n"
  },
  "imgui.igGetIO":{
    "scope":"lua",
    "body":"imgui.GetIO()",
    "prefix":"imgui.GetIO",
    "description":"[C++] ImGuiIO* ImGui::GetIO()\n\n"
  },
  "imgui.ImVector_ImTextureID_push_back":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:push_back(${1:v})",
    "prefix":"ImVector_ImTextureID:push_back",
    "description":"[C++] void ImVector_ImTextureID::push_back(ImVector_ImTextureID* self, const ImTextureID v)\n\n"
  },
  "imgui.ImVector_ImWchar__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImWchar:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImWchar:_grow_capacity",
    "description":"[C++] int ImVector_ImWchar::_grow_capacity(const ImVector_ImWchar* self, int sz)\n\n"
  },
  "imgui.ImVector_ImFontPtr_erase":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:erase(${1:it})",
    "prefix":"ImVector_ImFontPtr:erase",
    "description":"[C++] ImFont** ImVector_ImFontPtr::erase(ImVector_ImFontPtr* self, ImFont* const * it)\n\n"
  },
  "imgui.ImVector_ImFontConfig_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:pop_back()",
    "prefix":"ImVector_ImFontConfig:pop_back",
    "description":"[C++] void ImVector_ImFontConfig::pop_back(ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImGuiIO.MouseDownDuration[5]":{
    "scope":"lua",
    "body":"ImGuiIO.MouseDownDuration[5]",
    "prefix":"ImGuiIO.MouseDownDuration[5]",
    "description":"[C++] float ImGuiIO::MouseDownDuration[5]\n\n"
  },
  "imgui.ImVector_ImU32_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImU32:pop_back()",
    "prefix":"ImVector_ImU32:pop_back",
    "description":"[C++] void ImVector_ImU32::pop_back(ImVector_ImU32* self)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:size_in_bytes()",
    "prefix":"ImVector_ImGuiTextRange:size_in_bytes",
    "description":"[C++] int ImVector_ImGuiTextRange::size_in_bytes(const ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImVector_char_back_const":{
    "scope":"lua",
    "body":"ImVector_char:back_const()",
    "prefix":"ImVector_char:back",
    "description":"[C++] char const * ImVector_char::back(const ImVector_char* self)\n\n"
  },
  "imgui.igPushIDPtr":{
    "scope":"lua",
    "body":"imgui.PushIDPtr(${1:ptr_id})",
    "prefix":"imgui.PushID",
    "description":"[C++] void ImGui::PushID(const void* ptr_id)\n\n"
  },
  "imgui.ImVector_begin_const":{
    "scope":"lua",
    "body":"ImVector:begin_const()",
    "prefix":"ImVector:begin",
    "description":"[C++] const T* ImVector::begin()\n\n"
  },
  "imgui.igLogFinish":{
    "scope":"lua",
    "body":"imgui.LogFinish()",
    "prefix":"imgui.LogFinish",
    "description":"[C++] void ImGui::LogFinish()\n\n"
  },
  "imgui.ImVector_ImFontPtr_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImFontPtr:resize",
    "description":"[C++] void ImVector_ImFontPtr::resize(ImVector_ImFontPtr* self, int new_size, ImFont* const  v)\n\n"
  },
  "imgui.ImGuiColorEditFlags_DisplayHSV":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.DisplayHSV",
    "prefix":"imgui.ColorEditFlags.DisplayHSV",
    "description":"[C++] ImGuiColorEditFlags_DisplayHSV = 1 << 21\n\n"
  },
  "imgui.igGetFrameCount":{
    "scope":"lua",
    "body":"imgui.GetFrameCount()",
    "prefix":"imgui.GetFrameCount",
    "description":"[C++] int ImGui::GetFrameCount()\n\n"
  },
  "imgui.igInputInt":{
    "scope":"lua",
    "body":"imgui.InputInt(${1:label}, ${2:v}${3:[, step=1]}${4:[, step_fast=100]}${5:[, flags=0]})",
    "prefix":"imgui.InputInt",
    "description":"[C++] bool ImGui::InputInt(const char* label, int* v, int step=1, int step_fast=100, ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.igSameLine":{
    "scope":"lua",
    "body":"imgui.SameLine(${1:[offset_from_start_x=0.0f]}${2:[, spacing=-1.0f]})",
    "prefix":"imgui.SameLine",
    "description":"[C++] void ImGui::SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f)\n\n"
  },
  "imgui.igSetCursorPosX":{
    "scope":"lua",
    "body":"imgui.SetCursorPosX(${1:local_x})",
    "prefix":"imgui.SetCursorPosX",
    "description":"[C++] void ImGui::SetCursorPosX(float local_x)\n\n"
  },
  "imgui.ImGuiIO.ConfigFlags":{
    "scope":"lua",
    "body":"ImGuiIO.ConfigFlags",
    "prefix":"ImGuiIO.ConfigFlags",
    "description":"[C++] ImGuiConfigFlags ImGuiIO::ConfigFlags\n\n"
  },
  "imgui.ImVector_ImDrawCmd_end_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:end_const()",
    "prefix":"ImVector_ImDrawCmd:end",
    "description":"[C++] ImDrawCmd const * ImVector_ImDrawCmd::end(const ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImGuiPayload.SourceParentId":{
    "scope":"lua",
    "body":"ImGuiPayload.SourceParentId",
    "prefix":"ImGuiPayload.SourceParentId",
    "description":"[C++] ImGuiID ImGuiPayload::SourceParentId\n\n"
  },
  "imgui.ImGuiListClipper.ItemsCount":{
    "scope":"lua",
    "body":"ImGuiListClipper.ItemsCount",
    "prefix":"ImGuiListClipper.ItemsCount",
    "description":"[C++] int ImGuiListClipper::ItemsCount\n\n"
  },
  "imgui.ImGuiCol_ScrollbarGrabActive":{
    "scope":"lua",
    "body":"imgui.Col.ScrollbarGrabActive",
    "prefix":"imgui.Col.ScrollbarGrabActive",
    "description":"[C++] ImGuiCol_ScrollbarGrabActive = 17\n\n"
  },
  "imgui.ImVector_ImTextureID_empty":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:empty()",
    "prefix":"ImVector_ImTextureID:empty",
    "description":"[C++] bool ImVector_ImTextureID::empty(const ImVector_ImTextureID* self)\n\n"
  },
  "imgui.ImVector_ImVec2_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImVec2:begin_const()",
    "prefix":"ImVector_ImVec2:begin",
    "description":"[C++] ImVec2 const * ImVector_ImVec2::begin(const ImVector_ImVec2* self)\n\n"
  },
  "imgui.ImGuiStyle.ItemSpacing":{
    "scope":"lua",
    "body":"ImGuiStyle.ItemSpacing",
    "prefix":"ImGuiStyle.ItemSpacing",
    "description":"[C++] ImVec2 ImGuiStyle::ItemSpacing\n\n"
  },
  "imgui.ImGuiCond_Appearing":{
    "scope":"lua",
    "body":"imgui.Cond.Appearing",
    "prefix":"imgui.Cond.Appearing",
    "description":"[C++] ImGuiCond_Appearing = 1 << 3\n\n"
  },
  "imgui.igSetCursorPosY":{
    "scope":"lua",
    "body":"imgui.SetCursorPosY(${1:local_y})",
    "prefix":"imgui.SetCursorPosY",
    "description":"[C++] void ImGui::SetCursorPosY(float local_y)\n\n"
  },
  "imgui.igEndTabItem":{
    "scope":"lua",
    "body":"imgui.EndTabItem()",
    "prefix":"imgui.EndTabItem",
    "description":"[C++] void ImGui::EndTabItem()\n\n"
  },
  "imgui.ImVector_ImFontGlyph_back_const":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:back_const()",
    "prefix":"ImVector_ImFontGlyph:back",
    "description":"[C++] ImFontGlyph const * ImVector_ImFontGlyph::back(const ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImVector_ImU32_end_const":{
    "scope":"lua",
    "body":"ImVector_ImU32:end_const()",
    "prefix":"ImVector_ImU32:end",
    "description":"[C++] ImU32 const * ImVector_ImU32::end(const ImVector_ImU32* self)\n\n"
  },
  "imgui.ImDrawList_AddBezierCurve":{
    "scope":"lua",
    "body":"ImDrawList:AddBezierCurve(${1:pos0}, ${2:cp0}, ${3:cp1}, ${4:pos1}, ${5:col}, ${6:thickness}${7:[, num_segments=0]})",
    "prefix":"ImDrawList:AddBezierCurve",
    "description":"[C++] void ImDrawList::AddBezierCurve(const ImVec2& pos0, const ImVec2& cp0, const ImVec2& cp1, const ImVec2& pos1, ImU32 col, float thickness, int num_segments=0)\n\n"
  },
  "imgui.ImDrawList_PrimRectUV":{
    "scope":"lua",
    "body":"ImDrawList:PrimRectUV(${1:a}, ${2:b}, ${3:uv_a}, ${4:uv_b}, ${5:col})",
    "prefix":"ImDrawList:PrimRectUV",
    "description":"[C++] void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col)\n\n"
  },
  "imgui.ImGuiIO.DisplayFramebufferScale":{
    "scope":"lua",
    "body":"ImGuiIO.DisplayFramebufferScale",
    "prefix":"ImGuiIO.DisplayFramebufferScale",
    "description":"[C++] ImVec2 ImGuiIO::DisplayFramebufferScale\n\n"
  },
  "imgui.igAcceptDragDropPayload":{
    "scope":"lua",
    "body":"imgui.AcceptDragDropPayload(${1:type}${2:[, flags=0]})",
    "prefix":"imgui.AcceptDragDropPayload",
    "description":"[C++] const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImFontGlyph:resize",
    "description":"[C++] void ImVector_ImFontGlyph::resize(ImVector_ImFontGlyph* self, int new_size, const ImFontGlyph v)\n\n"
  },
  "imgui.igDragIntRange2":{
    "scope":"lua",
    "body":"imgui.DragIntRange2(${1:label}, ${2:v_current_min}, ${3:v_current_max}${4:[, v_speed=1.0f]}${5:[, v_min=0]}${6:[, v_max=0]}${7:[, format=\"%d\"]}${8:[, format_max=((void*)0)]})",
    "prefix":"imgui.DragIntRange2",
    "description":"[C++] bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed=1.0f, int v_min=0, int v_max=0, const char* format=\"%d\", const char* format_max=((void*)0))\n\n"
  },
  "imgui.igArrowButton":{
    "scope":"lua",
    "body":"imgui.ArrowButton(${1:str_id}, ${2:dir})",
    "prefix":"imgui.ArrowButton",
    "description":"[C++] bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)\n\n"
  },
  "imgui.InvalidateFontsTexture":{
    "scope":"lua",
    "body":"imgui.InvalidateFontsTexture()",
    "prefix":"imgui.InvalidateFontsTexture",
    "description":"[mimgui function]\n\n"
  },
  "imgui.igAlignTextToFramePadding":{
    "scope":"lua",
    "body":"imgui.AlignTextToFramePadding()",
    "prefix":"imgui.AlignTextToFramePadding",
    "description":"[C++] void ImGui::AlignTextToFramePadding()\n\n"
  },
  "imgui.ImGuiColorEditFlags__DataTypeMask":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags._DataTypeMask",
    "prefix":"imgui.ColorEditFlags._DataTypeMask",
    "description":"[C++] ImGuiColorEditFlags__DataTypeMask = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_Float\n\n"
  },
  "imgui.ImVector_ImWchar_empty":{
    "scope":"lua",
    "body":"ImVector_ImWchar:empty()",
    "prefix":"ImVector_ImWchar:empty",
    "description":"[C++] bool ImVector_ImWchar::empty(const ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_reserve":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImDrawCmd:reserve",
    "description":"[C++] void ImVector_ImDrawCmd::reserve(ImVector_ImDrawCmd* self, int new_capacity)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_end":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:_end()",
    "prefix":"ImVector_ImDrawChannel:end",
    "description":"[C++] ImDrawChannel* ImVector_ImDrawChannel::end(ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImDrawList_PopClipRect":{
    "scope":"lua",
    "body":"ImDrawList:PopClipRect()",
    "prefix":"ImDrawList:PopClipRect",
    "description":"[C++] void ImDrawList::PopClipRect()\n\n"
  },
  "imgui.igSetColumnWidth":{
    "scope":"lua",
    "body":"imgui.SetColumnWidth(${1:column_index}, ${2:width})",
    "prefix":"imgui.SetColumnWidth",
    "description":"[C++] void ImGui::SetColumnWidth(int column_index, float width)\n\n"
  },
  "imgui.ImGuiColorEditFlags_AlphaPreview":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.AlphaPreview",
    "prefix":"imgui.ColorEditFlags.AlphaPreview",
    "description":"[C++] ImGuiColorEditFlags_AlphaPreview = 1 << 17\n\n"
  },
  "imgui.ImGuiIO.KeyRepeatRate":{
    "scope":"lua",
    "body":"ImGuiIO.KeyRepeatRate",
    "prefix":"ImGuiIO.KeyRepeatRate",
    "description":"[C++] float ImGuiIO::KeyRepeatRate\n\n"
  },
  "imgui.igPopItemWidth":{
    "scope":"lua",
    "body":"imgui.PopItemWidth()",
    "prefix":"imgui.PopItemWidth",
    "description":"[C++] void ImGui::PopItemWidth()\n\n"
  },
  "imgui.ImVector_ImVec2_begin":{
    "scope":"lua",
    "body":"ImVector_ImVec2:begin()",
    "prefix":"ImVector_ImVec2:begin",
    "description":"[C++] ImVec2* ImVector_ImVec2::begin(ImVector_ImVec2* self)\n\n"
  },
  "imgui.igGetTreeNodeToLabelSpacing":{
    "scope":"lua",
    "body":"imgui.GetTreeNodeToLabelSpacing()",
    "prefix":"imgui.GetTreeNodeToLabelSpacing",
    "description":"[C++] float ImGui::GetTreeNodeToLabelSpacing()\n\n"
  },
  "imgui.ImGuiColorEditFlags_AlphaBar":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.AlphaBar",
    "prefix":"imgui.ColorEditFlags.AlphaBar",
    "description":"[C++] ImGuiColorEditFlags_AlphaBar = 1 << 16\n\n"
  },
  "imgui.igPushItemWidth":{
    "scope":"lua",
    "body":"imgui.PushItemWidth(${1:item_width})",
    "prefix":"imgui.PushItemWidth",
    "description":"[C++] void ImGui::PushItemWidth(float item_width)\n\n"
  },
  "imgui.ImVector_ImDrawVert_size":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:size()",
    "prefix":"ImVector_ImDrawVert:size",
    "description":"[C++] int ImVector_ImDrawVert::size(const ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.igLabelTextV":{
    "scope":"lua",
    "body":"imgui.LabelTextV(${1:label}, ${2:fmt}, ${3:args})",
    "prefix":"imgui.LabelTextV",
    "description":"[C++] void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)\n\n"
  },
  "imgui.ImVector_float_size":{
    "scope":"lua",
    "body":"ImVector_float:size()",
    "prefix":"ImVector_float:size",
    "description":"[C++] int ImVector_float::size(const ImVector_float* self)\n\n"
  },
  "imgui.igGetForegroundDrawList":{
    "scope":"lua",
    "body":"imgui.GetForegroundDrawList()",
    "prefix":"imgui.GetForegroundDrawList",
    "description":"[C++] ImDrawList* ImGui::GetForegroundDrawList()\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_size":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:size()",
    "prefix":"ImVector_ImFontAtlasCustomRect:size",
    "description":"[C++] int ImVector_ImFontAtlasCustomRect::size(const ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImVector_ImDrawVert_end_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:end_const()",
    "prefix":"ImVector_ImDrawVert:end",
    "description":"[C++] ImDrawVert const * ImVector_ImDrawVert::end(const ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.igEndMenuBar":{
    "scope":"lua",
    "body":"imgui.EndMenuBar()",
    "prefix":"imgui.EndMenuBar",
    "description":"[C++] void ImGui::EndMenuBar()\n\n"
  },
  "imgui.ImVector_ImFontPtr_ImVector_ImFontPtrVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImFontPtr.ImVector_ImFontPtrVector(${1:src})",
    "prefix":"imgui.ImVector_ImFontPtr.ImVector_ImFontPtr",
    "description":"[C++] ImVector_ImFontPtr(const ImVector_ImFontPtr src)\n\n"
  },
  "imgui.ImGuiStyleVar_GrabMinSize":{
    "scope":"lua",
    "body":"imgui.StyleVar.GrabMinSize",
    "prefix":"imgui.StyleVar.GrabMinSize",
    "description":"[C++] ImGuiStyleVar_GrabMinSize = 18\n\n"
  },
  "imgui.igInputTextMultiline":{
    "scope":"lua",
    "body":"imgui.InputTextMultiline(${1:label}, ${2:buf}, ${3:buf_size}${4:[, size=ImVec2(0,0)]}${5:[, flags=0]}${6:[, callback=((void*)0)]}${7:[, user_data=((void*)0)]})",
    "prefix":"imgui.InputTextMultiline",
    "description":"[C++] bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size=ImVec2(0, 0), ImGuiInputTextFlags flags=0, ImGuiInputTextCallback callback=((void*)0), void* user_data=((void*)0))\n\n"
  },
  "imgui.ImDrawVert.pos":{
    "scope":"lua",
    "body":"ImDrawVert.pos",
    "prefix":"ImDrawVert.pos",
    "description":"[C++] ImVec2 ImDrawVert::pos\n\n"
  },
  "imgui.ImDrawData_DeIndexAllBuffers":{
    "scope":"lua",
    "body":"ImDrawData:DeIndexAllBuffers()",
    "prefix":"ImDrawData:DeIndexAllBuffers",
    "description":"[C++] void ImDrawData::DeIndexAllBuffers()\n\n"
  },
  "imgui.ImGuiStyle.ScrollbarRounding":{
    "scope":"lua",
    "body":"ImGuiStyle.ScrollbarRounding",
    "prefix":"ImGuiStyle.ScrollbarRounding",
    "description":"[C++] float ImGuiStyle::ScrollbarRounding\n\n"
  },
  "imgui.ImDrawList_PathRect":{
    "scope":"lua",
    "body":"ImDrawList:PathRect(${1:rect_min}, ${2:rect_max}${3:[, rounding=0.0f]}${4:[, rounding_corners=ImDrawCornerFlags_All]})",
    "prefix":"ImDrawList:PathRect",
    "description":"[C++] void ImDrawList::PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding=0.0f, ImDrawCornerFlags rounding_corners=ImDrawCornerFlags_All)\n\n"
  },
  "imgui.ImDrawList_AddImageQuad":{
    "scope":"lua",
    "body":"ImDrawList:AddImageQuad(${1:user_texture_id}, ${2:a}, ${3:b}, ${4:c}, ${5:d}${6:[, uv_a=ImVec2(0,0)]}${7:[, uv_b=ImVec2(1,0)]}${8:[, uv_c=ImVec2(1,1)]}${9:[, uv_d=ImVec2(0,1)]}${10:[, col=(((ImU32)(255)<<24)|((ImU32)(255)<<16)|((ImU32)(255)<<8)|((ImU32)(255)<<0))]})",
    "prefix":"ImDrawList:AddImageQuad",
    "description":"[C++] void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a=ImVec2(0, 0), const ImVec2& uv_b=ImVec2(1, 0), const ImVec2& uv_c=ImVec2(1, 1), const ImVec2& uv_d=ImVec2(0, 1), ImU32 col=(((ImU32)(255)<<24)|((ImU32)(255)<<16)|((ImU32)(255)<<8)|((ImU32)(255)<<0)))\n\n"
  },
  "imgui.ImWchar":{
    "scope":"lua",
    "body":"new.ImWchar($1)",
    "prefix":"new.ImWchar",
    "description":"typedef unsigned short ImWchar\n\n"
  },
  "imgui.ImGuiInputTextFlags":{
    "scope":"lua",
    "body":"new.ImGuiInputTextFlags($1)",
    "prefix":"new.ImGuiInputTextFlags",
    "description":"typedef int ImGuiInputTextFlags\n\n"
  },
  "imgui.igTextUnformatted":{
    "scope":"lua",
    "body":"imgui.TextUnformatted(${1:text}${2:[, text_end=((void*)0)]})",
    "prefix":"imgui.TextUnformatted",
    "description":"[C++] void ImGui::TextUnformatted(const char* text, const char* text_end=((void*)0))\n\n"
  },
  "imgui.igEndChildFrame":{
    "scope":"lua",
    "body":"imgui.EndChildFrame()",
    "prefix":"imgui.EndChildFrame",
    "description":"[C++] void ImGui::EndChildFrame()\n\n"
  },
  "imgui.ImVector_float_insert":{
    "scope":"lua",
    "body":"ImVector_float:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_float:insert",
    "description":"[C++] float* ImVector_float::insert(ImVector_float* self, float const * it, const float v)\n\n"
  },
  "imgui.ImDrawList_PathArcTo":{
    "scope":"lua",
    "body":"ImDrawList:PathArcTo(${1:centre}, ${2:radius}, ${3:a_min}, ${4:a_max}${5:[, num_segments=10]})",
    "prefix":"ImDrawList:PathArcTo",
    "description":"[C++] void ImDrawList::PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments=10)\n\n"
  },
  "imgui.ImVector_ImFontConfig_front_const":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:front_const()",
    "prefix":"ImVector_ImFontConfig:front",
    "description":"[C++] ImFontConfig const * ImVector_ImFontConfig::front(const ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImGuiWindowFlags_NoFocusOnAppearing":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoFocusOnAppearing",
    "prefix":"imgui.WindowFlags.NoFocusOnAppearing",
    "description":"[C++] ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_swap":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:swap(${1:rhs})",
    "prefix":"ImVector_ImFontAtlasCustomRect:swap",
    "description":"[C++] void ImVector_ImFontAtlasCustomRect::swap(ImVector_ImFontAtlasCustomRect* self, ImVector_ImFontAtlasCustomRect rhs)\n\n"
  },
  "imgui.ImFontAtlas_GetMouseCursorTexData":{
    "scope":"lua",
    "body":"ImFontAtlas:GetMouseCursorTexData(${1:cursor}, ${2:out_offset}, ${3:out_size}, ${4:out_uv_border}, ${5:out_uv_fill})",
    "prefix":"ImFontAtlas:GetMouseCursorTexData",
    "description":"[C++] bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])\n\n"
  },
  "imgui.igGetFrameHeight":{
    "scope":"lua",
    "body":"imgui.GetFrameHeight()",
    "prefix":"imgui.GetFrameHeight",
    "description":"[C++] float ImGui::GetFrameHeight()\n\n"
  },
  "imgui.ImVector_ImFontPtr_push_front":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:push_front(${1:v})",
    "prefix":"ImVector_ImFontPtr:push_front",
    "description":"[C++] void ImVector_ImFontPtr::push_front(ImVector_ImFontPtr* self, ImFont* const  v)\n\n"
  },
  "imgui.ImVector_ImFontPtr_clear":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:clear()",
    "prefix":"ImVector_ImFontPtr:clear",
    "description":"[C++] void ImVector_ImFontPtr::clear(ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImVector_back_const":{
    "scope":"lua",
    "body":"ImVector:back_const()",
    "prefix":"ImVector:back",
    "description":"[C++] const T* ImVector::back()\n\n"
  },
  "imgui.igCaptureKeyboardFromApp":{
    "scope":"lua",
    "body":"imgui.CaptureKeyboardFromApp(${1:[want_capture_keyboard_value=true]})",
    "prefix":"imgui.CaptureKeyboardFromApp",
    "description":"[C++] void ImGui::CaptureKeyboardFromApp(bool want_capture_keyboard_value=true)\n\n"
  },
  "imgui.ImVec2_ImVec2":{
    "scope":"lua",
    "body":"imgui.ImVec2()",
    "prefix":"imgui.ImVec2",
    "description":"[C++] ImVec2()\n\n"
  },
  "imgui.ImDrawList_AddPolyline":{
    "scope":"lua",
    "body":"ImDrawList:AddPolyline(${1:points}, ${2:num_points}, ${3:col}, ${4:closed}, ${5:thickness})",
    "prefix":"ImDrawList:AddPolyline",
    "description":"[C++] void ImDrawList::AddPolyline(const ImVec2* points, int num_points, ImU32 col, bool closed, float thickness)\n\n"
  },
  "imgui.igSetScrollFromPosX":{
    "scope":"lua",
    "body":"imgui.SetScrollFromPosX(${1:local_x}${2:[, center_x_ratio=0.5f]})",
    "prefix":"imgui.SetScrollFromPosX",
    "description":"[C++] void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio=0.5f)\n\n"
  },
  "imgui.ImGuiPayload_IsDataType":{
    "scope":"lua",
    "body":"ImGuiPayload:IsDataType(${1:type})",
    "prefix":"ImGuiPayload:IsDataType",
    "description":"[C++] bool ImGuiPayload::IsDataType(const char* type)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_swap":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:swap(${1:rhs})",
    "prefix":"ImVector_ImDrawCmd:swap",
    "description":"[C++] void ImVector_ImDrawCmd::swap(ImVector_ImDrawCmd* self, ImVector_ImDrawCmd rhs)\n\n"
  },
  "imgui.ImGuiWindowFlags_NoBackground":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoBackground",
    "prefix":"imgui.WindowFlags.NoBackground",
    "description":"[C++] ImGuiWindowFlags_NoBackground = 1 << 7\n\n"
  },
  "imgui.ImVector_ImVec4_ImVector_ImVec4":{
    "scope":"lua",
    "body":"imgui.ImVector_ImVec4()",
    "prefix":"imgui.ImVector_ImVec4",
    "description":"[C++] ImVector_ImVec4()\n\n"
  },
  "imgui.igSeparator":{
    "scope":"lua",
    "body":"imgui.Separator()",
    "prefix":"imgui.Separator",
    "description":"[C++] void ImGui::Separator()\n\n"
  },
  "imgui.igGetContentRegionAvail":{
    "scope":"lua",
    "body":"imgui.GetContentRegionAvail()",
    "prefix":"imgui.GetContentRegionAvail",
    "description":"[C++] ImVec2 ImGui::GetContentRegionAvail()\n\n"
  },
  "imgui.ImFontAtlas_ClearTexData":{
    "scope":"lua",
    "body":"ImFontAtlas:ClearTexData()",
    "prefix":"ImFontAtlas:ClearTexData",
    "description":"[C++] void ImFontAtlas::ClearTexData()\n\n"
  },
  "imgui.ImVector_ImTextureID_swap":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:swap(${1:rhs})",
    "prefix":"ImVector_ImTextureID:swap",
    "description":"[C++] void ImVector_ImTextureID::swap(ImVector_ImTextureID* self, ImVector_ImTextureID rhs)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_begin":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:begin()",
    "prefix":"ImVector_ImDrawIdx:begin",
    "description":"[C++] ImDrawIdx* ImVector_ImDrawIdx::begin(ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImVector_ImU32_erase":{
    "scope":"lua",
    "body":"ImVector_ImU32:erase(${1:it})",
    "prefix":"ImVector_ImU32:erase",
    "description":"[C++] ImU32* ImVector_ImU32::erase(ImVector_ImU32* self, ImU32 const * it)\n\n"
  },
  "imgui.ImVector_ImVec2_clear":{
    "scope":"lua",
    "body":"ImVector_ImVec2:clear()",
    "prefix":"ImVector_ImVec2:clear",
    "description":"[C++] void ImVector_ImVec2::clear(ImVector_ImVec2* self)\n\n"
  },
  "imgui.igBeginPopupContextWindow":{
    "scope":"lua",
    "body":"imgui.BeginPopupContextWindow(${1:[str_id=((void*)0)]}${2:[, mouse_button=1]}${3:[, also_over_items=true]})",
    "prefix":"imgui.BeginPopupContextWindow",
    "description":"[C++] bool ImGui::BeginPopupContextWindow(const char* str_id=((void*)0), int mouse_button=1, bool also_over_items=true)\n\n"
  },
  "imgui.ImVector_ImVec2_resize":{
    "scope":"lua",
    "body":"ImVector_ImVec2:resize(${1:new_size})",
    "prefix":"ImVector_ImVec2:resize",
    "description":"[C++] void ImVector_ImVec2::resize(ImVector_ImVec2* self, int new_size)\n\n"
  },
  "imgui.ImVector_ImTextureID_begin":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:begin()",
    "prefix":"ImVector_ImTextureID:begin",
    "description":"[C++] ImTextureID* ImVector_ImTextureID::begin(ImVector_ImTextureID* self)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_resize":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:resize(${1:new_size})",
    "prefix":"ImVector_ImFontGlyph:resize",
    "description":"[C++] void ImVector_ImFontGlyph::resize(ImVector_ImFontGlyph* self, int new_size)\n\n"
  },
  "imgui.ImGuiMouseCursor_Arrow":{
    "scope":"lua",
    "body":"imgui.MouseCursor.Arrow",
    "prefix":"imgui.MouseCursor.Arrow",
    "description":"[C++] ImGuiMouseCursor_Arrow = 0\n\n"
  },
  "imgui.ImDrawList_Clear":{
    "scope":"lua",
    "body":"ImDrawList:Clear()",
    "prefix":"ImDrawList:Clear",
    "description":"[C++] void ImDrawList::Clear()\n\n"
  },
  "imgui.ImVector_ImWchar_resize":{
    "scope":"lua",
    "body":"ImVector_ImWchar:resize(${1:new_size})",
    "prefix":"ImVector_ImWchar:resize",
    "description":"[C++] void ImVector_ImWchar::resize(ImVector_ImWchar* self, int new_size)\n\n"
  },
  "imgui.igBeginCombo":{
    "scope":"lua",
    "body":"imgui.BeginCombo(${1:label}, ${2:preview_value}${3:[, flags=0]})",
    "prefix":"imgui.BeginCombo",
    "description":"[C++] bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags=0)\n\n"
  },
  "imgui.ImGuiIO.KeyRepeatDelay":{
    "scope":"lua",
    "body":"ImGuiIO.KeyRepeatDelay",
    "prefix":"ImGuiIO.KeyRepeatDelay",
    "description":"[C++] float ImGuiIO::KeyRepeatDelay\n\n"
  },
  "imgui.igGetMouseDragDelta":{
    "scope":"lua",
    "body":"imgui.GetMouseDragDelta(${1:[button=0]}${2:[, lock_threshold=-1.0f]})",
    "prefix":"imgui.GetMouseDragDelta",
    "description":"[C++] ImVec2 ImGui::GetMouseDragDelta(int button=0, float lock_threshold=-1.0f)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_empty":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:empty()",
    "prefix":"ImVector_ImDrawIdx:empty",
    "description":"[C++] bool ImVector_ImDrawIdx::empty(const ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.igGetFrameHeightWithSpacing":{
    "scope":"lua",
    "body":"imgui.GetFrameHeightWithSpacing()",
    "prefix":"imgui.GetFrameHeightWithSpacing",
    "description":"[C++] float ImGui::GetFrameHeightWithSpacing()\n\n"
  },
  "imgui.igIsItemActive":{
    "scope":"lua",
    "body":"imgui.IsItemActive()",
    "prefix":"imgui.IsItemActive",
    "description":"[C++] bool ImGui::IsItemActive()\n\n"
  },
  "imgui.ImGuiTextBuffer_appendf":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:appendf(${1:fmt},...)",
    "prefix":"ImGuiTextBuffer:appendf",
    "description":"[C++] void ImGuiTextBuffer::appendf(const char* fmt, ...)\n\n"
  },
  "imgui.igButton":{
    "scope":"lua",
    "body":"imgui.Button(${1:label}${2:[, size=ImVec2(0,0)]})",
    "prefix":"imgui.Button",
    "description":"[C++] bool ImGui::Button(const char* label, const ImVec2& size=ImVec2(0, 0))\n\n"
  },
  "imgui.igBeginMenu":{
    "scope":"lua",
    "body":"imgui.BeginMenu(${1:label}${2:[, enabled=true]})",
    "prefix":"imgui.BeginMenu",
    "description":"[C++] bool ImGui::BeginMenu(const char* label, bool enabled=true)\n\n"
  },
  "imgui.igDestroyContext":{
    "scope":"lua",
    "body":"imgui.DestroyContext(${1:[ctx=((void*)0)]})",
    "prefix":"imgui.DestroyContext",
    "description":"[C++] void ImGui::DestroyContext(ImGuiContext* ctx=((void*)0))\n\n"
  },
  "imgui.igLogButtons":{
    "scope":"lua",
    "body":"imgui.LogButtons()",
    "prefix":"imgui.LogButtons",
    "description":"[C++] void ImGui::LogButtons()\n\n"
  },
  "imgui.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon":{
    "scope":"lua",
    "body":"ImFontAtlas:GetGlyphRangesChineseSimplifiedCommon()",
    "prefix":"ImFontAtlas:GetGlyphRangesChineseSimplifiedCommon",
    "description":"[C++] const ImWchar* ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()\n\n"
  },
  "imgui.igGetColorU32U32":{
    "scope":"lua",
    "body":"imgui.GetColorU32U32(${1:col})",
    "prefix":"imgui.GetColorU32",
    "description":"[C++] ImU32 ImGui::GetColorU32(ImU32 col)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImDrawChannel:resize",
    "description":"[C++] void ImVector_ImDrawChannel::resize(ImVector_ImDrawChannel* self, int new_size, const ImDrawChannel v)\n\n"
  },
  "imgui.ImDrawList_AddCircle":{
    "scope":"lua",
    "body":"ImDrawList:AddCircle(${1:centre}, ${2:radius}, ${3:col}${4:[, num_segments=12]}${5:[, thickness=1.0f]})",
    "prefix":"ImDrawList:AddCircle",
    "description":"[C++] void ImDrawList::AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments=12, float thickness=1.0f)\n\n"
  },
  "imgui.ImVector_ImTextureID_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:size_in_bytes()",
    "prefix":"ImVector_ImTextureID:size_in_bytes",
    "description":"[C++] int ImVector_ImTextureID::size_in_bytes(const ImVector_ImTextureID* self)\n\n"
  },
  "imgui.ImU8":{
    "scope":"lua",
    "body":"new.ImU8($1)",
    "prefix":"new.ImU8",
    "description":"typedef unsigned char ImU8\n\n"
  },
  "imgui.ImVector_capacity":{
    "scope":"lua",
    "body":"ImVector:capacity()",
    "prefix":"ImVector:capacity",
    "description":"[C++] int ImVector::capacity()\n\n"
  },
  "imgui.ImVector_ImVec4_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImVec4:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImVec4:resize",
    "description":"[C++] void ImVector_ImVec4::resize(ImVector_ImVec4* self, int new_size, const ImVec4 v)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_push_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:push_back(${1:v})",
    "prefix":"ImVector_ImDrawChannel:push_back",
    "description":"[C++] void ImVector_ImDrawChannel::push_back(ImVector_ImDrawChannel* self, const ImDrawChannel v)\n\n"
  },
  "imgui.ImVector_ImWchar_end_const":{
    "scope":"lua",
    "body":"ImVector_ImWchar:end_const()",
    "prefix":"ImVector_ImWchar:end",
    "description":"[C++] ImWchar const * ImVector_ImWchar::end(const ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_ImVector_ImGuiStoragePair":{
    "scope":"lua",
    "body":"imgui.ImVector_ImGuiStoragePair()",
    "prefix":"imgui.ImVector_ImGuiStoragePair",
    "description":"[C++] ImVector_ImGuiStoragePair()\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImGuiStoragePair:resize",
    "description":"[C++] void ImVector_ImGuiStoragePair::resize(ImVector_ImGuiStoragePair* self, int new_size, const ImGuiStoragePair v)\n\n"
  },
  "imgui.ImVector_ImVec2_push_front":{
    "scope":"lua",
    "body":"ImVector_ImVec2:push_front(${1:v})",
    "prefix":"ImVector_ImVec2:push_front",
    "description":"[C++] void ImVector_ImVec2::push_front(ImVector_ImVec2* self, const ImVec2 v)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_ImVector_ImFontGlyphVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImFontGlyph.ImVector_ImFontGlyphVector(${1:src})",
    "prefix":"imgui.ImVector_ImFontGlyph.ImVector_ImFontGlyph",
    "description":"[C++] ImVector_ImFontGlyph(const ImVector_ImFontGlyph src)\n\n"
  },
  "imgui.ImVector_ImU32_empty":{
    "scope":"lua",
    "body":"ImVector_ImU32:empty()",
    "prefix":"ImVector_ImU32:empty",
    "description":"[C++] bool ImVector_ImU32::empty(const ImVector_ImU32* self)\n\n"
  },
  "imgui.ImDrawCornerFlags_Top":{
    "scope":"lua",
    "body":"imgui.DrawCornerFlags.Top",
    "prefix":"imgui.DrawCornerFlags.Top",
    "description":"[C++] ImDrawCornerFlags_Top = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight\n\n"
  },
  "imgui.ImGuiListClipper_Begin":{
    "scope":"lua",
    "body":"ImGuiListClipper:Begin(${1:items_count}${2:[, items_height=-1.0f]})",
    "prefix":"ImGuiListClipper:Begin",
    "description":"[C++] void ImGuiListClipper::Begin(int items_count, float items_height=-1.0f)\n\n"
  },
  "imgui.ImDrawList_ChannelsSplit":{
    "scope":"lua",
    "body":"ImDrawList:ChannelsSplit(${1:count})",
    "prefix":"ImDrawList:ChannelsSplit",
    "description":"[C++] void ImDrawList::ChannelsSplit(int count)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_insert":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImFontAtlasCustomRect:insert",
    "description":"[C++] ImFontAtlasCustomRect* ImVector_ImFontAtlasCustomRect::insert(ImVector_ImFontAtlasCustomRect* self, ImFontAtlasCustomRect const * it, const ImFontAtlasCustomRect v)\n\n"
  },
  "imgui.ImVector_ImTextureID_ImVector_ImTextureIDVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImTextureID.ImVector_ImTextureIDVector(${1:src})",
    "prefix":"imgui.ImVector_ImTextureID.ImVector_ImTextureID",
    "description":"[C++] ImVector_ImTextureID(const ImVector_ImTextureID src)\n\n"
  },
  "imgui.ImDrawList_UpdateClipRect":{
    "scope":"lua",
    "body":"ImDrawList:UpdateClipRect()",
    "prefix":"ImDrawList:UpdateClipRect",
    "description":"[C++] void ImDrawList::UpdateClipRect()\n\n"
  },
  "imgui.ImGuiPayload.DataSize":{
    "scope":"lua",
    "body":"ImGuiPayload.DataSize",
    "prefix":"ImGuiPayload.DataSize",
    "description":"[C++] int ImGuiPayload::DataSize\n\n"
  },
  "imgui.igSetTabItemClosed":{
    "scope":"lua",
    "body":"imgui.SetTabItemClosed(${1:tab_or_docked_window_label})",
    "prefix":"imgui.SetTabItemClosed",
    "description":"[C++] void ImGui::SetTabItemClosed(const char* tab_or_docked_window_label)\n\n"
  },
  "imgui.ImDrawList_PushTextureID":{
    "scope":"lua",
    "body":"ImDrawList:PushTextureID(${1:texture_id})",
    "prefix":"ImDrawList:PushTextureID",
    "description":"[C++] void ImDrawList::PushTextureID(ImTextureID texture_id)\n\n"
  },
  "imgui.ImVector_ImDrawVert_back_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:back_const()",
    "prefix":"ImVector_ImDrawVert:back",
    "description":"[C++] ImDrawVert const * ImVector_ImDrawVert::back(const ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImFontAtlas_GetCustomRectByIndex":{
    "scope":"lua",
    "body":"ImFontAtlas:GetCustomRectByIndex(${1:index})",
    "prefix":"ImFontAtlas:GetCustomRectByIndex",
    "description":"[C++] const ImFontAtlasCustomRect* ImFontAtlas::GetCustomRectByIndex(int index)\n\n"
  },
  "imgui.ImDrawList_AddTriangle":{
    "scope":"lua",
    "body":"ImDrawList:AddTriangle(${1:a}, ${2:b}, ${3:c}, ${4:col}${5:[, thickness=1.0f]})",
    "prefix":"ImDrawList:AddTriangle",
    "description":"[C++] void ImDrawList::AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness=1.0f)\n\n"
  },
  "imgui.ImVector_ImFontConfig_empty":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:empty()",
    "prefix":"ImVector_ImFontConfig:empty",
    "description":"[C++] bool ImVector_ImFontConfig::empty(const ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.igEndMenu":{
    "scope":"lua",
    "body":"imgui.EndMenu()",
    "prefix":"imgui.EndMenu",
    "description":"[C++] void ImGui::EndMenu()\n\n"
  },
  "imgui.ImVector_ImVec4_back_const":{
    "scope":"lua",
    "body":"ImVector_ImVec4:back_const()",
    "prefix":"ImVector_ImVec4:back",
    "description":"[C++] ImVec4 const * ImVector_ImVec4::back(const ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImGuiDir_Down":{
    "scope":"lua",
    "body":"imgui.Dir.Down",
    "prefix":"imgui.Dir.Down",
    "description":"[C++] ImGuiDir_Down = 3\n\n"
  },
  "imgui.ImGuiListClipper_End":{
    "scope":"lua",
    "body":"ImGuiListClipper:End()",
    "prefix":"ImGuiListClipper:End",
    "description":"[C++] void ImGuiListClipper::End()\n\n"
  },
  "imgui.ImVector_ImFontConfig_resize":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:resize(${1:new_size})",
    "prefix":"ImVector_ImFontConfig:resize",
    "description":"[C++] void ImVector_ImFontConfig::resize(ImVector_ImFontConfig* self, int new_size)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_back":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:back()",
    "prefix":"ImVector_ImGuiStoragePair:back",
    "description":"[C++] ImGuiStoragePair* ImVector_ImGuiStoragePair::back(ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImFontAtlasCustomRect:_grow_capacity",
    "description":"[C++] int ImVector_ImFontAtlasCustomRect::_grow_capacity(const ImVector_ImFontAtlasCustomRect* self, int sz)\n\n"
  },
  "imgui.ImGuiNavInput_LStickRight":{
    "scope":"lua",
    "body":"imgui.NavInput.LStickRight",
    "prefix":"imgui.NavInput.LStickRight",
    "description":"[C++] ImGuiNavInput_LStickRight = 9\n\n"
  },
  "imgui.igSetMouseCursor":{
    "scope":"lua",
    "body":"imgui.SetMouseCursor(${1:type})",
    "prefix":"imgui.SetMouseCursor",
    "description":"[C++] void ImGui::SetMouseCursor(ImGuiMouseCursor type)\n\n"
  },
  "imgui.ImVector_ImFontGlyph__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImFontGlyph:_grow_capacity",
    "description":"[C++] int ImVector_ImFontGlyph::_grow_capacity(const ImVector_ImFontGlyph* self, int sz)\n\n"
  },
  "imgui.ImDrawListFlags_None":{
    "scope":"lua",
    "body":"imgui.DrawListFlags.None",
    "prefix":"imgui.DrawListFlags.None",
    "description":"[C++] ImDrawListFlags_None = 0\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_front_const":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:front_const()",
    "prefix":"ImVector_ImFontAtlasCustomRect:front",
    "description":"[C++] ImFontAtlasCustomRect const * ImVector_ImFontAtlasCustomRect::front(const ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImGuiCol_ResizeGripActive":{
    "scope":"lua",
    "body":"imgui.Col.ResizeGripActive",
    "prefix":"imgui.Col.ResizeGripActive",
    "description":"[C++] ImGuiCol_ResizeGripActive = 32\n\n"
  },
  "imgui.ImVector_ImFontPtr_front":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:front()",
    "prefix":"ImVector_ImFontPtr:front",
    "description":"[C++] ImFont** ImVector_ImFontPtr::front(ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImGuiTextBuffer_clear":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:clear()",
    "prefix":"ImGuiTextBuffer:clear",
    "description":"[C++] void ImGuiTextBuffer::clear()\n\n"
  },
  "imgui.igCaptureMouseFromApp":{
    "scope":"lua",
    "body":"imgui.CaptureMouseFromApp(${1:[want_capture_mouse_value=true]})",
    "prefix":"imgui.CaptureMouseFromApp",
    "description":"[C++] void ImGui::CaptureMouseFromApp(bool want_capture_mouse_value=true)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_back_const":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:back_const()",
    "prefix":"ImVector_ImFontAtlasCustomRect:back",
    "description":"[C++] ImFontAtlasCustomRect const * ImVector_ImFontAtlasCustomRect::back(const ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImGuiStyle.Alpha":{
    "scope":"lua",
    "body":"ImGuiStyle.Alpha",
    "prefix":"ImGuiStyle.Alpha",
    "description":"[C++] float ImGuiStyle::Alpha\n\n"
  },
  "imgui.ImVector_char_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_char:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_char:erase",
    "description":"[C++] char* ImVector_char::erase(ImVector_char* self, char const * it, char const * it_last)\n\n"
  },
  "imgui.ImVector_ImVec2_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImVec2:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImVec2:index_from_ptr",
    "description":"[C++] int ImVector_ImVec2::index_from_ptr(const ImVector_ImVec2* self, ImVec2 const * it)\n\n"
  },
  "imgui.ImGuiStorage_SetVoidPtr":{
    "scope":"lua",
    "body":"ImGuiStorage:SetVoidPtr(${1:key}, ${2:val})",
    "prefix":"ImGuiStorage:SetVoidPtr",
    "description":"[C++] void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)\n\n"
  },
  "imgui.ImVector_char_back":{
    "scope":"lua",
    "body":"ImVector_char:back()",
    "prefix":"ImVector_char:back",
    "description":"[C++] char* ImVector_char::back(ImVector_char* self)\n\n"
  },
  "imgui.igIsItemEdited":{
    "scope":"lua",
    "body":"imgui.IsItemEdited()",
    "prefix":"imgui.IsItemEdited",
    "description":"[C++] bool ImGui::IsItemEdited()\n\n"
  },
  "imgui.igGetVersion":{
    "scope":"lua",
    "body":"imgui.GetVersion()",
    "prefix":"imgui.GetVersion",
    "description":"[C++] const char* ImGui::GetVersion()\n\n"
  },
  "imgui.ImGuiInputTextFlags_NoMarkEdited":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.NoMarkEdited",
    "prefix":"imgui.InputTextFlags.NoMarkEdited",
    "description":"[C++] ImGuiInputTextFlags_NoMarkEdited = 1 << 21\n\n"
  },
  "imgui.igIsPopupOpen":{
    "scope":"lua",
    "body":"imgui.IsPopupOpen(${1:str_id})",
    "prefix":"imgui.IsPopupOpen",
    "description":"[C++] bool ImGui::IsPopupOpen(const char* str_id)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_push_front":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:push_front(${1:v})",
    "prefix":"ImVector_ImGuiTextRange:push_front",
    "description":"[C++] void ImVector_ImGuiTextRange::push_front(ImVector_ImGuiTextRange* self, const ImGuiTextRange v)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:size_in_bytes()",
    "prefix":"ImVector_ImDrawIdx:size_in_bytes",
    "description":"[C++] int ImVector_ImDrawIdx::size_in_bytes(const ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_end":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:_end()",
    "prefix":"ImVector_ImGuiStoragePair:end",
    "description":"[C++] ImGuiStoragePair* ImVector_ImGuiStoragePair::end(ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.igBulletText":{
    "scope":"lua",
    "body":"imgui.BulletText(${1:fmt},...)",
    "prefix":"imgui.BulletText",
    "description":"[C++] void ImGui::BulletText(const char* fmt, ...)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImDrawCmd:index_from_ptr",
    "description":"[C++] int ImVector_ImDrawCmd::index_from_ptr(const ImVector_ImDrawCmd* self, ImDrawCmd const * it)\n\n"
  },
  "imgui.ImVector_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector:index_from_ptr(${1:it})",
    "prefix":"ImVector:index_from_ptr",
    "description":"[C++] int ImVector::index_from_ptr(const T* it)\n\n"
  },
  "imgui.ImColor_ImColorVec4":{
    "scope":"lua",
    "body":"imgui.ImColor.ImColorVec4(${1:col})",
    "prefix":"imgui.ImColor.ImColor",
    "description":"[C++] ImColor(const ImVec4& col)\n\n"
  },
  "imgui.ImVector_float__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_float:_grow_capacity(${1:sz})",
    "prefix":"ImVector_float:_grow_capacity",
    "description":"[C++] int ImVector_float::_grow_capacity(const ImVector_float* self, int sz)\n\n"
  },
  "imgui.igLabelText":{
    "scope":"lua",
    "body":"imgui.LabelText(${1:label}, ${2:fmt},...)",
    "prefix":"imgui.LabelText",
    "description":"[C++] void ImGui::LabelText(const char* label, const char* fmt, ...)\n\n"
  },
  "imgui.igDragFloat2":{
    "scope":"lua",
    "body":"imgui.DragFloat2(${1:label}, ${2:v}${3:[, v_speed=1.0f]}${4:[, v_min=0.0f]}${5:[, v_max=0.0f]}${6:[, format=\"%.3f\"]}${7:[, power=1.0f]})",
    "prefix":"imgui.DragFloat2",
    "description":"[C++] bool ImGui::DragFloat2(const char* label, float v[2], float v_speed=1.0f, float v_min=0.0f, float v_max=0.0f, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_ImVector_ImFontGlyph":{
    "scope":"lua",
    "body":"imgui.ImVector_ImFontGlyph()",
    "prefix":"imgui.ImVector_ImFontGlyph",
    "description":"[C++] ImVector_ImFontGlyph()\n\n"
  },
  "imgui.ImFontAtlas_Build":{
    "scope":"lua",
    "body":"ImFontAtlas:Build()",
    "prefix":"ImFontAtlas:Build",
    "description":"[C++] bool ImFontAtlas::Build()\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_front_const":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:front_const()",
    "prefix":"ImVector_ImGuiTextRange:front",
    "description":"[C++] ImGuiTextRange const * ImVector_ImGuiTextRange::front(const ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.SwitchContext":{
    "scope":"lua",
    "body":"imgui.SwitchContext()",
    "prefix":"imgui.SwitchContext",
    "description":"[mimgui function]\n\n"
  },
  "imgui.ImFontAtlas.ConfigData":{
    "scope":"lua",
    "body":"ImFontAtlas.ConfigData",
    "prefix":"ImFontAtlas.ConfigData",
    "description":"[C++] ImVector_ImFontConfig ImFontAtlas::ConfigData\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_size":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:size()",
    "prefix":"ImVector_ImGuiTextRange:size",
    "description":"[C++] int ImVector_ImGuiTextRange::size(const ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImGuiTextFilter_PassFilter":{
    "scope":"lua",
    "body":"ImGuiTextFilter:PassFilter(${1:text}${2:[, text_end=((void*)0)]})",
    "prefix":"ImGuiTextFilter:PassFilter",
    "description":"[C++] bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end=((void*)0))\n\n"
  },
  "imgui.ImGuiPayload.Data":{
    "scope":"lua",
    "body":"ImGuiPayload.Data",
    "prefix":"ImGuiPayload.Data",
    "description":"[C++] void* ImGuiPayload::Data\n\n"
  },
  "imgui.ImVector_float_front_const":{
    "scope":"lua",
    "body":"ImVector_float:front_const()",
    "prefix":"ImVector_float:front",
    "description":"[C++] float const * ImVector_float::front(const ImVector_float* self)\n\n"
  },
  "imgui.ImFontAtlasCustomRect.Y":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect.Y",
    "prefix":"ImFontAtlasCustomRect.Y",
    "description":"[C++] unsigned short ImFontAtlasCustomRect::Y\n\n"
  },
  "imgui.igSetCursorPos":{
    "scope":"lua",
    "body":"imgui.SetCursorPos(${1:local_pos})",
    "prefix":"imgui.SetCursorPos",
    "description":"[C++] void ImGui::SetCursorPos(const ImVec2& local_pos)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_erase":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:erase(${1:it})",
    "prefix":"ImVector_ImGuiStoragePair:erase",
    "description":"[C++] ImGuiStoragePair* ImVector_ImGuiStoragePair::erase(ImVector_ImGuiStoragePair* self, ImGuiStoragePair const * it)\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_Selected":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.Selected",
    "prefix":"imgui.TreeNodeFlags.Selected",
    "description":"[C++] ImGuiTreeNodeFlags_Selected = 1 << 0\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.Flags":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.Flags",
    "prefix":"ImGuiInputTextCallbackData.Flags",
    "description":"[C++] ImGuiInputTextFlags ImGuiInputTextCallbackData::Flags\n\n"
  },
  "imgui.igLogToTTY":{
    "scope":"lua",
    "body":"imgui.LogToTTY(${1:[auto_open_depth=-1]})",
    "prefix":"imgui.LogToTTY",
    "description":"[C++] void ImGui::LogToTTY(int auto_open_depth=-1)\n\n"
  },
  "imgui.ImVector_ImVec2_back":{
    "scope":"lua",
    "body":"ImVector_ImVec2:back()",
    "prefix":"ImVector_ImVec2:back",
    "description":"[C++] ImVec2* ImVector_ImVec2::back(ImVector_ImVec2* self)\n\n"
  },
  "imgui.igTreeNodeVPtr":{
    "scope":"lua",
    "body":"imgui.TreeNodeVPtr(${1:ptr_id}, ${2:fmt}, ${3:args})",
    "prefix":"imgui.TreeNodeV",
    "description":"[C++] bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_push_front":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:push_front(${1:v})",
    "prefix":"ImVector_ImDrawCmd:push_front",
    "description":"[C++] void ImVector_ImDrawCmd::push_front(ImVector_ImDrawCmd* self, const ImDrawCmd v)\n\n"
  },
  "imgui.igInputInt4":{
    "scope":"lua",
    "body":"imgui.InputInt4(${1:label}, ${2:v}${3:[, flags=0]})",
    "prefix":"imgui.InputInt4",
    "description":"[C++] bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.igPopStyleColor":{
    "scope":"lua",
    "body":"imgui.PopStyleColor(${1:[count=1]})",
    "prefix":"imgui.PopStyleColor",
    "description":"[C++] void ImGui::PopStyleColor(int count=1)\n\n"
  },
  "imgui.ImGuiTextBuffer":{
    "scope":"lua",
    "body":"new.ImGuiTextBuffer($1)",
    "prefix":"new.ImGuiTextBuffer",
    "description":"typedef struct ImGuiTextBuffer ImGuiTextBuffer\n\n"
  },
  "imgui.igInputInt2":{
    "scope":"lua",
    "body":"imgui.InputInt2(${1:label}, ${2:v}${3:[, flags=0]})",
    "prefix":"imgui.InputInt2",
    "description":"[C++] bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.igSetWindowFocus":{
    "scope":"lua",
    "body":"imgui.SetWindowFocus()",
    "prefix":"imgui.SetWindowFocus",
    "description":"[C++] void ImGui::SetWindowFocus()\n\n"
  },
  "imgui.igGetCursorStartPos":{
    "scope":"lua",
    "body":"imgui.GetCursorStartPos()",
    "prefix":"imgui.GetCursorStartPos",
    "description":"[C++] ImVec2 ImGui::GetCursorStartPos()\n\n"
  },
  "imgui.ImGuiTextFilter_Clear":{
    "scope":"lua",
    "body":"ImGuiTextFilter:Clear()",
    "prefix":"ImGuiTextFilter:Clear",
    "description":"[C++] void ImGuiTextFilter::Clear()\n\n"
  },
  "imgui.igStyleColorsLight":{
    "scope":"lua",
    "body":"imgui.StyleColorsLight(${1:[dst=((void*)0)]})",
    "prefix":"imgui.StyleColorsLight",
    "description":"[C++] void ImGui::StyleColorsLight(ImGuiStyle* dst=((void*)0))\n\n"
  },
  "imgui.ImVector_ImFontConfig_back":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:back()",
    "prefix":"ImVector_ImFontConfig:back",
    "description":"[C++] ImFontConfig* ImVector_ImFontConfig::back(ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImDrawList_ChannelsSetCurrent":{
    "scope":"lua",
    "body":"ImDrawList:ChannelsSetCurrent(${1:n})",
    "prefix":"ImDrawList:ChannelsSetCurrent",
    "description":"[C++] void ImDrawList::ChannelsSetCurrent(int n)\n\n"
  },
  "imgui.ImVector_ImVec4_size":{
    "scope":"lua",
    "body":"ImVector_ImVec4:size()",
    "prefix":"ImVector_ImVec4:size",
    "description":"[C++] int ImVector_ImVec4::size(const ImVector_ImVec4* self)\n\n"
  },
  "imgui.igGetKeyPressedAmount":{
    "scope":"lua",
    "body":"imgui.GetKeyPressedAmount(${1:key_index}, ${2:repeat_delay}, ${3:rate})",
    "prefix":"imgui.GetKeyPressedAmount",
    "description":"[C++] int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float rate)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:back()",
    "prefix":"ImVector_ImDrawChannel:back",
    "description":"[C++] ImDrawChannel* ImVector_ImDrawChannel::back(ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.igGetScrollX":{
    "scope":"lua",
    "body":"imgui.GetScrollX()",
    "prefix":"imgui.GetScrollX",
    "description":"[C++] float ImGui::GetScrollX()\n\n"
  },
  "imgui.ImVector_ImDrawCmd_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:size_in_bytes()",
    "prefix":"ImVector_ImDrawCmd:size_in_bytes",
    "description":"[C++] int ImVector_ImDrawCmd::size_in_bytes(const ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.igColorButton":{
    "scope":"lua",
    "body":"imgui.ColorButton(${1:desc_id}, ${2:col}${3:[, flags=0]}${4:[, size=ImVec2(0,0)]})",
    "prefix":"imgui.ColorButton",
    "description":"[C++] bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags=0, ImVec2 size=ImVec2(0, 0))\n\n"
  },
  "imgui.igGetIDPtr":{
    "scope":"lua",
    "body":"imgui.GetIDPtr(${1:ptr_id})",
    "prefix":"imgui.GetID",
    "description":"[C++] ImGuiID ImGui::GetID(const void* ptr_id)\n\n"
  },
  "imgui.ImVector_ImFontConfig_back_const":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:back_const()",
    "prefix":"ImVector_ImFontConfig:back",
    "description":"[C++] ImFontConfig const * ImVector_ImFontConfig::back(const ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.igShowStyleEditor":{
    "scope":"lua",
    "body":"imgui.ShowStyleEditor(${1:[ref=((void*)0)]})",
    "prefix":"imgui.ShowStyleEditor",
    "description":"[C++] void ImGui::ShowStyleEditor(ImGuiStyle* ref=((void*)0))\n\n"
  },
  "imgui.igPushClipRect":{
    "scope":"lua",
    "body":"imgui.PushClipRect(${1:clip_rect_min}, ${2:clip_rect_max}, ${3:intersect_with_current_clip_rect})",
    "prefix":"imgui.PushClipRect",
    "description":"[C++] void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)\n\n"
  },
  "imgui.igTreeNodeVStr":{
    "scope":"lua",
    "body":"imgui.TreeNodeVStr(${1:str_id}, ${2:fmt}, ${3:args})",
    "prefix":"imgui.TreeNodeV",
    "description":"[C++] bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)\n\n"
  },
  "imgui.ImVector_ImDrawChannel_back_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:back_const()",
    "prefix":"ImVector_ImDrawChannel:back",
    "description":"[C++] ImDrawChannel const * ImVector_ImDrawChannel::back(const ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImVector_ImVec4_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImVec4:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImVec4:index_from_ptr",
    "description":"[C++] int ImVector_ImVec4::index_from_ptr(const ImVector_ImVec4* self, ImVec4 const * it)\n\n"
  },
  "imgui.igMemFree":{
    "scope":"lua",
    "body":"imgui.MemFree(${1:ptr})",
    "prefix":"imgui.MemFree",
    "description":"[C++] void ImGui::MemFree(void* ptr)\n\n"
  },
  "imgui.igSetNextWindowSizeConstraints":{
    "scope":"lua",
    "body":"imgui.SetNextWindowSizeConstraints(${1:size_min}, ${2:size_max}${3:[, custom_callback=((void*)0)]}${4:[, custom_callback_data=((void*)0)]})",
    "prefix":"imgui.SetNextWindowSizeConstraints",
    "description":"[C++] void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback=((void*)0), void* custom_callback_data=((void*)0))\n\n"
  },
  "imgui.ImVector_ImWchar_reserve":{
    "scope":"lua",
    "body":"ImVector_ImWchar:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImWchar:reserve",
    "description":"[C++] void ImVector_ImWchar::reserve(ImVector_ImWchar* self, int new_capacity)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_begin":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:begin()",
    "prefix":"ImVector_ImGuiTextRange:begin",
    "description":"[C++] ImGuiTextRange* ImVector_ImGuiTextRange::begin(ImVector_ImGuiTextRange* self)\n\n"
  },
  "imgui.ImVector_float_clear":{
    "scope":"lua",
    "body":"ImVector_float:clear()",
    "prefix":"ImVector_float:clear",
    "description":"[C++] void ImVector_float::clear(ImVector_float* self)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_size":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:size()",
    "prefix":"ImVector_ImGuiStoragePair:size",
    "description":"[C++] int ImVector_ImGuiStoragePair::size(const ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.igCombo":{
    "scope":"lua",
    "body":"imgui.Combo(${1:label}, ${2:current_item}, ${3:items}, ${4:items_count}${5:[, popup_max_height_in_items=-1]})",
    "prefix":"imgui.Combo",
    "description":"[C++] bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items=-1)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_erase_unsorted":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:erase_unsorted(${1:it})",
    "prefix":"ImVector_ImDrawCmd:erase_unsorted",
    "description":"[C++] ImDrawCmd* ImVector_ImDrawCmd::erase_unsorted(ImVector_ImDrawCmd* self, ImDrawCmd const * it)\n\n"
  },
  "imgui.ImVector_ImVec2_size_in_bytes":{
    "scope":"lua",
    "body":"ImVector_ImVec2:size_in_bytes()",
    "prefix":"ImVector_ImVec2:size_in_bytes",
    "description":"[C++] int ImVector_ImVec2::size_in_bytes(const ImVector_ImVec2* self)\n\n"
  },
  "imgui.igTreeNodeExVStr":{
    "scope":"lua",
    "body":"imgui.TreeNodeExVStr(${1:str_id}, ${2:flags}, ${3:fmt}, ${4:args})",
    "prefix":"imgui.TreeNodeExV",
    "description":"[C++] bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)\n\n"
  },
  "imgui.ImGuiTabBarFlags_NoTooltip":{
    "scope":"lua",
    "body":"imgui.TabBarFlags.NoTooltip",
    "prefix":"imgui.TabBarFlags.NoTooltip",
    "description":"[C++] ImGuiTabBarFlags_NoTooltip = 1 << 5\n\n"
  },
  "imgui.igInputFloat":{
    "scope":"lua",
    "body":"imgui.InputFloat(${1:label}, ${2:v}${3:[, step=0.0f]}${4:[, step_fast=0.0f]}${5:[, format=\"%.3f\"]}${6:[, flags=0]})",
    "prefix":"imgui.InputFloat",
    "description":"[C++] bool ImGui::InputFloat(const char* label, float* v, float step=0.0f, float step_fast=0.0f, const char* format=\"%.3f\", ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_push_front":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:push_front(${1:v})",
    "prefix":"ImVector_ImFontGlyph:push_front",
    "description":"[C++] void ImVector_ImFontGlyph::push_front(ImVector_ImFontGlyph* self, const ImFontGlyph v)\n\n"
  },
  "imgui.ImVector_ImVec4_clear":{
    "scope":"lua",
    "body":"ImVector_ImVec4:clear()",
    "prefix":"ImVector_ImVec4:clear",
    "description":"[C++] void ImVector_ImVec4::clear(ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImVector_ImFontPtr_empty":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:empty()",
    "prefix":"ImVector_ImFontPtr:empty",
    "description":"[C++] bool ImVector_ImFontPtr::empty(const ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.ImGuiConfigFlags_NoMouseCursorChange":{
    "scope":"lua",
    "body":"imgui.ConfigFlags.NoMouseCursorChange",
    "prefix":"imgui.ConfigFlags.NoMouseCursorChange",
    "description":"[C++] ImGuiConfigFlags_NoMouseCursorChange = 1 << 5\n\n"
  },
  "imgui.ImGuiWindowFlags_Popup":{
    "scope":"lua",
    "body":"imgui.WindowFlags.Popup",
    "prefix":"imgui.WindowFlags.Popup",
    "description":"[C++] ImGuiWindowFlags_Popup = 1 << 26\n\n"
  },
  "imgui.ImVector_ImFontConfig_end_const":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:end_const()",
    "prefix":"ImVector_ImFontConfig:end",
    "description":"[C++] ImFontConfig const * ImVector_ImFontConfig::end(const ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImVector_ImVec2_front_const":{
    "scope":"lua",
    "body":"ImVector_ImVec2:front_const()",
    "prefix":"ImVector_ImVec2:front",
    "description":"[C++] ImVec2 const * ImVector_ImVec2::front(const ImVector_ImVec2* self)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:begin_const()",
    "prefix":"ImVector_ImFontAtlasCustomRect:begin",
    "description":"[C++] ImFontAtlasCustomRect const * ImVector_ImFontAtlasCustomRect::begin(const ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImVector_ImDrawVert_end":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:_end()",
    "prefix":"ImVector_ImDrawVert:end",
    "description":"[C++] ImDrawVert* ImVector_ImDrawVert::end(ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImGuiTabItemFlags":{
    "scope":"lua",
    "body":"new.ImGuiTabItemFlags($1)",
    "prefix":"new.ImGuiTabItemFlags",
    "description":"typedef int ImGuiTabItemFlags\n\n"
  },
  "imgui.ImVector_back":{
    "scope":"lua",
    "body":"ImVector:back()",
    "prefix":"ImVector:back",
    "description":"[C++] T* ImVector::back()\n\n"
  },
  "imgui.ImGuiStyle.AntiAliasedFill":{
    "scope":"lua",
    "body":"ImGuiStyle.AntiAliasedFill",
    "prefix":"ImGuiStyle.AntiAliasedFill",
    "description":"[C++] bool ImGuiStyle::AntiAliasedFill\n\n"
  },
  "imgui.ImVector_ImDrawChannel_reserve":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImDrawChannel:reserve",
    "description":"[C++] void ImVector_ImDrawChannel::reserve(ImVector_ImDrawChannel* self, int new_capacity)\n\n"
  },
  "imgui.ImVector_char_capacity":{
    "scope":"lua",
    "body":"ImVector_char:capacity()",
    "prefix":"ImVector_char:capacity",
    "description":"[C++] int ImVector_char::capacity(const ImVector_char* self)\n\n"
  },
  "imgui.ImGuiStyleVar_Alpha":{
    "scope":"lua",
    "body":"imgui.StyleVar.Alpha",
    "prefix":"imgui.StyleVar.Alpha",
    "description":"[C++] ImGuiStyleVar_Alpha = 0\n\n"
  },
  "imgui.ImVector_ImDrawCmd_push_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:push_back(${1:v})",
    "prefix":"ImVector_ImDrawCmd:push_back",
    "description":"[C++] void ImVector_ImDrawCmd::push_back(ImVector_ImDrawCmd* self, const ImDrawCmd v)\n\n"
  },
  "imgui.igDragScalarN":{
    "scope":"lua",
    "body":"imgui.DragScalarN(${1:label}, ${2:data_type}, ${3:v}, ${4:components}, ${5:v_speed}${6:[, v_min=((void*)0)]}${7:[, v_max=((void*)0)]}${8:[, format=((void*)0)]}${9:[, power=1.0f]})",
    "prefix":"imgui.DragScalarN",
    "description":"[C++] bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* v, int components, float v_speed, const void* v_min=((void*)0), const void* v_max=((void*)0), const char* format=((void*)0), float power=1.0f)\n\n"
  },
  "imgui.igDragFloat":{
    "scope":"lua",
    "body":"imgui.DragFloat(${1:label}, ${2:v}${3:[, v_speed=1.0f]}${4:[, v_min=0.0f]}${5:[, v_max=0.0f]}${6:[, format=\"%.3f\"]}${7:[, power=1.0f]})",
    "prefix":"imgui.DragFloat",
    "description":"[C++] bool ImGui::DragFloat(const char* label, float* v, float v_speed=1.0f, float v_min=0.0f, float v_max=0.0f, const char* format=\"%.3f\", float power=1.0f)\n\n"
  },
  "imgui.ImGuiIO.BackendPlatformName":{
    "scope":"lua",
    "body":"ImGuiIO.BackendPlatformName",
    "prefix":"ImGuiIO.BackendPlatformName",
    "description":"[C++] const char* ImGuiIO::BackendPlatformName\n\n"
  },
  "imgui.ImGuiDragDropFlags_None":{
    "scope":"lua",
    "body":"imgui.DragDropFlags.None",
    "prefix":"imgui.DragDropFlags.None",
    "description":"[C++] ImGuiDragDropFlags_None = 0\n\n"
  },
  "imgui.ImGuiStorage_GetInt":{
    "scope":"lua",
    "body":"ImGuiStorage:GetInt(${1:key}${2:[, default_val=0]})",
    "prefix":"ImGuiStorage:GetInt",
    "description":"[C++] int ImGuiStorage::GetInt(ImGuiID key, int default_val=0)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:begin_const()",
    "prefix":"ImVector_ImGuiStoragePair:begin",
    "description":"[C++] ImGuiStoragePair const * ImVector_ImGuiStoragePair::begin(const ImVector_ImGuiStoragePair* self)\n\n"
  },
  "imgui.ImGuiNavInput_Activate":{
    "scope":"lua",
    "body":"imgui.NavInput.Activate",
    "prefix":"imgui.NavInput.Activate",
    "description":"[C++] ImGuiNavInput_Activate = 0\n\n"
  },
  "imgui.ImGuiStorage_GetFloat":{
    "scope":"lua",
    "body":"ImGuiStorage:GetFloat(${1:key}${2:[, default_val=0.0f]})",
    "prefix":"ImGuiStorage:GetFloat",
    "description":"[C++] float ImGuiStorage::GetFloat(ImGuiID key, float default_val=0.0f)\n\n"
  },
  "imgui.igPushIDStr":{
    "scope":"lua",
    "body":"imgui.PushIDStr(${1:str_id})",
    "prefix":"imgui.PushID",
    "description":"[C++] void ImGui::PushID(const char* str_id)\n\n"
  },
  "imgui.ImDrawList_AddCallback":{
    "scope":"lua",
    "body":"ImDrawList:AddCallback(${1:callback}, ${2:callback_data})",
    "prefix":"ImDrawList:AddCallback",
    "description":"[C++] void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)\n\n"
  },
  "imgui.igIsItemHovered":{
    "scope":"lua",
    "body":"imgui.IsItemHovered(${1:[flags=0]})",
    "prefix":"imgui.IsItemHovered",
    "description":"[C++] bool ImGui::IsItemHovered(ImGuiHoveredFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImU32_front":{
    "scope":"lua",
    "body":"ImVector_ImU32:front()",
    "prefix":"ImVector_ImU32:front",
    "description":"[C++] ImU32* ImVector_ImU32::front(ImVector_ImU32* self)\n\n"
  },
  "imgui.ImVector_ImDrawVert_empty":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:empty()",
    "prefix":"ImVector_ImDrawVert:empty",
    "description":"[C++] bool ImVector_ImDrawVert::empty(const ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.ImVector_ImWchar_end":{
    "scope":"lua",
    "body":"ImVector_ImWchar:_end()",
    "prefix":"ImVector_ImWchar:end",
    "description":"[C++] ImWchar* ImVector_ImWchar::end(ImVector_ImWchar* self)\n\n"
  },
  "imgui.igInputDouble":{
    "scope":"lua",
    "body":"imgui.InputDouble(${1:label}, ${2:v}${3:[, step=0.0]}${4:[, step_fast=0.0]}${5:[, format=\"%.6f\"]}${6:[, flags=0]})",
    "prefix":"imgui.InputDouble",
    "description":"[C++] bool ImGui::InputDouble(const char* label, double* v, double step=0.0, double step_fast=0.0, const char* format=\"%.6f\", ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImU32_push_back":{
    "scope":"lua",
    "body":"ImVector_ImU32:push_back(${1:v})",
    "prefix":"ImVector_ImU32:push_back",
    "description":"[C++] void ImVector_ImU32::push_back(ImVector_ImU32* self, const ImU32 v)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImGuiTextRange:index_from_ptr",
    "description":"[C++] int ImVector_ImGuiTextRange::index_from_ptr(const ImVector_ImGuiTextRange* self, ImGuiTextRange const * it)\n\n"
  },
  "imgui.ImVector_char_swap":{
    "scope":"lua",
    "body":"ImVector_char:swap(${1:rhs})",
    "prefix":"ImVector_char:swap",
    "description":"[C++] void ImVector_char::swap(ImVector_char* self, ImVector_char rhs)\n\n"
  },
  "imgui.ImGuiTextBuffer_begin":{
    "scope":"lua",
    "body":"ImGuiTextBuffer:begin()",
    "prefix":"ImGuiTextBuffer:begin",
    "description":"[C++] const char* ImGuiTextBuffer::begin()\n\n"
  },
  "imgui.ImVector_ImVec4_end_const":{
    "scope":"lua",
    "body":"ImVector_ImVec4:end_const()",
    "prefix":"ImVector_ImVec4:end",
    "description":"[C++] ImVec4 const * ImVector_ImVec4::end(const ImVector_ImVec4* self)\n\n"
  },
  "imgui.igInputFloat4":{
    "scope":"lua",
    "body":"imgui.InputFloat4(${1:label}, ${2:v}${3:[, format=\"%.3f\"]}${4:[, flags=0]})",
    "prefix":"imgui.InputFloat4",
    "description":"[C++] bool ImGui::InputFloat4(const char* label, float v[4], const char* format=\"%.3f\", ImGuiInputTextFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_reserve":{
    "scope":"lua",
    "body":"ImVector_ImGuiStoragePair:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImGuiStoragePair:reserve",
    "description":"[C++] void ImVector_ImGuiStoragePair::reserve(ImVector_ImGuiStoragePair* self, int new_capacity)\n\n"
  },
  "imgui.ImGuiNavInput_KeyTab_":{
    "scope":"lua",
    "body":"imgui.NavInput.KeyTab_",
    "prefix":"imgui.NavInput.KeyTab_",
    "description":"[C++] ImGuiNavInput_KeyTab_ = 17\n\n"
  },
  "imgui.ImVector_ImDrawIdx_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImDrawIdx:erase",
    "description":"[C++] ImDrawIdx* ImVector_ImDrawIdx::erase(ImVector_ImDrawIdx* self, ImDrawIdx const * it, ImDrawIdx const * it_last)\n\n"
  },
  "imgui.igBeginPopupModal":{
    "scope":"lua",
    "body":"imgui.BeginPopupModal(${1:name}${2:[, p_open=((void*)0)]}${3:[, flags=0]})",
    "prefix":"imgui.BeginPopupModal",
    "description":"[C++] bool ImGui::BeginPopupModal(const char* name, bool* p_open=((void*)0), ImGuiWindowFlags flags=0)\n\n"
  },
  "imgui.igBeginMainMenuBar":{
    "scope":"lua",
    "body":"imgui.BeginMainMenuBar()",
    "prefix":"imgui.BeginMainMenuBar",
    "description":"[C++] bool ImGui::BeginMainMenuBar()\n\n"
  },
  "imgui.igComboFnPtr":{
    "scope":"lua",
    "body":"imgui.ComboFnPtr(${1:label}, ${2:current_item}, ${3:items_getter}, ${4:data}, ${5:items_count}${6:[, popup_max_height_in_items=-1]})",
    "prefix":"imgui.Combo",
    "description":"[C++] bool ImGui::Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items=-1)\n\n"
  },
  "imgui.ImVector_char_push_back":{
    "scope":"lua",
    "body":"ImVector_char:push_back(${1:v})",
    "prefix":"ImVector_char:push_back",
    "description":"[C++] void ImVector_char::push_back(ImVector_char* self, const char v)\n\n"
  },
  "imgui.igIsItemClicked":{
    "scope":"lua",
    "body":"imgui.IsItemClicked(${1:[mouse_button=0]})",
    "prefix":"imgui.IsItemClicked",
    "description":"[C++] bool ImGui::IsItemClicked(int mouse_button=0)\n\n"
  },
  "imgui.ImVec2.x":{
    "scope":"lua",
    "body":"ImVec2.x",
    "prefix":"ImVec2.x",
    "description":"[C++] float ImVec2::x\n\n"
  },
  "imgui.igGetFont":{
    "scope":"lua",
    "body":"imgui.GetFont()",
    "prefix":"imgui.GetFont",
    "description":"[C++] ImFont* ImGui::GetFont()\n\n"
  },
  "imgui.ImFontAtlas_ImFontAtlas":{
    "scope":"lua",
    "body":"imgui.ImFontAtlas()",
    "prefix":"imgui.ImFontAtlas",
    "description":"[C++] ImFontAtlas()\n\n"
  },
  "imgui.igSetClipboardText":{
    "scope":"lua",
    "body":"imgui.SetClipboardText(${1:text})",
    "prefix":"imgui.SetClipboardText",
    "description":"[C++] void ImGui::SetClipboardText(const char* text)\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_DefaultOpen":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.DefaultOpen",
    "prefix":"imgui.TreeNodeFlags.DefaultOpen",
    "description":"[C++] ImGuiTreeNodeFlags_DefaultOpen = 1 << 5\n\n"
  },
  "imgui.ImVector_ImDrawIdx_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:begin_const()",
    "prefix":"ImVector_ImDrawIdx:begin",
    "description":"[C++] ImDrawIdx const * ImVector_ImDrawIdx::begin(const ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.StrCopy":{
    "scope":"lua",
    "body":"imgui.StrCopy(${1:dst}, ${2:src}${3:[, len]})",
    "prefix":"imgui.StrCopy",
    "description":"[mimgui function]\n\n"
  },
  "imgui.ImVector_ImTextureID_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:begin_const()",
    "prefix":"ImVector_ImTextureID:begin",
    "description":"[C++] ImTextureID const * ImVector_ImTextureID::begin(const ImVector_ImTextureID* self)\n\n"
  },
  "imgui.igColumns":{
    "scope":"lua",
    "body":"imgui.Columns(${1:[count=1]}${2:[, id=((void*)0)]}${3:[, border=true]})",
    "prefix":"imgui.Columns",
    "description":"[C++] void ImGui::Columns(int count=1, const char* id=((void*)0), bool border=true)\n\n"
  },
  "imgui.ImVector_resizeT":{
    "scope":"lua",
    "body":"ImVector:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector:resize",
    "description":"[C++] void ImVector::resize(int new_size, const T& v)\n\n"
  },
  "imgui.ImDrawList._TextureIdStack":{
    "scope":"lua",
    "body":"ImDrawList._TextureIdStack",
    "prefix":"ImDrawList._TextureIdStack",
    "description":"[C++] ImVector_ImTextureID ImDrawList::_TextureIdStack\n\n"
  },
  "imgui.ImVector_ImDrawChannel_resize":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:resize(${1:new_size})",
    "prefix":"ImVector_ImDrawChannel:resize",
    "description":"[C++] void ImVector_ImDrawChannel::resize(ImVector_ImDrawChannel* self, int new_size)\n\n"
  },
  "imgui.ImVector_char_erase":{
    "scope":"lua",
    "body":"ImVector_char:erase(${1:it})",
    "prefix":"ImVector_char:erase",
    "description":"[C++] char* ImVector_char::erase(ImVector_char* self, char const * it)\n\n"
  },
  "imgui.ImVector_ImFontPtr_swap":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:swap(${1:rhs})",
    "prefix":"ImVector_ImFontPtr:swap",
    "description":"[C++] void ImVector_ImFontPtr::swap(ImVector_ImFontPtr* self, ImVector_ImFontPtr rhs)\n\n"
  },
  "imgui.ImGuiCol_ResizeGripHovered":{
    "scope":"lua",
    "body":"imgui.Col.ResizeGripHovered",
    "prefix":"imgui.Col.ResizeGripHovered",
    "description":"[C++] ImGuiCol_ResizeGripHovered = 31\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_end_const":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:end_const()",
    "prefix":"ImVector_ImFontAtlasCustomRect:end",
    "description":"[C++] ImFontAtlasCustomRect const * ImVector_ImFontAtlasCustomRect::end(const ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.ImGuiIO.KeysDownDuration[512]":{
    "scope":"lua",
    "body":"ImGuiIO.KeysDownDuration[512]",
    "prefix":"ImGuiIO.KeysDownDuration[512]",
    "description":"[C++] float ImGuiIO::KeysDownDuration[512]\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoOptions":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoOptions",
    "prefix":"imgui.ColorEditFlags.NoOptions",
    "description":"[C++] ImGuiColorEditFlags_NoOptions = 1 << 3\n\n"
  },
  "imgui.ImVector_ImDrawIdx_clear":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:clear()",
    "prefix":"ImVector_ImDrawIdx:clear",
    "description":"[C++] void ImVector_ImDrawIdx::clear(ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImDrawList_PrimReserve":{
    "scope":"lua",
    "body":"ImDrawList:PrimReserve(${1:idx_count}, ${2:vtx_count})",
    "prefix":"ImDrawList:PrimReserve",
    "description":"[C++] void ImDrawList::PrimReserve(int idx_count, int vtx_count)\n\n"
  },
  "imgui.ImVector_ImTextureID_reserve":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImTextureID:reserve",
    "description":"[C++] void ImVector_ImTextureID::reserve(ImVector_ImTextureID* self, int new_capacity)\n\n"
  },
  "imgui.ImVector_ImDrawVert__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImDrawVert:_grow_capacity",
    "description":"[C++] int ImVector_ImDrawVert::_grow_capacity(const ImVector_ImDrawVert* self, int sz)\n\n"
  },
  "imgui.ImVector_ImVec2_push_back":{
    "scope":"lua",
    "body":"ImVector_ImVec2:push_back(${1:v})",
    "prefix":"ImVector_ImVec2:push_back",
    "description":"[C++] void ImVector_ImVec2::push_back(ImVector_ImVec2* self, const ImVec2 v)\n\n"
  },
  "imgui.ImVector_ImFontConfig_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImFontConfig:begin_const()",
    "prefix":"ImVector_ImFontConfig:begin",
    "description":"[C++] ImFontConfig const * ImVector_ImFontConfig::begin(const ImVector_ImFontConfig* self)\n\n"
  },
  "imgui.ImVector_float_resize":{
    "scope":"lua",
    "body":"ImVector_float:resize(${1:new_size})",
    "prefix":"ImVector_float:resize",
    "description":"[C++] void ImVector_float::resize(ImVector_float* self, int new_size)\n\n"
  },
  "imgui.igSliderAngle":{
    "scope":"lua",
    "body":"imgui.SliderAngle(${1:label}, ${2:v_rad}${3:[, v_degrees_min=-360.0f]}${4:[, v_degrees_max=+360.0f]}${5:[, format=\"%.0f deg\"]})",
    "prefix":"imgui.SliderAngle",
    "description":"[C++] bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min=-360.0f, float v_degrees_max=+360.0f, const char* format=\"%.0f deg\")\n\n"
  },
  "imgui.ImVector_ImDrawVert_resize":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:resize(${1:new_size})",
    "prefix":"ImVector_ImDrawVert:resize",
    "description":"[C++] void ImVector_ImDrawVert::resize(ImVector_ImDrawVert* self, int new_size)\n\n"
  },
  "imgui.ImDrawList_AddQuadFilled":{
    "scope":"lua",
    "body":"ImDrawList:AddQuadFilled(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:col})",
    "prefix":"ImDrawList:AddQuadFilled",
    "description":"[C++] void ImDrawList::AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col)\n\n"
  },
  "imgui.ImVector_ImVec2_insert":{
    "scope":"lua",
    "body":"ImVector_ImVec2:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImVec2:insert",
    "description":"[C++] ImVec2* ImVector_ImVec2::insert(ImVector_ImVec2* self, ImVec2 const * it, const ImVec2 v)\n\n"
  },
  "imgui.ImVector_float_begin":{
    "scope":"lua",
    "body":"ImVector_float:begin()",
    "prefix":"ImVector_float:begin",
    "description":"[C++] float* ImVector_float::begin(ImVector_float* self)\n\n"
  },
  "imgui.ImDrawList_PathClear":{
    "scope":"lua",
    "body":"ImDrawList:PathClear()",
    "prefix":"ImDrawList:PathClear",
    "description":"[C++] void ImDrawList::PathClear()\n\n"
  },
  "imgui.ImVector_ImDrawIdx_push_front":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:push_front(${1:v})",
    "prefix":"ImVector_ImDrawIdx:push_front",
    "description":"[C++] void ImVector_ImDrawIdx::push_front(ImVector_ImDrawIdx* self, const ImDrawIdx v)\n\n"
  },
  "imgui.ImVector_ImFontGlyph_front_const":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:front_const()",
    "prefix":"ImVector_ImFontGlyph:front",
    "description":"[C++] ImFontGlyph const * ImVector_ImFontGlyph::front(const ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImVector_ImDrawVert_insert":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImDrawVert:insert",
    "description":"[C++] ImDrawVert* ImVector_ImDrawVert::insert(ImVector_ImDrawVert* self, ImDrawVert const * it, const ImDrawVert v)\n\n"
  },
  "imgui.ImGuiNavInput_KeyLeft_":{
    "scope":"lua",
    "body":"imgui.NavInput.KeyLeft_",
    "prefix":"imgui.NavInput.KeyLeft_",
    "description":"[C++] ImGuiNavInput_KeyLeft_ = 18\n\n"
  },
  "imgui.igValueFloat":{
    "scope":"lua",
    "body":"imgui.ValueFloat(${1:prefix}, ${2:v}${3:[, float_format=((void*)0)]})",
    "prefix":"imgui.Value",
    "description":"[C++] void ImGui::Value(const char* prefix, float v, const char* float_format=((void*)0))\n\n"
  },
  "imgui.ImGuiHoveredFlags_RootAndChildWindows":{
    "scope":"lua",
    "body":"imgui.HoveredFlags.RootAndChildWindows",
    "prefix":"imgui.HoveredFlags.RootAndChildWindows",
    "description":"[C++] ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_reserve":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:reserve(${1:new_capacity})",
    "prefix":"ImVector_ImGuiTextRange:reserve",
    "description":"[C++] void ImVector_ImGuiTextRange::reserve(ImVector_ImGuiTextRange* self, int new_capacity)\n\n"
  },
  "imgui.ImGuiWindowFlags_NoMouseInputs":{
    "scope":"lua",
    "body":"imgui.WindowFlags.NoMouseInputs",
    "prefix":"imgui.WindowFlags.NoMouseInputs",
    "description":"[C++] ImGuiWindowFlags_NoMouseInputs = 1 << 9\n\n"
  },
  "imgui.ImVector_char_pop_back":{
    "scope":"lua",
    "body":"ImVector_char:pop_back()",
    "prefix":"ImVector_char:pop_back",
    "description":"[C++] void ImVector_char::pop_back(ImVector_char* self)\n\n"
  },
  "imgui.igPushButtonRepeat":{
    "scope":"lua",
    "body":"imgui.PushButtonRepeat(${1:repeat})",
    "prefix":"imgui.PushButtonRepeat",
    "description":"[C++] void ImGui::PushButtonRepeat(bool repeat)\n\n"
  },
  "imgui.ImGuiTextFilter_Build":{
    "scope":"lua",
    "body":"ImGuiTextFilter:Build()",
    "prefix":"ImGuiTextFilter:Build",
    "description":"[C++] void ImGuiTextFilter::Build()\n\n"
  },
  "imgui.ImVector_ImFontPtr_resize":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:resize(${1:new_size})",
    "prefix":"ImVector_ImFontPtr:resize",
    "description":"[C++] void ImVector_ImFontPtr::resize(ImVector_ImFontPtr* self, int new_size)\n\n"
  },
  "imgui.igColorPicker4":{
    "scope":"lua",
    "body":"imgui.ColorPicker4(${1:label}, ${2:col}${3:[, flags=0]}${4:[, ref_col=((void*)0)]})",
    "prefix":"imgui.ColorPicker4",
    "description":"[C++] bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags=0, const float* ref_col=((void*)0))\n\n"
  },
  "imgui.ImVector_ImDrawChannel_size":{
    "scope":"lua",
    "body":"ImVector_ImDrawChannel:size()",
    "prefix":"ImVector_ImDrawChannel:size",
    "description":"[C++] int ImVector_ImDrawChannel::size(const ImVector_ImDrawChannel* self)\n\n"
  },
  "imgui.ImVector_ImVec4_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImVec4:pop_back()",
    "prefix":"ImVector_ImVec4:pop_back",
    "description":"[C++] void ImVector_ImVec4::pop_back(ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImVector_ImU32_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImU32:begin_const()",
    "prefix":"ImVector_ImU32:begin",
    "description":"[C++] ImU32 const * ImVector_ImU32::begin(const ImVector_ImU32* self)\n\n"
  },
  "imgui.igGetColumnWidth":{
    "scope":"lua",
    "body":"imgui.GetColumnWidth(${1:[column_index=-1]})",
    "prefix":"imgui.GetColumnWidth",
    "description":"[C++] float ImGui::GetColumnWidth(int column_index=-1)\n\n"
  },
  "imgui.igColorConvertHSVtoRGB":{
    "scope":"lua",
    "body":"imgui.ColorConvertHSVtoRGB(${1:h}, ${2:s}, ${3:v}, ${4:out_r}, ${5:out_g}, ${6:out_b})",
    "prefix":"imgui.ColorConvertHSVtoRGB",
    "description":"[C++] void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)\n\n"
  },
  "imgui.ImDrawList_AddLine":{
    "scope":"lua",
    "body":"ImDrawList:AddLine(${1:a}, ${2:b}, ${3:col}${4:[, thickness=1.0f]})",
    "prefix":"ImDrawList:AddLine",
    "description":"[C++] void ImDrawList::AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness=1.0f)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_empty":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:empty()",
    "prefix":"ImVector_ImFontAtlasCustomRect:empty",
    "description":"[C++] bool ImVector_ImFontAtlasCustomRect::empty(const ImVector_ImFontAtlasCustomRect* self)\n\n"
  },
  "imgui.igListBoxFnPtr":{
    "scope":"lua",
    "body":"imgui.ListBoxFnPtr(${1:label}, ${2:current_item}, ${3:items_getter}, ${4:data}, ${5:items_count}${6:[, height_in_items=-1]})",
    "prefix":"imgui.ListBox",
    "description":"[C++] bool ImGui::ListBox(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items=-1)\n\n"
  },
  "imgui.ImVector_ImDrawIdx_insert":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:insert(${1:it}, ${2:v})",
    "prefix":"ImVector_ImDrawIdx:insert",
    "description":"[C++] ImDrawIdx* ImVector_ImDrawIdx::insert(ImVector_ImDrawIdx* self, ImDrawIdx const * it, const ImDrawIdx v)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_push_back":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:push_back(${1:v})",
    "prefix":"ImVector_ImGuiTextRange:push_back",
    "description":"[C++] void ImVector_ImGuiTextRange::push_back(ImVector_ImGuiTextRange* self, const ImGuiTextRange v)\n\n"
  },
  "imgui.igGetStyleColorName":{
    "scope":"lua",
    "body":"imgui.GetStyleColorName(${1:idx})",
    "prefix":"imgui.GetStyleColorName",
    "description":"[C++] const char* ImGui::GetStyleColorName(ImGuiCol idx)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImGuiTextRange:erase",
    "description":"[C++] ImGuiTextRange* ImVector_ImGuiTextRange::erase(ImVector_ImGuiTextRange* self, ImGuiTextRange const * it, ImGuiTextRange const * it_last)\n\n"
  },
  "imgui.ImVector_ImDrawIdx__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImDrawIdx:_grow_capacity",
    "description":"[C++] int ImVector_ImDrawIdx::_grow_capacity(const ImVector_ImDrawIdx* self, int sz)\n\n"
  },
  "imgui.ImGuiInputTextFlags_CharsHexadecimal":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CharsHexadecimal",
    "prefix":"imgui.InputTextFlags.CharsHexadecimal",
    "description":"[C++] ImGuiInputTextFlags_CharsHexadecimal = 1 << 1\n\n"
  },
  "imgui.ImVector_ImWchar_front_const":{
    "scope":"lua",
    "body":"ImVector_ImWchar:front_const()",
    "prefix":"ImVector_ImWchar:front",
    "description":"[C++] ImWchar const * ImVector_ImWchar::front(const ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImVector_ImWchar_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImWchar:begin_const()",
    "prefix":"ImVector_ImWchar:begin",
    "description":"[C++] ImWchar const * ImVector_ImWchar::begin(const ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImVector_ImVec4_begin":{
    "scope":"lua",
    "body":"ImVector_ImVec4:begin()",
    "prefix":"ImVector_ImVec4:begin",
    "description":"[C++] ImVec4* ImVector_ImVec4::begin(ImVector_ImVec4* self)\n\n"
  },
  "imgui.igBeginPopup":{
    "scope":"lua",
    "body":"imgui.BeginPopup(${1:str_id}${2:[, flags=0]})",
    "prefix":"imgui.BeginPopup",
    "description":"[C++] bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags=0)\n\n"
  },
  "imgui.ImFontAtlasCustomRect.GlyphAdvanceX":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect.GlyphAdvanceX",
    "prefix":"ImFontAtlasCustomRect.GlyphAdvanceX",
    "description":"[C++] float ImFontAtlasCustomRect::GlyphAdvanceX\n\n"
  },
  "imgui.ImVector_ImDrawCmd_clear":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:clear()",
    "prefix":"ImVector_ImDrawCmd:clear",
    "description":"[C++] void ImVector_ImDrawCmd::clear(ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImGuiTextRange:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImGuiTextRange:_grow_capacity",
    "description":"[C++] int ImVector_ImGuiTextRange::_grow_capacity(const ImVector_ImGuiTextRange* self, int sz)\n\n"
  },
  "imgui.ImVector_ImFontAtlasCustomRect_push_back":{
    "scope":"lua",
    "body":"ImVector_ImFontAtlasCustomRect:push_back(${1:v})",
    "prefix":"ImVector_ImFontAtlasCustomRect:push_back",
    "description":"[C++] void ImVector_ImFontAtlasCustomRect::push_back(ImVector_ImFontAtlasCustomRect* self, const ImFontAtlasCustomRect v)\n\n"
  },
  "imgui.igCheckboxFlags":{
    "scope":"lua",
    "body":"imgui.CheckboxFlags(${1:label}, ${2:flags}, ${3:flags_value})",
    "prefix":"imgui.CheckboxFlags",
    "description":"[C++] bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)\n\n"
  },
  "imgui.ImVector_ImU32_swap":{
    "scope":"lua",
    "body":"ImVector_ImU32:swap(${1:rhs})",
    "prefix":"ImVector_ImU32:swap",
    "description":"[C++] void ImVector_ImU32::swap(ImVector_ImU32* self, ImVector_ImU32 rhs)\n\n"
  },
  "imgui.ImVector_ImU32_index_from_ptr":{
    "scope":"lua",
    "body":"ImVector_ImU32:index_from_ptr(${1:it})",
    "prefix":"ImVector_ImU32:index_from_ptr",
    "description":"[C++] int ImVector_ImU32::index_from_ptr(const ImVector_ImU32* self, ImU32 const * it)\n\n"
  },
  "imgui.ImFont_CalcTextSizeA":{
    "scope":"lua",
    "body":"ImFont:CalcTextSizeA(${1:size}, ${2:max_width}, ${3:wrap_width}, ${4:text_begin}${5:[, text_end=((void*)0)]}${6:[, remaining=((void*)0)]})",
    "prefix":"ImFont:CalcTextSizeA",
    "description":"[C++] ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end=((void*)0), const char** remaining=((void*)0))\n\n"
  },
  "imgui.ImFontAtlasCustomRect_IsPacked":{
    "scope":"lua",
    "body":"ImFontAtlasCustomRect:IsPacked()",
    "prefix":"ImFontAtlasCustomRect:IsPacked",
    "description":"[C++] bool ImFontAtlasCustomRect::IsPacked()\n\n"
  },
  "imgui.ImVector_ImGuiStoragePair_ImVector_ImGuiStoragePairVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImGuiStoragePair.ImVector_ImGuiStoragePairVector(${1:src})",
    "prefix":"imgui.ImVector_ImGuiStoragePair.ImVector_ImGuiStoragePair",
    "description":"[C++] ImVector_ImGuiStoragePair(const ImVector_ImGuiStoragePair src)\n\n"
  },
  "imgui.ImGuiColorEditFlags_NoLabel":{
    "scope":"lua",
    "body":"imgui.ColorEditFlags.NoLabel",
    "prefix":"imgui.ColorEditFlags.NoLabel",
    "description":"[C++] ImGuiColorEditFlags_NoLabel = 1 << 7\n\n"
  },
  "imgui.ImVector_ImFontGlyph_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImFontGlyph:pop_back()",
    "prefix":"ImVector_ImFontGlyph:pop_back",
    "description":"[C++] void ImVector_ImFontGlyph::pop_back(ImVector_ImFontGlyph* self)\n\n"
  },
  "imgui.ImVector_ImVec2_size":{
    "scope":"lua",
    "body":"ImVector_ImVec2:size()",
    "prefix":"ImVector_ImVec2:size",
    "description":"[C++] int ImVector_ImVec2::size(const ImVector_ImVec2* self)\n\n"
  },
  "imgui.ImVector_ImWchar_size":{
    "scope":"lua",
    "body":"ImVector_ImWchar:size()",
    "prefix":"ImVector_ImWchar:size",
    "description":"[C++] int ImVector_ImWchar::size(const ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImFont.FallbackGlyph":{
    "scope":"lua",
    "body":"ImFont.FallbackGlyph",
    "prefix":"ImFont.FallbackGlyph",
    "description":"[C++] const ImFontGlyph* ImFont::FallbackGlyph\n\n"
  },
  "imgui.ImVector_ImDrawCmd_begin_const":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:begin_const()",
    "prefix":"ImVector_ImDrawCmd:begin",
    "description":"[C++] ImDrawCmd const * ImVector_ImDrawCmd::begin(const ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImVector_ImVec4_front_const":{
    "scope":"lua",
    "body":"ImVector_ImVec4:front_const()",
    "prefix":"ImVector_ImVec4:front",
    "description":"[C++] ImVec4 const * ImVector_ImVec4::front(const ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImFontGlyphRangesBuilder_GetBit":{
    "scope":"lua",
    "body":"ImFontGlyphRangesBuilder:GetBit(${1:n})",
    "prefix":"ImFontGlyphRangesBuilder:GetBit",
    "description":"[C++] bool ImFontGlyphRangesBuilder::GetBit(int n)\n\n"
  },
  "imgui.ImGuiIO.ImeWindowHandle":{
    "scope":"lua",
    "body":"ImGuiIO.ImeWindowHandle",
    "prefix":"ImGuiIO.ImeWindowHandle",
    "description":"[C++] void* ImGuiIO::ImeWindowHandle\n\n"
  },
  "imgui.ImVector_ImFontPtr_back":{
    "scope":"lua",
    "body":"ImVector_ImFontPtr:back()",
    "prefix":"ImVector_ImFontPtr:back",
    "description":"[C++] ImFont** ImVector_ImFontPtr::back(ImVector_ImFontPtr* self)\n\n"
  },
  "imgui.igBullet":{
    "scope":"lua",
    "body":"imgui.Bullet()",
    "prefix":"imgui.Bullet",
    "description":"[C++] void ImGui::Bullet()\n\n"
  },
  "imgui.ImVector_ImDrawVert_push_front":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:push_front(${1:v})",
    "prefix":"ImVector_ImDrawVert:push_front",
    "description":"[C++] void ImVector_ImDrawVert::push_front(ImVector_ImDrawVert* self, const ImDrawVert v)\n\n"
  },
  "imgui.ImVector_ImVec2_eraseTPtr":{
    "scope":"lua",
    "body":"ImVector_ImVec2:eraseTPtr(${1:it}, ${2:it_last})",
    "prefix":"ImVector_ImVec2:erase",
    "description":"[C++] ImVec2* ImVector_ImVec2::erase(ImVector_ImVec2* self, ImVec2 const * it, ImVec2 const * it_last)\n\n"
  },
  "imgui.ImVector_ImWchar_ImVector_ImWcharVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImWchar.ImVector_ImWcharVector(${1:src})",
    "prefix":"imgui.ImVector_ImWchar.ImVector_ImWchar",
    "description":"[C++] ImVector_ImWchar(const ImVector_ImWchar src)\n\n"
  },
  "imgui.ImVector_float_back_const":{
    "scope":"lua",
    "body":"ImVector_float:back_const()",
    "prefix":"ImVector_float:back",
    "description":"[C++] float const * ImVector_float::back(const ImVector_float* self)\n\n"
  },
  "imgui.ImGuiIO_AddInputCharacter":{
    "scope":"lua",
    "body":"ImGuiIO:AddInputCharacter(${1:c})",
    "prefix":"ImGuiIO:AddInputCharacter",
    "description":"[C++] void ImGuiIO::AddInputCharacter(unsigned int c)\n\n"
  },
  "imgui.ImVector_push_front":{
    "scope":"lua",
    "body":"ImVector:push_front(${1:v})",
    "prefix":"ImVector:push_front",
    "description":"[C++] void ImVector::push_front(const T& v)\n\n"
  },
  "imgui.ImVector_ImVec4_erase":{
    "scope":"lua",
    "body":"ImVector_ImVec4:erase(${1:it})",
    "prefix":"ImVector_ImVec4:erase",
    "description":"[C++] ImVec4* ImVector_ImVec4::erase(ImVector_ImVec4* self, ImVec4 const * it)\n\n"
  },
  "imgui.ImFontAtlas.TexHeight":{
    "scope":"lua",
    "body":"ImFontAtlas.TexHeight",
    "prefix":"ImFontAtlas.TexHeight",
    "description":"[C++] int ImFontAtlas::TexHeight\n\n"
  },
  "imgui.ImVector_ImDrawIdx_end":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:_end()",
    "prefix":"ImVector_ImDrawIdx:end",
    "description":"[C++] ImDrawIdx* ImVector_ImDrawIdx::end(ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImVector_ImGuiTextRange_ImVector_ImGuiTextRangeVector":{
    "scope":"lua",
    "body":"imgui.ImVector_ImGuiTextRange.ImVector_ImGuiTextRangeVector(${1:src})",
    "prefix":"imgui.ImVector_ImGuiTextRange.ImVector_ImGuiTextRange",
    "description":"[C++] ImVector_ImGuiTextRange(const ImVector_ImGuiTextRange src)\n\n"
  },
  "imgui.igIsWindowHovered":{
    "scope":"lua",
    "body":"imgui.IsWindowHovered(${1:[flags=0]})",
    "prefix":"imgui.IsWindowHovered",
    "description":"[C++] bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags=0)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_resizeT":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:resizeT(${1:new_size}, ${2:v})",
    "prefix":"ImVector_ImDrawCmd:resize",
    "description":"[C++] void ImVector_ImDrawCmd::resize(ImVector_ImDrawCmd* self, int new_size, const ImDrawCmd v)\n\n"
  },
  "imgui.ImGuiInputTextFlags_CallbackCompletion":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.CallbackCompletion",
    "prefix":"imgui.InputTextFlags.CallbackCompletion",
    "description":"[C++] ImGuiInputTextFlags_CallbackCompletion = 1 << 6\n\n"
  },
  "imgui.igGetDrawListSharedData":{
    "scope":"lua",
    "body":"imgui.GetDrawListSharedData()",
    "prefix":"imgui.GetDrawListSharedData",
    "description":"[C++] ImDrawListSharedData* ImGui::GetDrawListSharedData()\n\n"
  },
  "imgui.ImGuiNavInput_DpadLeft":{
    "scope":"lua",
    "body":"imgui.NavInput.DpadLeft",
    "prefix":"imgui.NavInput.DpadLeft",
    "description":"[C++] ImGuiNavInput_DpadLeft = 4\n\n"
  },
  "imgui.igMenuItemBool":{
    "scope":"lua",
    "body":"imgui.MenuItemBool(${1:label}${2:[, shortcut=((void*)0)]}${3:[, selected=false]}${4:[, enabled=true]})",
    "prefix":"imgui.MenuItem",
    "description":"[C++] bool ImGui::MenuItem(const char* label, const char* shortcut=((void*)0), bool selected=false, bool enabled=true)\n\n"
  },
  "imgui.ImVector_char_contains":{
    "scope":"lua",
    "body":"ImVector_char:contains(${1:v})",
    "prefix":"ImVector_char:contains",
    "description":"[C++] bool ImVector_char::contains(const ImVector_char* self, const char v)\n\n"
  },
  "imgui.ImGuiInputTextCallbackData.EventFlag":{
    "scope":"lua",
    "body":"ImGuiInputTextCallbackData.EventFlag",
    "prefix":"ImGuiInputTextCallbackData.EventFlag",
    "description":"[C++] ImGuiInputTextFlags ImGuiInputTextCallbackData::EventFlag\n\n"
  },
  "imgui.ImVector_ImDrawIdx_front":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:front()",
    "prefix":"ImVector_ImDrawIdx:front",
    "description":"[C++] ImDrawIdx* ImVector_ImDrawIdx::front(ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImGuiInputTextFlags_AllowTabInput":{
    "scope":"lua",
    "body":"imgui.InputTextFlags.AllowTabInput",
    "prefix":"imgui.InputTextFlags.AllowTabInput",
    "description":"[C++] ImGuiInputTextFlags_AllowTabInput = 1 << 10\n\n"
  },
  "imgui.ImVector_ImDrawVert_back":{
    "scope":"lua",
    "body":"ImVector_ImDrawVert:back()",
    "prefix":"ImVector_ImDrawVert:back",
    "description":"[C++] ImDrawVert* ImVector_ImDrawVert::back(ImVector_ImDrawVert* self)\n\n"
  },
  "imgui.CreateFontsTexture":{
    "scope":"lua",
    "body":"imgui.CreateFontsTexture()",
    "prefix":"imgui.CreateFontsTexture",
    "description":"[mimgui function]\n\nReturns: bool success\n\n"
  },
  "imgui.ImVector_end":{
    "scope":"lua",
    "body":"ImVector:_end()",
    "prefix":"ImVector:end",
    "description":"[C++] T* ImVector::end()\n\n"
  },
  "imgui.ImVector_ImDrawIdx_capacity":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:capacity()",
    "prefix":"ImVector_ImDrawIdx:capacity",
    "description":"[C++] int ImVector_ImDrawIdx::capacity(const ImVector_ImDrawIdx* self)\n\n"
  },
  "imgui.ImVector_ImDrawCmd_end":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:_end()",
    "prefix":"ImVector_ImDrawCmd:end",
    "description":"[C++] ImDrawCmd* ImVector_ImDrawCmd::end(ImVector_ImDrawCmd* self)\n\n"
  },
  "imgui.ImVector_ImDrawCmd__grow_capacity":{
    "scope":"lua",
    "body":"ImVector_ImDrawCmd:_grow_capacity(${1:sz})",
    "prefix":"ImVector_ImDrawCmd:_grow_capacity",
    "description":"[C++] int ImVector_ImDrawCmd::_grow_capacity(const ImVector_ImDrawCmd* self, int sz)\n\n"
  },
  "imgui.igOpenPopupOnItemClick":{
    "scope":"lua",
    "body":"imgui.OpenPopupOnItemClick(${1:[str_id=((void*)0)]}${2:[, mouse_button=1]})",
    "prefix":"imgui.OpenPopupOnItemClick",
    "description":"[C++] bool ImGui::OpenPopupOnItemClick(const char* str_id=((void*)0), int mouse_button=1)\n\n"
  },
  "imgui.ImGuiStorage":{
    "scope":"lua",
    "body":"new.ImGuiStorage($1)",
    "prefix":"new.ImGuiStorage",
    "description":"typedef struct ImGuiStorage ImGuiStorage\n\n"
  },
  "imgui.ImGuiStorage_SetBool":{
    "scope":"lua",
    "body":"ImGuiStorage:SetBool(${1:key}, ${2:val})",
    "prefix":"ImGuiStorage:SetBool",
    "description":"[C++] void ImGuiStorage::SetBool(ImGuiID key, bool val)\n\n"
  },
  "imgui.igRender":{
    "scope":"lua",
    "body":"imgui.Render()",
    "prefix":"imgui.Render",
    "description":"[C++] void ImGui::Render()\n\n"
  },
  "imgui.ImVector_ImTextureID_back":{
    "scope":"lua",
    "body":"ImVector_ImTextureID:back()",
    "prefix":"ImVector_ImTextureID:back",
    "description":"[C++] ImTextureID* ImVector_ImTextureID::back(ImVector_ImTextureID* self)\n\n"
  },
  "imgui.igShowFontSelector":{
    "scope":"lua",
    "body":"imgui.ShowFontSelector(${1:label})",
    "prefix":"imgui.ShowFontSelector",
    "description":"[C++] void ImGui::ShowFontSelector(const char* label)\n\n"
  },
  "imgui.ImVector_ImVec4_front":{
    "scope":"lua",
    "body":"ImVector_ImVec4:front()",
    "prefix":"ImVector_ImVec4:front",
    "description":"[C++] ImVec4* ImVector_ImVec4::front(ImVector_ImVec4* self)\n\n"
  },
  "imgui.ImVector_ImWchar_pop_back":{
    "scope":"lua",
    "body":"ImVector_ImWchar:pop_back()",
    "prefix":"ImVector_ImWchar:pop_back",
    "description":"[C++] void ImVector_ImWchar::pop_back(ImVector_ImWchar* self)\n\n"
  },
  "imgui.ImGuiStyle.WindowBorderSize":{
    "scope":"lua",
    "body":"ImGuiStyle.WindowBorderSize",
    "prefix":"ImGuiStyle.WindowBorderSize",
    "description":"[C++] float ImGuiStyle::WindowBorderSize\n\n"
  },
  "imgui.ImVector_ImDrawIdx_resize":{
    "scope":"lua",
    "body":"ImVector_ImDrawIdx:resize(${1:new_size})",
    "prefix":"ImVector_ImDrawIdx:resize",
    "description":"[C++] void ImVector_ImDrawIdx::resize(ImVector_ImDrawIdx* self, int new_size)\n\n"
  },
  "imgui.ImVector_char_begin_const":{
    "scope":"lua",
    "body":"ImVector_char:begin_const()",
    "prefix":"ImVector_char:begin",
    "description":"[C++] char const * ImVector_char::begin(const ImVector_char* self)\n\n"
  },
  "imgui.ImVector_char_size":{
    "scope":"lua",
    "body":"ImVector_char:size()",
    "prefix":"ImVector_char:size",
    "description":"[C++] int ImVector_char::size(const ImVector_char* self)\n\n"
  },
  "imgui.ImGuiCol_BorderShadow":{
    "scope":"lua",
    "body":"imgui.Col.BorderShadow",
    "prefix":"imgui.Col.BorderShadow",
    "description":"[C++] ImGuiCol_BorderShadow = 6\n\n"
  },
  "imgui.ImGuiTreeNodeFlags_Leaf":{
    "scope":"lua",
    "body":"imgui.TreeNodeFlags.Leaf",
    "prefix":"imgui.TreeNodeFlags.Leaf",
    "description":"[C++] ImGuiTreeNodeFlags_Leaf = 1 << 8\n\n"
  }
}